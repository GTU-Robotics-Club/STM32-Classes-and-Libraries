
Bot_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003584  08003584  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003584  08003584  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800358c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  080035fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080035fc  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fea7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f6  00000000  00000000  0002ff40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00032138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00033048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f7d  00000000  00000000  00033e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd8d  00000000  00000000  0004ddf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d78d  00000000  00000000  00059b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e730f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  000e738c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800349c 	.word	0x0800349c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800349c 	.word	0x0800349c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN4BaseC1EP5MotorS1_S1_S1_>:
* ##########    ###    ###     ##########
* ##########    ###     ###    ##########
*
*/
#include "Base.h"
Base::Base(Motor* motor_1, Motor* motor_2, Motor* motor_3, Motor* motor_4) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	this->motor_1 = motor_1;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	68ba      	ldr	r2, [r7, #8]
 800016e:	601a      	str	r2, [r3, #0]
	this->motor_2 = motor_2;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	605a      	str	r2, [r3, #4]
	this->motor_3 = motor_3;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	683a      	ldr	r2, [r7, #0]
 800017a:	609a      	str	r2, [r3, #8]
	this->motor_4 = motor_4;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	69ba      	ldr	r2, [r7, #24]
 8000180:	60da      	str	r2, [r3, #12]
}
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	4618      	mov	r0, r3
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
* ##########    ###     ###    ##########
*
*/
#include "Encoder.h"

Encoder::Encoder(TIM_HandleTypeDef *htim) {
 800018e:	b580      	push	{r7, lr}
 8000190:	b082      	sub	sp, #8
 8000192:	af00      	add	r7, sp, #0
 8000194:	6078      	str	r0, [r7, #4]
 8000196:	6039      	str	r1, [r7, #0]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2200      	movs	r2, #0
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2200      	movs	r2, #0
 80001a8:	615a      	str	r2, [r3, #20]
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2201      	movs	r2, #1
 80001ae:	761a      	strb	r2, [r3, #24]
	this->htim = htim;
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80001b6:	683b      	ldr	r3, [r7, #0]
 80001b8:	213c      	movs	r1, #60	; 0x3c
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 ff6a 	bl	8002094 <HAL_TIM_Encoder_Start>
	this->htim->Instance->CNT = 0;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	68db      	ldr	r3, [r3, #12]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2200      	movs	r2, #0
 80001c8:	625a      	str	r2, [r3, #36]	; 0x24
	this->direction = !(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim));
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f003 0310 	and.w	r3, r3, #16
 80001d4:	2b10      	cmp	r3, #16
 80001d6:	bf14      	ite	ne
 80001d8:	2301      	movne	r3, #1
 80001da:	2300      	moveq	r3, #0
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	461a      	mov	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	701a      	strb	r2, [r3, #0]
	this->value = this->htim->Instance->CNT;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	609a      	str	r2, [r3, #8]
	this->prescaler_ = 65535;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001f6:	611a      	str	r2, [r3, #16]
	this->init = true;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2201      	movs	r2, #1
 80001fc:	761a      	strb	r2, [r3, #24]
}
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4618      	mov	r0, r3
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <_ZN5MotorC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmP11TIM_TypeDef>:

Motor::Motor() {

}

Motor::Motor(GPIO_TypeDef* GPIOx_1, uint16_t GPIO_Pin_1, TIM_HandleTypeDef *htim, uint32_t Channel, TIM_TypeDef *tim) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	603b      	str	r3, [r7, #0]
 8000214:	4613      	mov	r3, r2
 8000216:	80fb      	strh	r3, [r7, #6]
	this->cytron = true;
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	2201      	movs	r2, #1
 800021c:	761a      	strb	r2, [r3, #24]
	this->GPIOx_1 = GPIOx_1;
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	68ba      	ldr	r2, [r7, #8]
 8000222:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_1 = GPIO_Pin_1;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	88fa      	ldrh	r2, [r7, #6]
 8000228:	811a      	strh	r2, [r3, #8]
	this->htim = htim;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	683a      	ldr	r2, [r7, #0]
 800022e:	60da      	str	r2, [r3, #12]
	this->Channel = Channel;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	69ba      	ldr	r2, [r7, #24]
 8000234:	611a      	str	r2, [r3, #16]
	this->tim = tim;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	69fa      	ldr	r2, [r7, #28]
 800023a:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(htim, this->Channel);
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	691b      	ldr	r3, [r3, #16]
 8000240:	4619      	mov	r1, r3
 8000242:	6838      	ldr	r0, [r7, #0]
 8000244:	f001 fde2 	bl	8001e0c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(this->GPIOx_1, this->GPIO_Pin_1, GPIO_PIN_RESET);
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	6818      	ldr	r0, [r3, #0]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	891b      	ldrh	r3, [r3, #8]
 8000250:	2200      	movs	r2, #0
 8000252:	4619      	mov	r1, r3
 8000254:	f001 f81d 	bl	8001292 <HAL_GPIO_WritePin>
}
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <_ZN5DebugC1EP20__UART_HandleTypeDef>:
#include <string.h>
#include "stm32f1xx.h"

class Debug {
public:
	Debug(UART_HandleTypeDef* huart) {
 8000262:	b480      	push	{r7}
 8000264:	b083      	sub	sp, #12
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	6039      	str	r1, [r7, #0]
		this->huart = huart;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	683a      	ldr	r2, [r7, #0]
 8000270:	601a      	str	r2, [r3, #0]
	}
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4618      	mov	r0, r3
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr

0800027e <_ZN5Debug7uprintfEPc>:
	void uprintf(char *str) {
 800027e:	b590      	push	{r4, r7, lr}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	6039      	str	r1, [r7, #0]
		HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), 100);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681c      	ldr	r4, [r3, #0]
 800028c:	6838      	ldr	r0, [r7, #0]
 800028e:	f7ff ff5d 	bl	800014c <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29a      	uxth	r2, r3
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	6839      	ldr	r1, [r7, #0]
 800029a:	4620      	mov	r0, r4
 800029c:	f002 fb50 	bl	8002940 <HAL_UART_Transmit>
	}
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd90      	pop	{r4, r7, pc}

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b0bb      	sub	sp, #236	; 0xec
 80002ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ae:	f000 fd39 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b2:	f000 f87d 	bl	80003b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b6:	f000 faaf 	bl	8000818 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80002ba:	f000 fa7f 	bl	80007bc <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80002be:	f000 f8c3 	bl	8000448 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 80002c2:	f000 f8f5 	bl	80004b0 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80002c6:	f000 f9bd 	bl	8000644 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80002ca:	f000 fa19 	bl	8000700 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  Motor motor_1(GPIOB, GPIO_PIN_10, &htim1, TIM_CHANNEL_1, TIM1);
 80002ce:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80002d2:	4b2f      	ldr	r3, [pc, #188]	; (8000390 <main+0xe8>)
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <main+0xec>)
 80002dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002e0:	492d      	ldr	r1, [pc, #180]	; (8000398 <main+0xf0>)
 80002e2:	f7ff ff91 	bl	8000208 <_ZN5MotorC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmP11TIM_TypeDef>
  Motor motor_2(GPIOB, GPIO_PIN_5, &htim1, TIM_CHANNEL_3, TIM1);
 80002e6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80002ea:	4b29      	ldr	r3, [pc, #164]	; (8000390 <main+0xe8>)
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2308      	movs	r3, #8
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	4b28      	ldr	r3, [pc, #160]	; (8000394 <main+0xec>)
 80002f4:	2220      	movs	r2, #32
 80002f6:	4928      	ldr	r1, [pc, #160]	; (8000398 <main+0xf0>)
 80002f8:	f7ff ff86 	bl	8000208 <_ZN5MotorC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmP11TIM_TypeDef>
  Motor motor_3(GPIOB, GPIO_PIN_3, &htim1, TIM_CHANNEL_4, TIM1);
 80002fc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8000300:	4b23      	ldr	r3, [pc, #140]	; (8000390 <main+0xe8>)
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	230c      	movs	r3, #12
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <main+0xec>)
 800030a:	2208      	movs	r2, #8
 800030c:	4922      	ldr	r1, [pc, #136]	; (8000398 <main+0xf0>)
 800030e:	f7ff ff7b 	bl	8000208 <_ZN5MotorC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmP11TIM_TypeDef>
  Motor motor_4(GPIOB, GPIO_PIN_4, &htim1, TIM_CHANNEL_2, TIM1);
 8000312:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <main+0xe8>)
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	2304      	movs	r3, #4
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <main+0xec>)
 8000320:	2210      	movs	r2, #16
 8000322:	491d      	ldr	r1, [pc, #116]	; (8000398 <main+0xf0>)
 8000324:	f7ff ff70 	bl	8000208 <_ZN5MotorC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmP11TIM_TypeDef>
  Base bot(&motor_1, &motor_2, &motor_3, &motor_4);
 8000328:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800032c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000330:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000334:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000338:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	4623      	mov	r3, r4
 8000340:	f7ff ff0c 	bl	800015c <_ZN4BaseC1EP5MotorS1_S1_S1_>
  Encoder encoder_1(&htim2);
 8000344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000348:	4914      	ldr	r1, [pc, #80]	; (800039c <main+0xf4>)
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff1f 	bl	800018e <_ZN7EncoderC1EP17TIM_HandleTypeDef>
  Encoder encoder_2(&htim3);
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	4912      	ldr	r1, [pc, #72]	; (80003a0 <main+0xf8>)
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff19 	bl	800018e <_ZN7EncoderC1EP17TIM_HandleTypeDef>
  Debug debug(&huart2);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4911      	ldr	r1, [pc, #68]	; (80003a4 <main+0xfc>)
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff7e 	bl	8000262 <_ZN5DebugC1EP20__UART_HandleTypeDef>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf(buf, "Pushbtn : %d\r\n", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15));
 8000366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <main+0x100>)
 800036c:	f000 ff7a 	bl	8001264 <HAL_GPIO_ReadPin>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000378:	490c      	ldr	r1, [pc, #48]	; (80003ac <main+0x104>)
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fc7c 	bl	8002c78 <siprintf>
	  debug.uprintf(buf);
 8000380:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4611      	mov	r1, r2
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff78 	bl	800027e <_ZN5Debug7uprintfEPc>
	  sprintf(buf, "Pushbtn : %d\r\n", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15));
 800038e:	e7ea      	b.n	8000366 <main+0xbe>
 8000390:	40012c00 	.word	0x40012c00
 8000394:	200000e0 	.word	0x200000e0
 8000398:	40010c00 	.word	0x40010c00
 800039c:	20000128 	.word	0x20000128
 80003a0:	20000170 	.word	0x20000170
 80003a4:	200001b8 	.word	0x200001b8
 80003a8:	40011000 	.word	0x40011000
 80003ac:	080034b4 	.word	0x080034b4

080003b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b090      	sub	sp, #64	; 0x40
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	2228      	movs	r2, #40	; 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fc52 	bl	8002c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d6:	2301      	movs	r3, #1
 80003d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003da:	2310      	movs	r3, #16
 80003dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003de:	2302      	movs	r3, #2
 80003e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003e2:	2300      	movs	r3, #0
 80003e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 f89f 	bl	8001534 <HAL_RCC_OscConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	bf14      	ite	ne
 80003fc:	2301      	movne	r3, #1
 80003fe:	2300      	moveq	r3, #0
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000406:	f000 fa79 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2302      	movs	r3, #2
 8000410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2102      	movs	r1, #2
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fb05 	bl	8001a34 <HAL_RCC_ClockConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	bf14      	ite	ne
 8000430:	2301      	movne	r3, #1
 8000432:	2300      	moveq	r3, #0
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800043a:	f000 fa5f 	bl	80008fc <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	; 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800044e:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <_ZL12MX_I2C1_Initv+0x60>)
 8000450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000454:	4a15      	ldr	r2, [pc, #84]	; (80004ac <_ZL12MX_I2C1_Initv+0x64>)
 8000456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800046a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800046e:	2200      	movs	r2, #0
 8000470:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000484:	4807      	ldr	r0, [pc, #28]	; (80004a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000486:	f000 ff1d 	bl	80012c4 <HAL_I2C_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	bf14      	ite	ne
 8000490:	2301      	movne	r3, #1
 8000492:	2300      	moveq	r3, #0
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800049a:	f000 fa2f 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000008c 	.word	0x2000008c
 80004a8:	40005400 	.word	0x40005400
 80004ac:	000186a0 	.word	0x000186a0

080004b0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b092      	sub	sp, #72	; 0x48
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2220      	movs	r2, #32
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fbc4 	bl	8002c68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e0:	4b56      	ldr	r3, [pc, #344]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 80004e2:	4a57      	ldr	r2, [pc, #348]	; (8000640 <_ZL12MX_TIM1_Initv+0x190>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80004e6:	4b55      	ldr	r3, [pc, #340]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b53      	ldr	r3, [pc, #332]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80004f2:	4b52      	ldr	r3, [pc, #328]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 80004f4:	2264      	movs	r2, #100	; 0x64
 80004f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b50      	ldr	r3, [pc, #320]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fe:	4b4f      	ldr	r3, [pc, #316]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	4b4d      	ldr	r3, [pc, #308]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800050a:	484c      	ldr	r0, [pc, #304]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 800050c:	f001 fc2e 	bl	8001d6c <HAL_TIM_PWM_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8000520:	f000 f9ec 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000524:	2300      	movs	r3, #0
 8000526:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800052c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000530:	4619      	mov	r1, r3
 8000532:	4842      	ldr	r0, [pc, #264]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 8000534:	f002 f908 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf14      	ite	ne
 800053e:	2301      	movne	r3, #1
 8000540:	2300      	moveq	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8000548:	f000 f9d8 	bl	80008fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054c:	2360      	movs	r3, #96	; 0x60
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000554:	2300      	movs	r3, #0
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000558:	2300      	movs	r3, #0
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	4832      	ldr	r0, [pc, #200]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 8000572:	f001 fe1d 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8000586:	f000 f9b9 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	2204      	movs	r2, #4
 8000590:	4619      	mov	r1, r3
 8000592:	482a      	ldr	r0, [pc, #168]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 8000594:	f001 fe0c 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	bf14      	ite	ne
 800059e:	2301      	movne	r3, #1
 80005a0:	2300      	moveq	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <_ZL12MX_TIM1_Initv+0xfc>
  {
    Error_Handler();
 80005a8:	f000 f9a8 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	2208      	movs	r2, #8
 80005b2:	4619      	mov	r1, r3
 80005b4:	4821      	ldr	r0, [pc, #132]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 80005b6:	f001 fdfb 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	bf14      	ite	ne
 80005c0:	2301      	movne	r3, #1
 80005c2:	2300      	moveq	r3, #0
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <_ZL12MX_TIM1_Initv+0x11e>
  {
    Error_Handler();
 80005ca:	f000 f997 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d2:	220c      	movs	r2, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	4819      	ldr	r0, [pc, #100]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 80005d8:	f001 fdea 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf14      	ite	ne
 80005e2:	2301      	movne	r3, #1
 80005e4:	2300      	moveq	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <_ZL12MX_TIM1_Initv+0x140>
  {
    Error_Handler();
 80005ec:	f000 f986 	bl	80008fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000608:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 8000614:	f002 f8f6 	bl	8002804 <HAL_TIMEx_ConfigBreakDeadTime>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf14      	ite	ne
 800061e:	2301      	movne	r3, #1
 8000620:	2300      	moveq	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <_ZL12MX_TIM1_Initv+0x17c>
  {
    Error_Handler();
 8000628:	f000 f968 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <_ZL12MX_TIM1_Initv+0x18c>)
 800062e:	f000 fa71 	bl	8000b14 <HAL_TIM_MspPostInit>

}
 8000632:	bf00      	nop
 8000634:	3748      	adds	r7, #72	; 0x48
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000e0 	.word	0x200000e0
 8000640:	40012c00 	.word	0x40012c00

08000644 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2224      	movs	r2, #36	; 0x24
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fb08 	bl	8002c68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 8000662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 8000676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800067a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000688:	2303      	movs	r3, #3
 800068a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006a0:	2301      	movs	r3, #1
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	4812      	ldr	r0, [pc, #72]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 80006b4:	f001 fc4c 	bl	8001f50 <HAL_TIM_Encoder_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	bf14      	ite	ne
 80006be:	2301      	movne	r3, #1
 80006c0:	2300      	moveq	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80006c8:	f000 f918 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <_ZL12MX_TIM2_Initv+0xb8>)
 80006da:	f002 f835 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80006ee:	f000 f905 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	; 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000128 	.word	0x20000128

08000700 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2224      	movs	r2, #36	; 0x24
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 faaa 	bl	8002c68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 800071e:	4a26      	ldr	r2, [pc, #152]	; (80007b8 <_ZL12MX_TIM3_Initv+0xb8>)
 8000720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000742:	2303      	movs	r3, #3
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800075a:	2301      	movs	r3, #1
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 800076e:	f001 fbef 	bl	8001f50 <HAL_TIM_Encoder_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000782:	f000 f8bb 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000794:	f001 ffd8 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80007a8:	f000 f8a8 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3730      	adds	r7, #48	; 0x30
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000170 	.word	0x20000170
 80007b8:	40000400 	.word	0x40000400

080007bc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x58>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80007f4:	f002 f857 	bl	80028a6 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000808:	f000 f878 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200001b8 	.word	0x200001b8
 8000814:	40004400 	.word	0x40004400

08000818 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082c:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0310 	and.w	r3, r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <_ZL12MX_GPIO_Initv+0xd4>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C5_Pin|C8_Pin|C6_Pin|C7_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800087a:	481d      	ldr	r0, [pc, #116]	; (80008f0 <_ZL12MX_GPIO_Initv+0xd8>)
 800087c:	f000 fd09 	bl	8001292 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <_ZL12MX_GPIO_Initv+0xdc>)
 8000888:	f000 fd03 	bl	8001292 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PUSH_BUTTON_1_Pin PUSH_BUTTON_2_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_1_Pin|PUSH_BUTTON_2_Pin;
 800088c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	4619      	mov	r1, r3
 80008a0:	4815      	ldr	r0, [pc, #84]	; (80008f8 <_ZL12MX_GPIO_Initv+0xe0>)
 80008a2:	f000 fb85 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C5_Pin C8_Pin C6_Pin C7_Pin */
  GPIO_InitStruct.Pin = C5_Pin|C8_Pin|C6_Pin|C7_Pin;
 80008a6:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4619      	mov	r1, r3
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <_ZL12MX_GPIO_Initv+0xd8>)
 80008c0:	f000 fb76 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80008c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <_ZL12MX_GPIO_Initv+0xdc>)
 80008de:	f000 fb67 	bl	8000fb0 <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010c00 	.word	0x40010c00
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40011000 	.word	0x40011000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	e7fe      	b.n	8000902 <Error_Handler+0x6>

08000904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_MspInit+0x5c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_MspInit+0x5c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x5c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_MspInit+0x60>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_MspInit+0x60>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000
 8000964:	40010000 	.word	0x40010000

08000968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_I2C_MspInit+0x90>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d132      	bne.n	80009ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_I2C_MspInit+0x94>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <HAL_I2C_MspInit+0x94>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_I2C_MspInit+0x94>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_MPU_Pin|SDA_MPU_Pin;
 80009a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a6:	2312      	movs	r3, #18
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <HAL_I2C_MspInit+0x98>)
 80009b6:	f000 fafb 	bl	8000fb0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_I2C_MspInit+0x9c>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <HAL_I2C_MspInit+0x9c>)
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_I2C_MspInit+0x94>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_I2C_MspInit+0x94>)
 80009dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_I2C_MspInit+0x94>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40005400 	.word	0x40005400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	40010000 	.word	0x40010000

08000a08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <HAL_TIM_PWM_MspInit+0x34>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10b      	bne.n	8000a32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a62:	d124      	bne.n	8000aae <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	61d3      	str	r3, [r2, #28]
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EN_11_Pin|EN_12_Pin;
 8000a94:	2303      	movs	r3, #3
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4819      	ldr	r0, [pc, #100]	; (8000b0c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000aa8:	f000 fa82 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aac:	e028      	b.n	8000b00 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d123      	bne.n	8000b00 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	61d3      	str	r3, [r2, #28]
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EN_21_Pin|EN_22_Pin;
 8000ae8:	23c0      	movs	r3, #192	; 0xc0
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000afc:	f000 fa58 	bl	8000fb0 <HAL_GPIO_Init>
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40000400 	.word	0x40000400

08000b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_TIM_MspPostInit+0x5c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d118      	bne.n	8000b66 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_TIM_MspPostInit+0x60>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_TIM_MspPostInit+0x60>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_TIM_MspPostInit+0x60>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000b4c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_TIM_MspPostInit+0x64>)
 8000b62:	f000 fa25 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40012c00 	.word	0x40012c00
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d12f      	bne.n	8000bfc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480b      	ldr	r0, [pc, #44]	; (8000c0c <HAL_UART_MspInit+0x90>)
 8000be0:	f000 f9e6 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be4:	2308      	movs	r3, #8
 8000be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_UART_MspInit+0x90>)
 8000bf8:	f000 f9da 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010800 	.word	0x40010800

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f8ab 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f001 ffc0 	bl	8002c14 <__errno>
 8000c94:	4602      	mov	r2, r0
 8000c96:	230c      	movs	r3, #12
 8000c98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20005000 	.word	0x20005000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200001f8 	.word	0x200001f8
 8000cc8:	20000210 	.word	0x20000210

08000ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cda:	e003      	b.n	8000ce4 <LoopCopyDataInit>

08000cdc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ce0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ce2:	3104      	adds	r1, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ce8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cec:	d3f6      	bcc.n	8000cdc <CopyDataInit>
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cf0:	e002      	b.n	8000cf8 <LoopFillZerobss>

08000cf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cf4:	f842 3b04 	str.w	r3, [r2], #4

08000cf8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cfc:	d3f9      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cfe:	f7ff ffe5 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f001 ff8d 	bl	8002c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d06:	f7ff facf 	bl	80002a8 <main>
  bx lr
 8000d0a:	4770      	bx	lr
  ldr r3, =_sidata
 8000d0c:	0800358c 	.word	0x0800358c
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d14:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000d18:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000d1c:	2000020c 	.word	0x2000020c

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x28>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x28>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f907 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fde0 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f911 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f8e7 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x1c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000204 	.word	0x20000204

08000dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <HAL_GetTick+0x10>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000204 	.word	0x20000204

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff90 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff49 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff5e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff90 	bl	8000ea0 <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5f 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffb0 	bl	8000f04 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e127      	b.n	8001214 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8116 	bne.w	800120e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d034      	beq.n	8001054 <HAL_GPIO_Init+0xa4>
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d80d      	bhi.n	800100a <HAL_GPIO_Init+0x5a>
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x9a>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d804      	bhi.n	8001000 <HAL_GPIO_Init+0x50>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d031      	beq.n	800105e <HAL_GPIO_Init+0xae>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d01c      	beq.n	8001038 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ffe:	e048      	b.n	8001092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001000:	2b03      	cmp	r3, #3
 8001002:	d043      	beq.n	800108c <HAL_GPIO_Init+0xdc>
 8001004:	2b11      	cmp	r3, #17
 8001006:	d01b      	beq.n	8001040 <HAL_GPIO_Init+0x90>
          break;
 8001008:	e043      	b.n	8001092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800100a:	4a89      	ldr	r2, [pc, #548]	; (8001230 <HAL_GPIO_Init+0x280>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d026      	beq.n	800105e <HAL_GPIO_Init+0xae>
 8001010:	4a87      	ldr	r2, [pc, #540]	; (8001230 <HAL_GPIO_Init+0x280>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d806      	bhi.n	8001024 <HAL_GPIO_Init+0x74>
 8001016:	4a87      	ldr	r2, [pc, #540]	; (8001234 <HAL_GPIO_Init+0x284>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d020      	beq.n	800105e <HAL_GPIO_Init+0xae>
 800101c:	4a86      	ldr	r2, [pc, #536]	; (8001238 <HAL_GPIO_Init+0x288>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01d      	beq.n	800105e <HAL_GPIO_Init+0xae>
          break;
 8001022:	e036      	b.n	8001092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001024:	4a85      	ldr	r2, [pc, #532]	; (800123c <HAL_GPIO_Init+0x28c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0xae>
 800102a:	4a85      	ldr	r2, [pc, #532]	; (8001240 <HAL_GPIO_Init+0x290>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d016      	beq.n	800105e <HAL_GPIO_Init+0xae>
 8001030:	4a84      	ldr	r2, [pc, #528]	; (8001244 <HAL_GPIO_Init+0x294>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0xae>
          break;
 8001036:	e02c      	b.n	8001092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e028      	b.n	8001092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	3304      	adds	r3, #4
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e023      	b.n	8001092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	3308      	adds	r3, #8
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e01e      	b.n	8001092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	330c      	adds	r3, #12
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e019      	b.n	8001092 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001066:	2304      	movs	r3, #4
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e012      	b.n	8001092 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001074:	2308      	movs	r3, #8
 8001076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	611a      	str	r2, [r3, #16]
          break;
 800107e:	e008      	b.n	8001092 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	615a      	str	r2, [r3, #20]
          break;
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d801      	bhi.n	800109c <HAL_GPIO_Init+0xec>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	e001      	b.n	80010a0 <HAL_GPIO_Init+0xf0>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d802      	bhi.n	80010ae <HAL_GPIO_Init+0xfe>
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x104>
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3b08      	subs	r3, #8
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	210f      	movs	r1, #15
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	6a39      	ldr	r1, [r7, #32]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8096 	beq.w	800120e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e2:	4b59      	ldr	r3, [pc, #356]	; (8001248 <HAL_GPIO_Init+0x298>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a58      	ldr	r2, [pc, #352]	; (8001248 <HAL_GPIO_Init+0x298>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <HAL_GPIO_Init+0x298>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010fa:	4a54      	ldr	r2, [pc, #336]	; (800124c <HAL_GPIO_Init+0x29c>)
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x19e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4a      	ldr	r2, [pc, #296]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x19a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a49      	ldr	r2, [pc, #292]	; (8001258 <HAL_GPIO_Init+0x2a8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x196>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a48      	ldr	r2, [pc, #288]	; (800125c <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x192>
 800113e:	2303      	movs	r3, #3
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x1a0>
 8001142:	2304      	movs	r3, #4
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x1a0>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x1a0>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x1a0>
 800114e:	2300      	movs	r3, #0
 8001150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001160:	493a      	ldr	r1, [pc, #232]	; (800124c <HAL_GPIO_Init+0x29c>)
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4938      	ldr	r1, [pc, #224]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001188:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	4933      	ldr	r1, [pc, #204]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 8001192:	4013      	ands	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	492e      	ldr	r1, [pc, #184]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4929      	ldr	r1, [pc, #164]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	4924      	ldr	r1, [pc, #144]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	43db      	mvns	r3, r3
 80011e0:	491f      	ldr	r1, [pc, #124]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	491a      	ldr	r1, [pc, #104]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60cb      	str	r3, [r1, #12]
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	43db      	mvns	r3, r3
 8001208:	4915      	ldr	r1, [pc, #84]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 800120a:	4013      	ands	r3, r2
 800120c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	3301      	adds	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	fa22 f303 	lsr.w	r3, r2, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	f47f aed0 	bne.w	8000fc4 <HAL_GPIO_Init+0x14>
  }
}
 8001224:	bf00      	nop
 8001226:	372c      	adds	r7, #44	; 0x2c
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	10210000 	.word	0x10210000
 8001234:	10110000 	.word	0x10110000
 8001238:	10120000 	.word	0x10120000
 800123c:	10310000 	.word	0x10310000
 8001240:	10320000 	.word	0x10320000
 8001244:	10220000 	.word	0x10220000
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	40010800 	.word	0x40010800
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40011000 	.word	0x40011000
 800125c:	40011400 	.word	0x40011400
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]
 800129e:	4613      	mov	r3, r2
 80012a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a2:	787b      	ldrb	r3, [r7, #1]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ae:	e003      	b.n	80012b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	611a      	str	r2, [r3, #16]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e11f      	b.n	8001516 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fb3c 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001328:	f000 fcda 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 800132c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a7b      	ldr	r2, [pc, #492]	; (8001520 <HAL_I2C_Init+0x25c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d807      	bhi.n	8001348 <HAL_I2C_Init+0x84>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a7a      	ldr	r2, [pc, #488]	; (8001524 <HAL_I2C_Init+0x260>)
 800133c:	4293      	cmp	r3, r2
 800133e:	bf94      	ite	ls
 8001340:	2301      	movls	r3, #1
 8001342:	2300      	movhi	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	e006      	b.n	8001356 <HAL_I2C_Init+0x92>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a77      	ldr	r2, [pc, #476]	; (8001528 <HAL_I2C_Init+0x264>)
 800134c:	4293      	cmp	r3, r2
 800134e:	bf94      	ite	ls
 8001350:	2301      	movls	r3, #1
 8001352:	2300      	movhi	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0db      	b.n	8001516 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4a72      	ldr	r2, [pc, #456]	; (800152c <HAL_I2C_Init+0x268>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9b      	lsrs	r3, r3, #18
 8001368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a64      	ldr	r2, [pc, #400]	; (8001520 <HAL_I2C_Init+0x25c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d802      	bhi.n	8001398 <HAL_I2C_Init+0xd4>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	e009      	b.n	80013ac <HAL_I2C_Init+0xe8>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a63      	ldr	r2, [pc, #396]	; (8001530 <HAL_I2C_Init+0x26c>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4956      	ldr	r1, [pc, #344]	; (8001520 <HAL_I2C_Init+0x25c>)
 80013c8:	428b      	cmp	r3, r1
 80013ca:	d80d      	bhi.n	80013e8 <HAL_I2C_Init+0x124>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e59      	subs	r1, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	bf38      	it	cc
 80013e4:	2304      	movcc	r3, #4
 80013e6:	e04f      	b.n	8001488 <HAL_I2C_Init+0x1c4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d111      	bne.n	8001414 <HAL_I2C_Init+0x150>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e58      	subs	r0, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	440b      	add	r3, r1
 80013fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001402:	3301      	adds	r3, #1
 8001404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	e012      	b.n	800143a <HAL_I2C_Init+0x176>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1e58      	subs	r0, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	0099      	lsls	r1, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	fbb0 f3f3 	udiv	r3, r0, r3
 800142a:	3301      	adds	r3, #1
 800142c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Init+0x17e>
 800143e:	2301      	movs	r3, #1
 8001440:	e022      	b.n	8001488 <HAL_I2C_Init+0x1c4>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10e      	bne.n	8001468 <HAL_I2C_Init+0x1a4>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1e58      	subs	r0, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	440b      	add	r3, r1
 8001458:	fbb0 f3f3 	udiv	r3, r0, r3
 800145c:	3301      	adds	r3, #1
 800145e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001466:	e00f      	b.n	8001488 <HAL_I2C_Init+0x1c4>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e58      	subs	r0, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	0099      	lsls	r1, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	fbb0 f3f3 	udiv	r3, r0, r3
 800147e:	3301      	adds	r3, #1
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	6809      	ldr	r1, [r1, #0]
 800148c:	4313      	orrs	r3, r2
 800148e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6911      	ldr	r1, [r2, #16]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68d2      	ldr	r2, [r2, #12]
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	430b      	orrs	r3, r1
 80014ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	000186a0 	.word	0x000186a0
 8001524:	001e847f 	.word	0x001e847f
 8001528:	003d08ff 	.word	0x003d08ff
 800152c:	431bde83 	.word	0x431bde83
 8001530:	10624dd3 	.word	0x10624dd3

08001534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e26c      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8087 	beq.w	8001662 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001554:	4b92      	ldr	r3, [pc, #584]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b04      	cmp	r3, #4
 800155e:	d00c      	beq.n	800157a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001560:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d112      	bne.n	8001592 <HAL_RCC_OscConfig+0x5e>
 800156c:	4b8c      	ldr	r3, [pc, #560]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d10b      	bne.n	8001592 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157a:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d06c      	beq.n	8001660 <HAL_RCC_OscConfig+0x12c>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d168      	bne.n	8001660 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e246      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x76>
 800159c:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a7f      	ldr	r2, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e02e      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x98>
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a7a      	ldr	r2, [pc, #488]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a77      	ldr	r2, [pc, #476]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e01d      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0xbc>
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a71      	ldr	r2, [pc, #452]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015f0:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a6a      	ldr	r2, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d013      	beq.n	8001638 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fbe0 	bl	8000dd4 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fbdc 	bl	8000dd4 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1fa      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0xe4>
 8001636:	e014      	b.n	8001662 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fbcc 	bl	8000dd4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fbc8 	bl	8000dd4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1e6      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x10c>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d063      	beq.n	8001736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166e:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b08      	cmp	r3, #8
 8001684:	d11c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x18c>
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d116      	bne.n	80016c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x176>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e1ba      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4939      	ldr	r1, [pc, #228]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	e03a      	b.n	8001736 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x270>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb81 	bl	8000dd4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb7d 	bl	8000dd4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e19b      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4927      	ldr	r1, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <HAL_RCC_OscConfig+0x270>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fb60 	bl	8000dd4 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fb5c 	bl	8000dd4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e17a      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d03a      	beq.n	80017b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d019      	beq.n	800177e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_RCC_OscConfig+0x274>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fb40 	bl	8000dd4 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fb3c 	bl	8000dd4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e15a      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f000 fada 	bl	8001d30 <RCC_Delay>
 800177c:	e01c      	b.n	80017b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_RCC_OscConfig+0x274>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb26 	bl	8000dd4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178a:	e00f      	b.n	80017ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fb22 	bl	8000dd4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d908      	bls.n	80017ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e140      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	42420000 	.word	0x42420000
 80017a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	4b9e      	ldr	r3, [pc, #632]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e9      	bne.n	800178c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a6 	beq.w	8001912 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ca:	4b97      	ldr	r3, [pc, #604]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a93      	ldr	r2, [pc, #588]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b91      	ldr	r3, [pc, #580]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b8e      	ldr	r3, [pc, #568]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fe:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a8a      	ldr	r2, [pc, #552]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fae3 	bl	8000dd4 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fadf 	bl	8000dd4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0fd      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4b81      	ldr	r3, [pc, #516]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x312>
 8001838:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a7a      	ldr	r2, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e02d      	b.n	80018a2 <HAL_RCC_OscConfig+0x36e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x334>
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a75      	ldr	r2, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a72      	ldr	r2, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	e01c      	b.n	80018a2 <HAL_RCC_OscConfig+0x36e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x356>
 8001870:	4b6d      	ldr	r3, [pc, #436]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a6c      	ldr	r2, [pc, #432]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	4b6a      	ldr	r3, [pc, #424]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a69      	ldr	r2, [pc, #420]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x36e>
 800188a:	4b67      	ldr	r3, [pc, #412]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a66      	ldr	r2, [pc, #408]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6213      	str	r3, [r2, #32]
 8001896:	4b64      	ldr	r3, [pc, #400]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a63      	ldr	r2, [pc, #396]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d015      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa93 	bl	8000dd4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fa8f 	bl	8000dd4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0ab      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ee      	beq.n	80018b2 <HAL_RCC_OscConfig+0x37e>
 80018d4:	e014      	b.n	8001900 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fa7d 	bl	8000dd4 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fa79 	bl	8000dd4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e095      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d105      	bne.n	8001912 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001906:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a47      	ldr	r2, [pc, #284]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001910:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8081 	beq.w	8001a1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191c:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d061      	beq.n	80019ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d146      	bne.n	80019be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_RCC_OscConfig+0x4fc>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fa4d 	bl	8000dd4 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff fa49 	bl	8000dd4 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e067      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d108      	bne.n	8001978 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	492d      	ldr	r1, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a19      	ldr	r1, [r3, #32]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	430b      	orrs	r3, r1
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x4fc>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fa1d 	bl	8000dd4 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fa19 	bl	8000dd4 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e037      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x46a>
 80019bc:	e02f      	b.n	8001a1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_RCC_OscConfig+0x4fc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa06 	bl	8000dd4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fa02 	bl	8000dd4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e020      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x498>
 80019ea:	e018      	b.n	8001a1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	42420060 	.word	0x42420060

08001a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0d0      	b.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d910      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0207 	bic.w	r2, r3, #7
 8001a5e:	4965      	ldr	r1, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ab2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d040      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d115      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e073      	b.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06b      	b.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f023 0203 	bic.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4936      	ldr	r1, [pc, #216]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b24:	f7ff f956 	bl	8000dd4 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff f952 	bl	8000dd4 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e053      	b.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 020c 	and.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1eb      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d210      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0207 	bic.w	r2, r3, #7
 8001b6a:	4922      	ldr	r1, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f821 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c8>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1cc>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1d0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f8b4 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	080034d8 	.word	0x080034d8
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b490      	push	{r4, r7}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c10:	1d3c      	adds	r4, r7, #4
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x46>
 8001c46:	e02d      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c4a:	623b      	str	r3, [r7, #32]
      break;
 8001c4c:	e02d      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0c5b      	lsrs	r3, r3, #17
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c86:	fb02 f203 	mul.w	r2, r2, r3
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
 8001c92:	e004      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	623b      	str	r3, [r7, #32]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca6:	623b      	str	r3, [r7, #32]
      break;
 8001ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001caa:	6a3b      	ldr	r3, [r7, #32]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc90      	pop	{r4, r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	080034c4 	.word	0x080034c4
 8001cbc:	080034d4 	.word	0x080034d4
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	003d0900 	.word	0x003d0900

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000000 	.word	0x20000000

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce4:	f7ff fff2 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001ce8:	4601      	mov	r1, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080034e8 	.word	0x080034e8

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d10:	4601      	mov	r1, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0adb      	lsrs	r3, r3, #11
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4a03      	ldr	r2, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	080034e8 	.word	0x080034e8

08001d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <RCC_Delay+0x34>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <RCC_Delay+0x38>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a5b      	lsrs	r3, r3, #9
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d4c:	bf00      	nop
  }
  while (Delay --);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	60fa      	str	r2, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f9      	bne.n	8001d4c <RCC_Delay+0x1c>
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000000 	.word	0x20000000
 8001d68:	10624dd3 	.word	0x10624dd3

08001d6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e041      	b.n	8001e02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fe38 	bl	8000a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f000 fabe 	bl	800232c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_TIM_PWM_Start+0x24>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e022      	b.n	8001e76 <HAL_TIM_PWM_Start+0x6a>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d109      	bne.n	8001e4a <HAL_TIM_PWM_Start+0x3e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	e015      	b.n	8001e76 <HAL_TIM_PWM_Start+0x6a>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d109      	bne.n	8001e64 <HAL_TIM_PWM_Start+0x58>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e008      	b.n	8001e76 <HAL_TIM_PWM_Start+0x6a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e05e      	b.n	8001f3c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <HAL_TIM_PWM_Start+0x82>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e8c:	e013      	b.n	8001eb6 <HAL_TIM_PWM_Start+0xaa>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_PWM_Start+0x92>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e9c:	e00b      	b.n	8001eb6 <HAL_TIM_PWM_Start+0xaa>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d104      	bne.n	8001eae <HAL_TIM_PWM_Start+0xa2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eac:	e003      	b.n	8001eb6 <HAL_TIM_PWM_Start+0xaa>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fc1e 	bl	8002700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_TIM_PWM_Start+0x138>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d107      	bne.n	8001ede <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_TIM_PWM_Start+0x138>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00e      	beq.n	8001f06 <HAL_TIM_PWM_Start+0xfa>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d009      	beq.n	8001f06 <HAL_TIM_PWM_Start+0xfa>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_TIM_PWM_Start+0x13c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_TIM_PWM_Start+0xfa>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIM_PWM_Start+0x140>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d010      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f28:	e007      	b.n	8001f3a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800

08001f50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e093      	b.n	800208c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fd63 	bl	8000a44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f94:	f023 0307 	bic.w	r3, r3, #7
 8001f98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f000 f9c1 	bl	800232c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ff0:	f023 030c 	bic.w	r3, r3, #12
 8001ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4313      	orrs	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	011a      	lsls	r2, r3, #4
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	031b      	lsls	r3, r3, #12
 8002020:	4313      	orrs	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800202e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4313      	orrs	r3, r2
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d110      	bne.n	80020e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80020ca:	7b7b      	ldrb	r3, [r7, #13]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e068      	b.n	80021a6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e4:	e031      	b.n	800214a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d110      	bne.n	800210e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80020f2:	7b3b      	ldrb	r3, [r7, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d001      	beq.n	80020fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e054      	b.n	80021a6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210c:	e01d      	b.n	800214a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800211a:	7b7b      	ldrb	r3, [r7, #13]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d102      	bne.n	8002126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002120:	7b3b      	ldrb	r3, [r7, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e03d      	b.n	80021a6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_TIM_Encoder_Start+0xc2>
 8002150:	2b04      	cmp	r3, #4
 8002152:	d008      	beq.n	8002166 <HAL_TIM_Encoder_Start+0xd2>
 8002154:	e00f      	b.n	8002176 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f000 face 	bl	8002700 <TIM_CCxChannelCmd>
      break;
 8002164:	e016      	b.n	8002194 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	2104      	movs	r1, #4
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fac6 	bl	8002700 <TIM_CCxChannelCmd>
      break;
 8002174:	e00e      	b.n	8002194 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fabe 	bl	8002700 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	2104      	movs	r1, #4
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fab7 	bl	8002700 <TIM_CCxChannelCmd>
      break;
 8002192:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0ac      	b.n	8002324 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	f200 809f 	bhi.w	8002318 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	08002215 	.word	0x08002215
 80021e4:	08002319 	.word	0x08002319
 80021e8:	08002319 	.word	0x08002319
 80021ec:	08002319 	.word	0x08002319
 80021f0:	08002255 	.word	0x08002255
 80021f4:	08002319 	.word	0x08002319
 80021f8:	08002319 	.word	0x08002319
 80021fc:	08002319 	.word	0x08002319
 8002200:	08002297 	.word	0x08002297
 8002204:	08002319 	.word	0x08002319
 8002208:	08002319 	.word	0x08002319
 800220c:	08002319 	.word	0x08002319
 8002210:	080022d7 	.word	0x080022d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f8e8 	bl	80023f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0208 	orr.w	r2, r2, #8
 800222e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0204 	bic.w	r2, r2, #4
 800223e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6999      	ldr	r1, [r3, #24]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	619a      	str	r2, [r3, #24]
      break;
 8002252:	e062      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f92e 	bl	80024bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6999      	ldr	r1, [r3, #24]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	021a      	lsls	r2, r3, #8
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	619a      	str	r2, [r3, #24]
      break;
 8002294:	e041      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f977 	bl	8002590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0208 	orr.w	r2, r2, #8
 80022b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0204 	bic.w	r2, r2, #4
 80022c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69d9      	ldr	r1, [r3, #28]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	61da      	str	r2, [r3, #28]
      break;
 80022d4:	e021      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f9c1 	bl	8002664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69d9      	ldr	r1, [r3, #28]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	021a      	lsls	r2, r3, #8
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	61da      	str	r2, [r3, #28]
      break;
 8002316:	e000      	b.n	800231a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <TIM_Base_SetConfig+0xb8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00b      	beq.n	800235c <TIM_Base_SetConfig+0x30>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0x30>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <TIM_Base_SetConfig+0xbc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0x30>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a25      	ldr	r2, [pc, #148]	; (80023ec <TIM_Base_SetConfig+0xc0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <TIM_Base_SetConfig+0xb8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00b      	beq.n	800238e <TIM_Base_SetConfig+0x62>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d007      	beq.n	800238e <TIM_Base_SetConfig+0x62>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <TIM_Base_SetConfig+0xbc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_Base_SetConfig+0x62>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a18      	ldr	r2, [pc, #96]	; (80023ec <TIM_Base_SetConfig+0xc0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d108      	bne.n	80023a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <TIM_Base_SetConfig+0xb8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d103      	bne.n	80023d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	615a      	str	r2, [r3, #20]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800

080023f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f023 0201 	bic.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f023 0302 	bic.w	r3, r3, #2
 8002438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <TIM_OC1_SetConfig+0xc8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10c      	bne.n	8002466 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0308 	bic.w	r3, r3, #8
 8002452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <TIM_OC1_SetConfig+0xc8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d111      	bne.n	8002492 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800247c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	621a      	str	r2, [r3, #32]
}
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40012c00 	.word	0x40012c00

080024bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f023 0210 	bic.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f023 0320 	bic.w	r3, r3, #32
 8002506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <TIM_OC2_SetConfig+0xd0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d10d      	bne.n	8002538 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a14      	ldr	r2, [pc, #80]	; (800258c <TIM_OC2_SetConfig+0xd0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d113      	bne.n	8002568 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800254e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40012c00 	.word	0x40012c00

08002590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <TIM_OC3_SetConfig+0xd0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10d      	bne.n	800260a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <TIM_OC3_SetConfig+0xd0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d113      	bne.n	800263a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	621a      	str	r2, [r3, #32]
}
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00

08002664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	031b      	lsls	r3, r3, #12
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <TIM_OC4_SetConfig+0x98>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d109      	bne.n	80026d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	621a      	str	r2, [r3, #32]
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	40012c00 	.word	0x40012c00

08002700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2201      	movs	r2, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a1a      	ldr	r2, [r3, #32]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	43db      	mvns	r3, r3
 8002722:	401a      	ands	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e046      	b.n	80027ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d009      	beq.n	80027c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10c      	bne.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800

08002804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800281c:	2302      	movs	r3, #2
 800281e:	e03d      	b.n	800289c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e03f      	b.n	8002938 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fe f955 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2224      	movs	r2, #36	; 0x24
 80028d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f904 	bl	8002af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800290e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800291e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	d17c      	bne.n	8002a5a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_UART_Transmit+0x2c>
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e075      	b.n	8002a5c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_UART_Transmit+0x3e>
 800297a:	2302      	movs	r3, #2
 800297c:	e06e      	b.n	8002a5c <HAL_UART_Transmit+0x11c>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2221      	movs	r2, #33	; 0x21
 8002990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002994:	f7fe fa1e 	bl	8000dd4 <HAL_GetTick>
 8002998:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	88fa      	ldrh	r2, [r7, #6]
 800299e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ae:	d108      	bne.n	80029c2 <HAL_UART_Transmit+0x82>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e003      	b.n	80029ca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80029d2:	e02a      	b.n	8002a2a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2200      	movs	r2, #0
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f840 	bl	8002a64 <UART_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e036      	b.n	8002a5c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a02:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	3302      	adds	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e007      	b.n	8002a1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1cf      	bne.n	80029d4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f810 	bl	8002a64 <UART_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e006      	b.n	8002a5c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a74:	e02c      	b.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d028      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a84:	f7fe f9a6 	bl	8000dd4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d21d      	bcs.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aa2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e00f      	b.n	8002af0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d0c3      	beq.n	8002a76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b32:	f023 030c 	bic.w	r3, r3, #12
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <UART_SetConfig+0x114>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d103      	bne.n	8002b68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff f8d2 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	e002      	b.n	8002b6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b68:	f7ff f8ba 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <UART_SetConfig+0x118>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	0119      	lsls	r1, r3, #4
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <UART_SetConfig+0x118>)
 8002ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2064      	movs	r0, #100	; 0x64
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	3332      	adds	r3, #50	; 0x32
 8002bb8:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <UART_SetConfig+0x118>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc4:	4419      	add	r1, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009a      	lsls	r2, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <UART_SetConfig+0x118>)
 8002bde:	fba3 0302 	umull	r0, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2064      	movs	r0, #100	; 0x64
 8002be6:	fb00 f303 	mul.w	r3, r0, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3332      	adds	r3, #50	; 0x32
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <UART_SetConfig+0x118>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	440a      	add	r2, r1
 8002c02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	51eb851f 	.word	0x51eb851f

08002c14 <__errno>:
 8002c14:	4b01      	ldr	r3, [pc, #4]	; (8002c1c <__errno+0x8>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000000c 	.word	0x2000000c

08002c20 <__libc_init_array>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	2500      	movs	r5, #0
 8002c24:	4e0c      	ldr	r6, [pc, #48]	; (8002c58 <__libc_init_array+0x38>)
 8002c26:	4c0d      	ldr	r4, [pc, #52]	; (8002c5c <__libc_init_array+0x3c>)
 8002c28:	1ba4      	subs	r4, r4, r6
 8002c2a:	10a4      	asrs	r4, r4, #2
 8002c2c:	42a5      	cmp	r5, r4
 8002c2e:	d109      	bne.n	8002c44 <__libc_init_array+0x24>
 8002c30:	f000 fc34 	bl	800349c <_init>
 8002c34:	2500      	movs	r5, #0
 8002c36:	4e0a      	ldr	r6, [pc, #40]	; (8002c60 <__libc_init_array+0x40>)
 8002c38:	4c0a      	ldr	r4, [pc, #40]	; (8002c64 <__libc_init_array+0x44>)
 8002c3a:	1ba4      	subs	r4, r4, r6
 8002c3c:	10a4      	asrs	r4, r4, #2
 8002c3e:	42a5      	cmp	r5, r4
 8002c40:	d105      	bne.n	8002c4e <__libc_init_array+0x2e>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c48:	4798      	blx	r3
 8002c4a:	3501      	adds	r5, #1
 8002c4c:	e7ee      	b.n	8002c2c <__libc_init_array+0xc>
 8002c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c52:	4798      	blx	r3
 8002c54:	3501      	adds	r5, #1
 8002c56:	e7f2      	b.n	8002c3e <__libc_init_array+0x1e>
 8002c58:	08003584 	.word	0x08003584
 8002c5c:	08003584 	.word	0x08003584
 8002c60:	08003584 	.word	0x08003584
 8002c64:	08003588 	.word	0x08003588

08002c68 <memset>:
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4402      	add	r2, r0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <memset+0xa>
 8002c70:	4770      	bx	lr
 8002c72:	f803 1b01 	strb.w	r1, [r3], #1
 8002c76:	e7f9      	b.n	8002c6c <memset+0x4>

08002c78 <siprintf>:
 8002c78:	b40e      	push	{r1, r2, r3}
 8002c7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c7e:	b500      	push	{lr}
 8002c80:	b09c      	sub	sp, #112	; 0x70
 8002c82:	ab1d      	add	r3, sp, #116	; 0x74
 8002c84:	9002      	str	r0, [sp, #8]
 8002c86:	9006      	str	r0, [sp, #24]
 8002c88:	9107      	str	r1, [sp, #28]
 8002c8a:	9104      	str	r1, [sp, #16]
 8002c8c:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <siprintf+0x38>)
 8002c8e:	4909      	ldr	r1, [pc, #36]	; (8002cb4 <siprintf+0x3c>)
 8002c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c94:	9105      	str	r1, [sp, #20]
 8002c96:	6800      	ldr	r0, [r0, #0]
 8002c98:	a902      	add	r1, sp, #8
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	f000 f90c 	bl	8002eb8 <_svfiprintf_r>
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	9b02      	ldr	r3, [sp, #8]
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	b01c      	add	sp, #112	; 0x70
 8002ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cac:	b003      	add	sp, #12
 8002cae:	4770      	bx	lr
 8002cb0:	2000000c 	.word	0x2000000c
 8002cb4:	ffff0208 	.word	0xffff0208

08002cb8 <_free_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4605      	mov	r5, r0
 8002cbc:	2900      	cmp	r1, #0
 8002cbe:	d043      	beq.n	8002d48 <_free_r+0x90>
 8002cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc4:	1f0c      	subs	r4, r1, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bfb8      	it	lt
 8002cca:	18e4      	addlt	r4, r4, r3
 8002ccc:	f000 fbb6 	bl	800343c <__malloc_lock>
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <_free_r+0x94>)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	b933      	cbnz	r3, 8002ce6 <_free_r+0x2e>
 8002cd8:	6063      	str	r3, [r4, #4]
 8002cda:	6014      	str	r4, [r2, #0]
 8002cdc:	4628      	mov	r0, r5
 8002cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ce2:	f000 bbac 	b.w	800343e <__malloc_unlock>
 8002ce6:	42a3      	cmp	r3, r4
 8002ce8:	d90b      	bls.n	8002d02 <_free_r+0x4a>
 8002cea:	6821      	ldr	r1, [r4, #0]
 8002cec:	1862      	adds	r2, r4, r1
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	bf01      	itttt	eq
 8002cf2:	681a      	ldreq	r2, [r3, #0]
 8002cf4:	685b      	ldreq	r3, [r3, #4]
 8002cf6:	1852      	addeq	r2, r2, r1
 8002cf8:	6022      	streq	r2, [r4, #0]
 8002cfa:	6063      	str	r3, [r4, #4]
 8002cfc:	6004      	str	r4, [r0, #0]
 8002cfe:	e7ed      	b.n	8002cdc <_free_r+0x24>
 8002d00:	4613      	mov	r3, r2
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	b10a      	cbz	r2, 8002d0a <_free_r+0x52>
 8002d06:	42a2      	cmp	r2, r4
 8002d08:	d9fa      	bls.n	8002d00 <_free_r+0x48>
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	1858      	adds	r0, r3, r1
 8002d0e:	42a0      	cmp	r0, r4
 8002d10:	d10b      	bne.n	8002d2a <_free_r+0x72>
 8002d12:	6820      	ldr	r0, [r4, #0]
 8002d14:	4401      	add	r1, r0
 8002d16:	1858      	adds	r0, r3, r1
 8002d18:	4282      	cmp	r2, r0
 8002d1a:	6019      	str	r1, [r3, #0]
 8002d1c:	d1de      	bne.n	8002cdc <_free_r+0x24>
 8002d1e:	6810      	ldr	r0, [r2, #0]
 8002d20:	6852      	ldr	r2, [r2, #4]
 8002d22:	4401      	add	r1, r0
 8002d24:	6019      	str	r1, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	e7d8      	b.n	8002cdc <_free_r+0x24>
 8002d2a:	d902      	bls.n	8002d32 <_free_r+0x7a>
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	602b      	str	r3, [r5, #0]
 8002d30:	e7d4      	b.n	8002cdc <_free_r+0x24>
 8002d32:	6820      	ldr	r0, [r4, #0]
 8002d34:	1821      	adds	r1, r4, r0
 8002d36:	428a      	cmp	r2, r1
 8002d38:	bf01      	itttt	eq
 8002d3a:	6811      	ldreq	r1, [r2, #0]
 8002d3c:	6852      	ldreq	r2, [r2, #4]
 8002d3e:	1809      	addeq	r1, r1, r0
 8002d40:	6021      	streq	r1, [r4, #0]
 8002d42:	6062      	str	r2, [r4, #4]
 8002d44:	605c      	str	r4, [r3, #4]
 8002d46:	e7c9      	b.n	8002cdc <_free_r+0x24>
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200001fc 	.word	0x200001fc

08002d50 <_malloc_r>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	1ccd      	adds	r5, r1, #3
 8002d54:	f025 0503 	bic.w	r5, r5, #3
 8002d58:	3508      	adds	r5, #8
 8002d5a:	2d0c      	cmp	r5, #12
 8002d5c:	bf38      	it	cc
 8002d5e:	250c      	movcc	r5, #12
 8002d60:	2d00      	cmp	r5, #0
 8002d62:	4606      	mov	r6, r0
 8002d64:	db01      	blt.n	8002d6a <_malloc_r+0x1a>
 8002d66:	42a9      	cmp	r1, r5
 8002d68:	d903      	bls.n	8002d72 <_malloc_r+0x22>
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	6033      	str	r3, [r6, #0]
 8002d6e:	2000      	movs	r0, #0
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
 8002d72:	f000 fb63 	bl	800343c <__malloc_lock>
 8002d76:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <_malloc_r+0xac>)
 8002d78:	6814      	ldr	r4, [r2, #0]
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	b991      	cbnz	r1, 8002da4 <_malloc_r+0x54>
 8002d7e:	4c20      	ldr	r4, [pc, #128]	; (8002e00 <_malloc_r+0xb0>)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	b91b      	cbnz	r3, 8002d8c <_malloc_r+0x3c>
 8002d84:	4630      	mov	r0, r6
 8002d86:	f000 fb17 	bl	80033b8 <_sbrk_r>
 8002d8a:	6020      	str	r0, [r4, #0]
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f000 fb12 	bl	80033b8 <_sbrk_r>
 8002d94:	1c43      	adds	r3, r0, #1
 8002d96:	d124      	bne.n	8002de2 <_malloc_r+0x92>
 8002d98:	230c      	movs	r3, #12
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	6033      	str	r3, [r6, #0]
 8002d9e:	f000 fb4e 	bl	800343e <__malloc_unlock>
 8002da2:	e7e4      	b.n	8002d6e <_malloc_r+0x1e>
 8002da4:	680b      	ldr	r3, [r1, #0]
 8002da6:	1b5b      	subs	r3, r3, r5
 8002da8:	d418      	bmi.n	8002ddc <_malloc_r+0x8c>
 8002daa:	2b0b      	cmp	r3, #11
 8002dac:	d90f      	bls.n	8002dce <_malloc_r+0x7e>
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	18cc      	adds	r4, r1, r3
 8002db2:	50cd      	str	r5, [r1, r3]
 8002db4:	4630      	mov	r0, r6
 8002db6:	f000 fb42 	bl	800343e <__malloc_unlock>
 8002dba:	f104 000b 	add.w	r0, r4, #11
 8002dbe:	1d23      	adds	r3, r4, #4
 8002dc0:	f020 0007 	bic.w	r0, r0, #7
 8002dc4:	1ac3      	subs	r3, r0, r3
 8002dc6:	d0d3      	beq.n	8002d70 <_malloc_r+0x20>
 8002dc8:	425a      	negs	r2, r3
 8002dca:	50e2      	str	r2, [r4, r3]
 8002dcc:	e7d0      	b.n	8002d70 <_malloc_r+0x20>
 8002dce:	684b      	ldr	r3, [r1, #4]
 8002dd0:	428c      	cmp	r4, r1
 8002dd2:	bf16      	itet	ne
 8002dd4:	6063      	strne	r3, [r4, #4]
 8002dd6:	6013      	streq	r3, [r2, #0]
 8002dd8:	460c      	movne	r4, r1
 8002dda:	e7eb      	b.n	8002db4 <_malloc_r+0x64>
 8002ddc:	460c      	mov	r4, r1
 8002dde:	6849      	ldr	r1, [r1, #4]
 8002de0:	e7cc      	b.n	8002d7c <_malloc_r+0x2c>
 8002de2:	1cc4      	adds	r4, r0, #3
 8002de4:	f024 0403 	bic.w	r4, r4, #3
 8002de8:	42a0      	cmp	r0, r4
 8002dea:	d005      	beq.n	8002df8 <_malloc_r+0xa8>
 8002dec:	1a21      	subs	r1, r4, r0
 8002dee:	4630      	mov	r0, r6
 8002df0:	f000 fae2 	bl	80033b8 <_sbrk_r>
 8002df4:	3001      	adds	r0, #1
 8002df6:	d0cf      	beq.n	8002d98 <_malloc_r+0x48>
 8002df8:	6025      	str	r5, [r4, #0]
 8002dfa:	e7db      	b.n	8002db4 <_malloc_r+0x64>
 8002dfc:	200001fc 	.word	0x200001fc
 8002e00:	20000200 	.word	0x20000200

08002e04 <__ssputs_r>:
 8002e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e08:	688e      	ldr	r6, [r1, #8]
 8002e0a:	4682      	mov	sl, r0
 8002e0c:	429e      	cmp	r6, r3
 8002e0e:	460c      	mov	r4, r1
 8002e10:	4690      	mov	r8, r2
 8002e12:	4699      	mov	r9, r3
 8002e14:	d837      	bhi.n	8002e86 <__ssputs_r+0x82>
 8002e16:	898a      	ldrh	r2, [r1, #12]
 8002e18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e1c:	d031      	beq.n	8002e82 <__ssputs_r+0x7e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	6825      	ldr	r5, [r4, #0]
 8002e22:	6909      	ldr	r1, [r1, #16]
 8002e24:	1a6f      	subs	r7, r5, r1
 8002e26:	6965      	ldr	r5, [r4, #20]
 8002e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e30:	f109 0301 	add.w	r3, r9, #1
 8002e34:	443b      	add	r3, r7
 8002e36:	429d      	cmp	r5, r3
 8002e38:	bf38      	it	cc
 8002e3a:	461d      	movcc	r5, r3
 8002e3c:	0553      	lsls	r3, r2, #21
 8002e3e:	d530      	bpl.n	8002ea2 <__ssputs_r+0x9e>
 8002e40:	4629      	mov	r1, r5
 8002e42:	f7ff ff85 	bl	8002d50 <_malloc_r>
 8002e46:	4606      	mov	r6, r0
 8002e48:	b950      	cbnz	r0, 8002e60 <__ssputs_r+0x5c>
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f8ca 3000 	str.w	r3, [sl]
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	463a      	mov	r2, r7
 8002e62:	6921      	ldr	r1, [r4, #16]
 8002e64:	f000 fac6 	bl	80033f4 <memcpy>
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e72:	81a3      	strh	r3, [r4, #12]
 8002e74:	6126      	str	r6, [r4, #16]
 8002e76:	443e      	add	r6, r7
 8002e78:	6026      	str	r6, [r4, #0]
 8002e7a:	464e      	mov	r6, r9
 8002e7c:	6165      	str	r5, [r4, #20]
 8002e7e:	1bed      	subs	r5, r5, r7
 8002e80:	60a5      	str	r5, [r4, #8]
 8002e82:	454e      	cmp	r6, r9
 8002e84:	d900      	bls.n	8002e88 <__ssputs_r+0x84>
 8002e86:	464e      	mov	r6, r9
 8002e88:	4632      	mov	r2, r6
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	f000 fabc 	bl	800340a <memmove>
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	2000      	movs	r0, #0
 8002e96:	1b9b      	subs	r3, r3, r6
 8002e98:	60a3      	str	r3, [r4, #8]
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	441e      	add	r6, r3
 8002e9e:	6026      	str	r6, [r4, #0]
 8002ea0:	e7dc      	b.n	8002e5c <__ssputs_r+0x58>
 8002ea2:	462a      	mov	r2, r5
 8002ea4:	f000 facc 	bl	8003440 <_realloc_r>
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d1e2      	bne.n	8002e74 <__ssputs_r+0x70>
 8002eae:	6921      	ldr	r1, [r4, #16]
 8002eb0:	4650      	mov	r0, sl
 8002eb2:	f7ff ff01 	bl	8002cb8 <_free_r>
 8002eb6:	e7c8      	b.n	8002e4a <__ssputs_r+0x46>

08002eb8 <_svfiprintf_r>:
 8002eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ebc:	461d      	mov	r5, r3
 8002ebe:	898b      	ldrh	r3, [r1, #12]
 8002ec0:	b09d      	sub	sp, #116	; 0x74
 8002ec2:	061f      	lsls	r7, r3, #24
 8002ec4:	4680      	mov	r8, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4616      	mov	r6, r2
 8002eca:	d50f      	bpl.n	8002eec <_svfiprintf_r+0x34>
 8002ecc:	690b      	ldr	r3, [r1, #16]
 8002ece:	b96b      	cbnz	r3, 8002eec <_svfiprintf_r+0x34>
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	f7ff ff3d 	bl	8002d50 <_malloc_r>
 8002ed6:	6020      	str	r0, [r4, #0]
 8002ed8:	6120      	str	r0, [r4, #16]
 8002eda:	b928      	cbnz	r0, 8002ee8 <_svfiprintf_r+0x30>
 8002edc:	230c      	movs	r3, #12
 8002ede:	f8c8 3000 	str.w	r3, [r8]
 8002ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee6:	e0c8      	b.n	800307a <_svfiprintf_r+0x1c2>
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	6163      	str	r3, [r4, #20]
 8002eec:	2300      	movs	r3, #0
 8002eee:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ef6:	2330      	movs	r3, #48	; 0x30
 8002ef8:	f04f 0b01 	mov.w	fp, #1
 8002efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f00:	9503      	str	r5, [sp, #12]
 8002f02:	4637      	mov	r7, r6
 8002f04:	463d      	mov	r5, r7
 8002f06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f0a:	b10b      	cbz	r3, 8002f10 <_svfiprintf_r+0x58>
 8002f0c:	2b25      	cmp	r3, #37	; 0x25
 8002f0e:	d13e      	bne.n	8002f8e <_svfiprintf_r+0xd6>
 8002f10:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f14:	d00b      	beq.n	8002f2e <_svfiprintf_r+0x76>
 8002f16:	4653      	mov	r3, sl
 8002f18:	4632      	mov	r2, r6
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	f7ff ff71 	bl	8002e04 <__ssputs_r>
 8002f22:	3001      	adds	r0, #1
 8002f24:	f000 80a4 	beq.w	8003070 <_svfiprintf_r+0x1b8>
 8002f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f2a:	4453      	add	r3, sl
 8002f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f2e:	783b      	ldrb	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 809d 	beq.w	8003070 <_svfiprintf_r+0x1b8>
 8002f36:	2300      	movs	r3, #0
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f40:	9304      	str	r3, [sp, #16]
 8002f42:	9307      	str	r3, [sp, #28]
 8002f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f48:	931a      	str	r3, [sp, #104]	; 0x68
 8002f4a:	462f      	mov	r7, r5
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f52:	4850      	ldr	r0, [pc, #320]	; (8003094 <_svfiprintf_r+0x1dc>)
 8002f54:	f000 fa40 	bl	80033d8 <memchr>
 8002f58:	9b04      	ldr	r3, [sp, #16]
 8002f5a:	b9d0      	cbnz	r0, 8002f92 <_svfiprintf_r+0xda>
 8002f5c:	06d9      	lsls	r1, r3, #27
 8002f5e:	bf44      	itt	mi
 8002f60:	2220      	movmi	r2, #32
 8002f62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f66:	071a      	lsls	r2, r3, #28
 8002f68:	bf44      	itt	mi
 8002f6a:	222b      	movmi	r2, #43	; 0x2b
 8002f6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f70:	782a      	ldrb	r2, [r5, #0]
 8002f72:	2a2a      	cmp	r2, #42	; 0x2a
 8002f74:	d015      	beq.n	8002fa2 <_svfiprintf_r+0xea>
 8002f76:	462f      	mov	r7, r5
 8002f78:	2000      	movs	r0, #0
 8002f7a:	250a      	movs	r5, #10
 8002f7c:	9a07      	ldr	r2, [sp, #28]
 8002f7e:	4639      	mov	r1, r7
 8002f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f84:	3b30      	subs	r3, #48	; 0x30
 8002f86:	2b09      	cmp	r3, #9
 8002f88:	d94d      	bls.n	8003026 <_svfiprintf_r+0x16e>
 8002f8a:	b1b8      	cbz	r0, 8002fbc <_svfiprintf_r+0x104>
 8002f8c:	e00f      	b.n	8002fae <_svfiprintf_r+0xf6>
 8002f8e:	462f      	mov	r7, r5
 8002f90:	e7b8      	b.n	8002f04 <_svfiprintf_r+0x4c>
 8002f92:	4a40      	ldr	r2, [pc, #256]	; (8003094 <_svfiprintf_r+0x1dc>)
 8002f94:	463d      	mov	r5, r7
 8002f96:	1a80      	subs	r0, r0, r2
 8002f98:	fa0b f000 	lsl.w	r0, fp, r0
 8002f9c:	4318      	orrs	r0, r3
 8002f9e:	9004      	str	r0, [sp, #16]
 8002fa0:	e7d3      	b.n	8002f4a <_svfiprintf_r+0x92>
 8002fa2:	9a03      	ldr	r2, [sp, #12]
 8002fa4:	1d11      	adds	r1, r2, #4
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	9103      	str	r1, [sp, #12]
 8002faa:	2a00      	cmp	r2, #0
 8002fac:	db01      	blt.n	8002fb2 <_svfiprintf_r+0xfa>
 8002fae:	9207      	str	r2, [sp, #28]
 8002fb0:	e004      	b.n	8002fbc <_svfiprintf_r+0x104>
 8002fb2:	4252      	negs	r2, r2
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	9207      	str	r2, [sp, #28]
 8002fba:	9304      	str	r3, [sp, #16]
 8002fbc:	783b      	ldrb	r3, [r7, #0]
 8002fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8002fc0:	d10c      	bne.n	8002fdc <_svfiprintf_r+0x124>
 8002fc2:	787b      	ldrb	r3, [r7, #1]
 8002fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc6:	d133      	bne.n	8003030 <_svfiprintf_r+0x178>
 8002fc8:	9b03      	ldr	r3, [sp, #12]
 8002fca:	3702      	adds	r7, #2
 8002fcc:	1d1a      	adds	r2, r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	9203      	str	r2, [sp, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bfb8      	it	lt
 8002fd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fda:	9305      	str	r3, [sp, #20]
 8002fdc:	4d2e      	ldr	r5, [pc, #184]	; (8003098 <_svfiprintf_r+0x1e0>)
 8002fde:	2203      	movs	r2, #3
 8002fe0:	7839      	ldrb	r1, [r7, #0]
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 f9f8 	bl	80033d8 <memchr>
 8002fe8:	b138      	cbz	r0, 8002ffa <_svfiprintf_r+0x142>
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	1b40      	subs	r0, r0, r5
 8002fee:	fa03 f000 	lsl.w	r0, r3, r0
 8002ff2:	9b04      	ldr	r3, [sp, #16]
 8002ff4:	3701      	adds	r7, #1
 8002ff6:	4303      	orrs	r3, r0
 8002ff8:	9304      	str	r3, [sp, #16]
 8002ffa:	7839      	ldrb	r1, [r7, #0]
 8002ffc:	2206      	movs	r2, #6
 8002ffe:	4827      	ldr	r0, [pc, #156]	; (800309c <_svfiprintf_r+0x1e4>)
 8003000:	1c7e      	adds	r6, r7, #1
 8003002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003006:	f000 f9e7 	bl	80033d8 <memchr>
 800300a:	2800      	cmp	r0, #0
 800300c:	d038      	beq.n	8003080 <_svfiprintf_r+0x1c8>
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <_svfiprintf_r+0x1e8>)
 8003010:	bb13      	cbnz	r3, 8003058 <_svfiprintf_r+0x1a0>
 8003012:	9b03      	ldr	r3, [sp, #12]
 8003014:	3307      	adds	r3, #7
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	3308      	adds	r3, #8
 800301c:	9303      	str	r3, [sp, #12]
 800301e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003020:	444b      	add	r3, r9
 8003022:	9309      	str	r3, [sp, #36]	; 0x24
 8003024:	e76d      	b.n	8002f02 <_svfiprintf_r+0x4a>
 8003026:	fb05 3202 	mla	r2, r5, r2, r3
 800302a:	2001      	movs	r0, #1
 800302c:	460f      	mov	r7, r1
 800302e:	e7a6      	b.n	8002f7e <_svfiprintf_r+0xc6>
 8003030:	2300      	movs	r3, #0
 8003032:	250a      	movs	r5, #10
 8003034:	4619      	mov	r1, r3
 8003036:	3701      	adds	r7, #1
 8003038:	9305      	str	r3, [sp, #20]
 800303a:	4638      	mov	r0, r7
 800303c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003040:	3a30      	subs	r2, #48	; 0x30
 8003042:	2a09      	cmp	r2, #9
 8003044:	d903      	bls.n	800304e <_svfiprintf_r+0x196>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0c8      	beq.n	8002fdc <_svfiprintf_r+0x124>
 800304a:	9105      	str	r1, [sp, #20]
 800304c:	e7c6      	b.n	8002fdc <_svfiprintf_r+0x124>
 800304e:	fb05 2101 	mla	r1, r5, r1, r2
 8003052:	2301      	movs	r3, #1
 8003054:	4607      	mov	r7, r0
 8003056:	e7f0      	b.n	800303a <_svfiprintf_r+0x182>
 8003058:	ab03      	add	r3, sp, #12
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	4622      	mov	r2, r4
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <_svfiprintf_r+0x1ec>)
 8003060:	a904      	add	r1, sp, #16
 8003062:	4640      	mov	r0, r8
 8003064:	f3af 8000 	nop.w
 8003068:	f1b0 3fff 	cmp.w	r0, #4294967295
 800306c:	4681      	mov	r9, r0
 800306e:	d1d6      	bne.n	800301e <_svfiprintf_r+0x166>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	065b      	lsls	r3, r3, #25
 8003074:	f53f af35 	bmi.w	8002ee2 <_svfiprintf_r+0x2a>
 8003078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800307a:	b01d      	add	sp, #116	; 0x74
 800307c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003080:	ab03      	add	r3, sp, #12
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	4622      	mov	r2, r4
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <_svfiprintf_r+0x1ec>)
 8003088:	a904      	add	r1, sp, #16
 800308a:	4640      	mov	r0, r8
 800308c:	f000 f882 	bl	8003194 <_printf_i>
 8003090:	e7ea      	b.n	8003068 <_svfiprintf_r+0x1b0>
 8003092:	bf00      	nop
 8003094:	08003550 	.word	0x08003550
 8003098:	08003556 	.word	0x08003556
 800309c:	0800355a 	.word	0x0800355a
 80030a0:	00000000 	.word	0x00000000
 80030a4:	08002e05 	.word	0x08002e05

080030a8 <_printf_common>:
 80030a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ac:	4691      	mov	r9, r2
 80030ae:	461f      	mov	r7, r3
 80030b0:	688a      	ldr	r2, [r1, #8]
 80030b2:	690b      	ldr	r3, [r1, #16]
 80030b4:	4606      	mov	r6, r0
 80030b6:	4293      	cmp	r3, r2
 80030b8:	bfb8      	it	lt
 80030ba:	4613      	movlt	r3, r2
 80030bc:	f8c9 3000 	str.w	r3, [r9]
 80030c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030c4:	460c      	mov	r4, r1
 80030c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ca:	b112      	cbz	r2, 80030d2 <_printf_common+0x2a>
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c9 3000 	str.w	r3, [r9]
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	0699      	lsls	r1, r3, #26
 80030d6:	bf42      	ittt	mi
 80030d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030dc:	3302      	addmi	r3, #2
 80030de:	f8c9 3000 	strmi.w	r3, [r9]
 80030e2:	6825      	ldr	r5, [r4, #0]
 80030e4:	f015 0506 	ands.w	r5, r5, #6
 80030e8:	d107      	bne.n	80030fa <_printf_common+0x52>
 80030ea:	f104 0a19 	add.w	sl, r4, #25
 80030ee:	68e3      	ldr	r3, [r4, #12]
 80030f0:	f8d9 2000 	ldr.w	r2, [r9]
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	42ab      	cmp	r3, r5
 80030f8:	dc29      	bgt.n	800314e <_printf_common+0xa6>
 80030fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	3300      	adds	r3, #0
 8003102:	bf18      	it	ne
 8003104:	2301      	movne	r3, #1
 8003106:	0692      	lsls	r2, r2, #26
 8003108:	d42e      	bmi.n	8003168 <_printf_common+0xc0>
 800310a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800310e:	4639      	mov	r1, r7
 8003110:	4630      	mov	r0, r6
 8003112:	47c0      	blx	r8
 8003114:	3001      	adds	r0, #1
 8003116:	d021      	beq.n	800315c <_printf_common+0xb4>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	68e5      	ldr	r5, [r4, #12]
 800311c:	f003 0306 	and.w	r3, r3, #6
 8003120:	2b04      	cmp	r3, #4
 8003122:	bf18      	it	ne
 8003124:	2500      	movne	r5, #0
 8003126:	f8d9 2000 	ldr.w	r2, [r9]
 800312a:	f04f 0900 	mov.w	r9, #0
 800312e:	bf08      	it	eq
 8003130:	1aad      	subeq	r5, r5, r2
 8003132:	68a3      	ldr	r3, [r4, #8]
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	bf08      	it	eq
 8003138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800313c:	4293      	cmp	r3, r2
 800313e:	bfc4      	itt	gt
 8003140:	1a9b      	subgt	r3, r3, r2
 8003142:	18ed      	addgt	r5, r5, r3
 8003144:	341a      	adds	r4, #26
 8003146:	454d      	cmp	r5, r9
 8003148:	d11a      	bne.n	8003180 <_printf_common+0xd8>
 800314a:	2000      	movs	r0, #0
 800314c:	e008      	b.n	8003160 <_printf_common+0xb8>
 800314e:	2301      	movs	r3, #1
 8003150:	4652      	mov	r2, sl
 8003152:	4639      	mov	r1, r7
 8003154:	4630      	mov	r0, r6
 8003156:	47c0      	blx	r8
 8003158:	3001      	adds	r0, #1
 800315a:	d103      	bne.n	8003164 <_printf_common+0xbc>
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	3501      	adds	r5, #1
 8003166:	e7c2      	b.n	80030ee <_printf_common+0x46>
 8003168:	2030      	movs	r0, #48	; 0x30
 800316a:	18e1      	adds	r1, r4, r3
 800316c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003176:	4422      	add	r2, r4
 8003178:	3302      	adds	r3, #2
 800317a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800317e:	e7c4      	b.n	800310a <_printf_common+0x62>
 8003180:	2301      	movs	r3, #1
 8003182:	4622      	mov	r2, r4
 8003184:	4639      	mov	r1, r7
 8003186:	4630      	mov	r0, r6
 8003188:	47c0      	blx	r8
 800318a:	3001      	adds	r0, #1
 800318c:	d0e6      	beq.n	800315c <_printf_common+0xb4>
 800318e:	f109 0901 	add.w	r9, r9, #1
 8003192:	e7d8      	b.n	8003146 <_printf_common+0x9e>

08003194 <_printf_i>:
 8003194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003198:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800319c:	460c      	mov	r4, r1
 800319e:	7e09      	ldrb	r1, [r1, #24]
 80031a0:	b085      	sub	sp, #20
 80031a2:	296e      	cmp	r1, #110	; 0x6e
 80031a4:	4617      	mov	r7, r2
 80031a6:	4606      	mov	r6, r0
 80031a8:	4698      	mov	r8, r3
 80031aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031ac:	f000 80b3 	beq.w	8003316 <_printf_i+0x182>
 80031b0:	d822      	bhi.n	80031f8 <_printf_i+0x64>
 80031b2:	2963      	cmp	r1, #99	; 0x63
 80031b4:	d036      	beq.n	8003224 <_printf_i+0x90>
 80031b6:	d80a      	bhi.n	80031ce <_printf_i+0x3a>
 80031b8:	2900      	cmp	r1, #0
 80031ba:	f000 80b9 	beq.w	8003330 <_printf_i+0x19c>
 80031be:	2958      	cmp	r1, #88	; 0x58
 80031c0:	f000 8083 	beq.w	80032ca <_printf_i+0x136>
 80031c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031cc:	e032      	b.n	8003234 <_printf_i+0xa0>
 80031ce:	2964      	cmp	r1, #100	; 0x64
 80031d0:	d001      	beq.n	80031d6 <_printf_i+0x42>
 80031d2:	2969      	cmp	r1, #105	; 0x69
 80031d4:	d1f6      	bne.n	80031c4 <_printf_i+0x30>
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	0605      	lsls	r5, r0, #24
 80031dc:	f103 0104 	add.w	r1, r3, #4
 80031e0:	d52a      	bpl.n	8003238 <_printf_i+0xa4>
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6011      	str	r1, [r2, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	da03      	bge.n	80031f2 <_printf_i+0x5e>
 80031ea:	222d      	movs	r2, #45	; 0x2d
 80031ec:	425b      	negs	r3, r3
 80031ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031f2:	486f      	ldr	r0, [pc, #444]	; (80033b0 <_printf_i+0x21c>)
 80031f4:	220a      	movs	r2, #10
 80031f6:	e039      	b.n	800326c <_printf_i+0xd8>
 80031f8:	2973      	cmp	r1, #115	; 0x73
 80031fa:	f000 809d 	beq.w	8003338 <_printf_i+0x1a4>
 80031fe:	d808      	bhi.n	8003212 <_printf_i+0x7e>
 8003200:	296f      	cmp	r1, #111	; 0x6f
 8003202:	d020      	beq.n	8003246 <_printf_i+0xb2>
 8003204:	2970      	cmp	r1, #112	; 0x70
 8003206:	d1dd      	bne.n	80031c4 <_printf_i+0x30>
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	f043 0320 	orr.w	r3, r3, #32
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	e003      	b.n	800321a <_printf_i+0x86>
 8003212:	2975      	cmp	r1, #117	; 0x75
 8003214:	d017      	beq.n	8003246 <_printf_i+0xb2>
 8003216:	2978      	cmp	r1, #120	; 0x78
 8003218:	d1d4      	bne.n	80031c4 <_printf_i+0x30>
 800321a:	2378      	movs	r3, #120	; 0x78
 800321c:	4865      	ldr	r0, [pc, #404]	; (80033b4 <_printf_i+0x220>)
 800321e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003222:	e055      	b.n	80032d0 <_printf_i+0x13c>
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800322a:	1d19      	adds	r1, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6011      	str	r1, [r2, #0]
 8003230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003234:	2301      	movs	r3, #1
 8003236:	e08c      	b.n	8003352 <_printf_i+0x1be>
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800323e:	6011      	str	r1, [r2, #0]
 8003240:	bf18      	it	ne
 8003242:	b21b      	sxthne	r3, r3
 8003244:	e7cf      	b.n	80031e6 <_printf_i+0x52>
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	6825      	ldr	r5, [r4, #0]
 800324a:	1d18      	adds	r0, r3, #4
 800324c:	6010      	str	r0, [r2, #0]
 800324e:	0628      	lsls	r0, r5, #24
 8003250:	d501      	bpl.n	8003256 <_printf_i+0xc2>
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	e002      	b.n	800325c <_printf_i+0xc8>
 8003256:	0668      	lsls	r0, r5, #25
 8003258:	d5fb      	bpl.n	8003252 <_printf_i+0xbe>
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	296f      	cmp	r1, #111	; 0x6f
 800325e:	bf14      	ite	ne
 8003260:	220a      	movne	r2, #10
 8003262:	2208      	moveq	r2, #8
 8003264:	4852      	ldr	r0, [pc, #328]	; (80033b0 <_printf_i+0x21c>)
 8003266:	2100      	movs	r1, #0
 8003268:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800326c:	6865      	ldr	r5, [r4, #4]
 800326e:	2d00      	cmp	r5, #0
 8003270:	60a5      	str	r5, [r4, #8]
 8003272:	f2c0 8095 	blt.w	80033a0 <_printf_i+0x20c>
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	f021 0104 	bic.w	r1, r1, #4
 800327c:	6021      	str	r1, [r4, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d13d      	bne.n	80032fe <_printf_i+0x16a>
 8003282:	2d00      	cmp	r5, #0
 8003284:	f040 808e 	bne.w	80033a4 <_printf_i+0x210>
 8003288:	4665      	mov	r5, ip
 800328a:	2a08      	cmp	r2, #8
 800328c:	d10b      	bne.n	80032a6 <_printf_i+0x112>
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	07db      	lsls	r3, r3, #31
 8003292:	d508      	bpl.n	80032a6 <_printf_i+0x112>
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	6862      	ldr	r2, [r4, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	bfde      	ittt	le
 800329c:	2330      	movle	r3, #48	; 0x30
 800329e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032a6:	ebac 0305 	sub.w	r3, ip, r5
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	f8cd 8000 	str.w	r8, [sp]
 80032b0:	463b      	mov	r3, r7
 80032b2:	aa03      	add	r2, sp, #12
 80032b4:	4621      	mov	r1, r4
 80032b6:	4630      	mov	r0, r6
 80032b8:	f7ff fef6 	bl	80030a8 <_printf_common>
 80032bc:	3001      	adds	r0, #1
 80032be:	d14d      	bne.n	800335c <_printf_i+0x1c8>
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	b005      	add	sp, #20
 80032c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ca:	4839      	ldr	r0, [pc, #228]	; (80033b0 <_printf_i+0x21c>)
 80032cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032d0:	6813      	ldr	r3, [r2, #0]
 80032d2:	6821      	ldr	r1, [r4, #0]
 80032d4:	1d1d      	adds	r5, r3, #4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6015      	str	r5, [r2, #0]
 80032da:	060a      	lsls	r2, r1, #24
 80032dc:	d50b      	bpl.n	80032f6 <_printf_i+0x162>
 80032de:	07ca      	lsls	r2, r1, #31
 80032e0:	bf44      	itt	mi
 80032e2:	f041 0120 	orrmi.w	r1, r1, #32
 80032e6:	6021      	strmi	r1, [r4, #0]
 80032e8:	b91b      	cbnz	r3, 80032f2 <_printf_i+0x15e>
 80032ea:	6822      	ldr	r2, [r4, #0]
 80032ec:	f022 0220 	bic.w	r2, r2, #32
 80032f0:	6022      	str	r2, [r4, #0]
 80032f2:	2210      	movs	r2, #16
 80032f4:	e7b7      	b.n	8003266 <_printf_i+0xd2>
 80032f6:	064d      	lsls	r5, r1, #25
 80032f8:	bf48      	it	mi
 80032fa:	b29b      	uxthmi	r3, r3
 80032fc:	e7ef      	b.n	80032de <_printf_i+0x14a>
 80032fe:	4665      	mov	r5, ip
 8003300:	fbb3 f1f2 	udiv	r1, r3, r2
 8003304:	fb02 3311 	mls	r3, r2, r1, r3
 8003308:	5cc3      	ldrb	r3, [r0, r3]
 800330a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800330e:	460b      	mov	r3, r1
 8003310:	2900      	cmp	r1, #0
 8003312:	d1f5      	bne.n	8003300 <_printf_i+0x16c>
 8003314:	e7b9      	b.n	800328a <_printf_i+0xf6>
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	6825      	ldr	r5, [r4, #0]
 800331a:	1d18      	adds	r0, r3, #4
 800331c:	6961      	ldr	r1, [r4, #20]
 800331e:	6010      	str	r0, [r2, #0]
 8003320:	0628      	lsls	r0, r5, #24
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	d501      	bpl.n	800332a <_printf_i+0x196>
 8003326:	6019      	str	r1, [r3, #0]
 8003328:	e002      	b.n	8003330 <_printf_i+0x19c>
 800332a:	066a      	lsls	r2, r5, #25
 800332c:	d5fb      	bpl.n	8003326 <_printf_i+0x192>
 800332e:	8019      	strh	r1, [r3, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	4665      	mov	r5, ip
 8003334:	6123      	str	r3, [r4, #16]
 8003336:	e7b9      	b.n	80032ac <_printf_i+0x118>
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	1d19      	adds	r1, r3, #4
 800333c:	6011      	str	r1, [r2, #0]
 800333e:	681d      	ldr	r5, [r3, #0]
 8003340:	6862      	ldr	r2, [r4, #4]
 8003342:	2100      	movs	r1, #0
 8003344:	4628      	mov	r0, r5
 8003346:	f000 f847 	bl	80033d8 <memchr>
 800334a:	b108      	cbz	r0, 8003350 <_printf_i+0x1bc>
 800334c:	1b40      	subs	r0, r0, r5
 800334e:	6060      	str	r0, [r4, #4]
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	6123      	str	r3, [r4, #16]
 8003354:	2300      	movs	r3, #0
 8003356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800335a:	e7a7      	b.n	80032ac <_printf_i+0x118>
 800335c:	6923      	ldr	r3, [r4, #16]
 800335e:	462a      	mov	r2, r5
 8003360:	4639      	mov	r1, r7
 8003362:	4630      	mov	r0, r6
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d0aa      	beq.n	80032c0 <_printf_i+0x12c>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	079b      	lsls	r3, r3, #30
 800336e:	d413      	bmi.n	8003398 <_printf_i+0x204>
 8003370:	68e0      	ldr	r0, [r4, #12]
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	4298      	cmp	r0, r3
 8003376:	bfb8      	it	lt
 8003378:	4618      	movlt	r0, r3
 800337a:	e7a3      	b.n	80032c4 <_printf_i+0x130>
 800337c:	2301      	movs	r3, #1
 800337e:	464a      	mov	r2, r9
 8003380:	4639      	mov	r1, r7
 8003382:	4630      	mov	r0, r6
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d09a      	beq.n	80032c0 <_printf_i+0x12c>
 800338a:	3501      	adds	r5, #1
 800338c:	68e3      	ldr	r3, [r4, #12]
 800338e:	9a03      	ldr	r2, [sp, #12]
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	42ab      	cmp	r3, r5
 8003394:	dcf2      	bgt.n	800337c <_printf_i+0x1e8>
 8003396:	e7eb      	b.n	8003370 <_printf_i+0x1dc>
 8003398:	2500      	movs	r5, #0
 800339a:	f104 0919 	add.w	r9, r4, #25
 800339e:	e7f5      	b.n	800338c <_printf_i+0x1f8>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ac      	bne.n	80032fe <_printf_i+0x16a>
 80033a4:	7803      	ldrb	r3, [r0, #0]
 80033a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033ae:	e76c      	b.n	800328a <_printf_i+0xf6>
 80033b0:	08003561 	.word	0x08003561
 80033b4:	08003572 	.word	0x08003572

080033b8 <_sbrk_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	2300      	movs	r3, #0
 80033bc:	4c05      	ldr	r4, [pc, #20]	; (80033d4 <_sbrk_r+0x1c>)
 80033be:	4605      	mov	r5, r0
 80033c0:	4608      	mov	r0, r1
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	f7fd fc4c 	bl	8000c60 <_sbrk>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_sbrk_r+0x1a>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_sbrk_r+0x1a>
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	20000208 	.word	0x20000208

080033d8 <memchr>:
 80033d8:	b510      	push	{r4, lr}
 80033da:	b2c9      	uxtb	r1, r1
 80033dc:	4402      	add	r2, r0
 80033de:	4290      	cmp	r0, r2
 80033e0:	4603      	mov	r3, r0
 80033e2:	d101      	bne.n	80033e8 <memchr+0x10>
 80033e4:	2300      	movs	r3, #0
 80033e6:	e003      	b.n	80033f0 <memchr+0x18>
 80033e8:	781c      	ldrb	r4, [r3, #0]
 80033ea:	3001      	adds	r0, #1
 80033ec:	428c      	cmp	r4, r1
 80033ee:	d1f6      	bne.n	80033de <memchr+0x6>
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <memcpy>:
 80033f4:	b510      	push	{r4, lr}
 80033f6:	1e43      	subs	r3, r0, #1
 80033f8:	440a      	add	r2, r1
 80033fa:	4291      	cmp	r1, r2
 80033fc:	d100      	bne.n	8003400 <memcpy+0xc>
 80033fe:	bd10      	pop	{r4, pc}
 8003400:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003404:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003408:	e7f7      	b.n	80033fa <memcpy+0x6>

0800340a <memmove>:
 800340a:	4288      	cmp	r0, r1
 800340c:	b510      	push	{r4, lr}
 800340e:	eb01 0302 	add.w	r3, r1, r2
 8003412:	d807      	bhi.n	8003424 <memmove+0x1a>
 8003414:	1e42      	subs	r2, r0, #1
 8003416:	4299      	cmp	r1, r3
 8003418:	d00a      	beq.n	8003430 <memmove+0x26>
 800341a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800341e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003422:	e7f8      	b.n	8003416 <memmove+0xc>
 8003424:	4283      	cmp	r3, r0
 8003426:	d9f5      	bls.n	8003414 <memmove+0xa>
 8003428:	1881      	adds	r1, r0, r2
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	42d3      	cmn	r3, r2
 800342e:	d100      	bne.n	8003432 <memmove+0x28>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003436:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800343a:	e7f7      	b.n	800342c <memmove+0x22>

0800343c <__malloc_lock>:
 800343c:	4770      	bx	lr

0800343e <__malloc_unlock>:
 800343e:	4770      	bx	lr

08003440 <_realloc_r>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	4607      	mov	r7, r0
 8003444:	4614      	mov	r4, r2
 8003446:	460e      	mov	r6, r1
 8003448:	b921      	cbnz	r1, 8003454 <_realloc_r+0x14>
 800344a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800344e:	4611      	mov	r1, r2
 8003450:	f7ff bc7e 	b.w	8002d50 <_malloc_r>
 8003454:	b922      	cbnz	r2, 8003460 <_realloc_r+0x20>
 8003456:	f7ff fc2f 	bl	8002cb8 <_free_r>
 800345a:	4625      	mov	r5, r4
 800345c:	4628      	mov	r0, r5
 800345e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003460:	f000 f814 	bl	800348c <_malloc_usable_size_r>
 8003464:	42a0      	cmp	r0, r4
 8003466:	d20f      	bcs.n	8003488 <_realloc_r+0x48>
 8003468:	4621      	mov	r1, r4
 800346a:	4638      	mov	r0, r7
 800346c:	f7ff fc70 	bl	8002d50 <_malloc_r>
 8003470:	4605      	mov	r5, r0
 8003472:	2800      	cmp	r0, #0
 8003474:	d0f2      	beq.n	800345c <_realloc_r+0x1c>
 8003476:	4631      	mov	r1, r6
 8003478:	4622      	mov	r2, r4
 800347a:	f7ff ffbb 	bl	80033f4 <memcpy>
 800347e:	4631      	mov	r1, r6
 8003480:	4638      	mov	r0, r7
 8003482:	f7ff fc19 	bl	8002cb8 <_free_r>
 8003486:	e7e9      	b.n	800345c <_realloc_r+0x1c>
 8003488:	4635      	mov	r5, r6
 800348a:	e7e7      	b.n	800345c <_realloc_r+0x1c>

0800348c <_malloc_usable_size_r>:
 800348c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003490:	1f18      	subs	r0, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	bfbc      	itt	lt
 8003496:	580b      	ldrlt	r3, [r1, r0]
 8003498:	18c0      	addlt	r0, r0, r3
 800349a:	4770      	bx	lr

0800349c <_init>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	bf00      	nop
 80034a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a2:	bc08      	pop	{r3}
 80034a4:	469e      	mov	lr, r3
 80034a6:	4770      	bx	lr

080034a8 <_fini>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr
