
Cytron_Serial_Packetized.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007010  08007010  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007018  08007018  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007018  08007018  00017018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800701c  0800701c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000194c  200001e4  08007204  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b30  08007204  00021b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014810  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000309f  00000000  00000000  00034a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  00038808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e83  00000000  00000000  000393e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de6b  00000000  00000000  0005d263  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd506  00000000  00000000  0006b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001285d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  00128650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f98 	.word	0x08006f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08006f98 	.word	0x08006f98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN6CytronC1EP20__UART_HandleTypeDefhh>:
 *  3. And the channel (again read the datasheet, if you are not aware what is this).
 *
 *
 */

Cytron::Cytron(UART_HandleTypeDef* huart, uint8_t address, uint8_t channel) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	4613      	mov	r3, r2
 80004dc:	71bb      	strb	r3, [r7, #6]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	2255      	movs	r2, #85	; 0x55
 80004e2:	719a      	strb	r2, [r3, #6]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2200      	movs	r2, #0
 80004e8:	71da      	strb	r2, [r3, #7]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2200      	movs	r2, #0
 80004ee:	721a      	strb	r2, [r3, #8]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	725a      	strb	r2, [r3, #9]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	729a      	strb	r2, [r3, #10]
	this->huart = huart;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	601a      	str	r2, [r3, #0]
	this->address = address;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	79fa      	ldrb	r2, [r7, #7]
 8000506:	711a      	strb	r2, [r3, #4]
	this->channel = channel;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	715a      	strb	r2, [r3, #5]
}
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4618      	mov	r0, r3
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <_ZN6Cytron14send_dummy_bitEv>:
 *
 * This function comes with a cost of 500ms delay, so keep in mind that
 * not to use any time-sensitive operations while calling this function.
 */

void Cytron::send_dummy_bit(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, &dummy_bit, 1, HAL_MAX_DELAY);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f103 010a 	add.w	r1, r3, #10
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	2201      	movs	r2, #1
 8000534:	f002 fbf9 	bl	8002d2a <HAL_UART_Transmit>
	HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053c:	f000 fb02 	bl	8000b44 <HAL_Delay>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_ZN6Cytron9clockwiseEh>:
 * arduino.
 *
 * And finally we call the send_data function, which finally transmits the packet.
 */

void Cytron::clockwise(uint8_t pwm) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
	pwm = ZERO_POINT + ((CLOCKWISE - ZERO_POINT) / (INPUT_END - INPUT_START))\
 8000554:	237f      	movs	r3, #127	; 0x7f
 8000556:	70fb      	strb	r3, [r7, #3]
			* (pwm - INPUT_START);
	send_data(pwm);
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	4619      	mov	r1, r3
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f815 	bl	800058c <_ZN6Cytron9send_dataEh>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_ZN6Cytron14anti_clockwiseEh>:

void Cytron::anti_clockwise(uint8_t pwm) {
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
	pwm = ZERO_POINT + ((ANTI_CLOCKWISE - ZERO_POINT) / (INPUT_END - INPUT_START))\
 8000576:	237f      	movs	r3, #127	; 0x7f
 8000578:	70fb      	strb	r3, [r7, #3]
			* (pwm - INPUT_START);
	send_data(pwm);
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f804 	bl	800058c <_ZN6Cytron9send_dataEh>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <_ZN6Cytron9send_dataEh>:
 *
 * The packet 2 is the PWM, and finally the packet 3 is the checksum, which is the
 * addition of first three packets.
 */

void Cytron::send_data(uint8_t pwm) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	this->packet[1] = (this->channel << 3) | this->address;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	b25a      	sxtb	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	71da      	strb	r2, [r3, #7]
	this->packet[2] = pwm;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	78fa      	ldrb	r2, [r7, #3]
 80005b4:	721a      	strb	r2, [r3, #8]
	this->packet[3] = this->packet[0] + this->packet[1] + this->packet[2];
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	799a      	ldrb	r2, [r3, #6]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	4413      	add	r3, r2
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7a1b      	ldrb	r3, [r3, #8]
 80005c6:	4413      	add	r3, r2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(huart, packet, 4, HAL_MAX_DELAY);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	1d99      	adds	r1, r3, #6
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2204      	movs	r2, #4
 80005dc:	f002 fba5 	bl	8002d2a <HAL_UART_Transmit>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fa37 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f825 	bl	8000640 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8c5 	bl	8000784 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80005fa:	f000 f895 	bl	8000728 <_ZL19MX_USART1_UART_Initv>
  MX_USB_DEVICE_Init();
 80005fe:	f005 fef5 	bl	80063ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Cytron cytron_1(&huart1, 0b000, 1);
 8000602:	1d38      	adds	r0, r7, #4
 8000604:	2301      	movs	r3, #1
 8000606:	2200      	movs	r2, #0
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <main+0x54>)
 800060a:	f7ff ff5d 	bl	80004c8 <_ZN6CytronC1EP20__UART_HandleTypeDefhh>
  cytron_1.send_dummy_bit();
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff83 	bl	800051c <_ZN6Cytron14send_dummy_bitEv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  Code for driving the motor in clockwise and anti-clockwise direction with 1 sec delay
	  cytron_1.clockwise(255);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	21ff      	movs	r1, #255	; 0xff
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff94 	bl	8000548 <_ZN6Cytron9clockwiseEh>
	  HAL_Delay(1000);
 8000620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000624:	f000 fa8e 	bl	8000b44 <HAL_Delay>
	  cytron_1.anti_clockwise(255);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	21ff      	movs	r1, #255	; 0xff
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff9c 	bl	800056a <_ZN6Cytron14anti_clockwiseEh>
	  HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 fa85 	bl	8000b44 <HAL_Delay>
	  cytron_1.clockwise(255);
 800063a:	e7ec      	b.n	8000616 <main+0x2e>
 800063c:	20000200 	.word	0x20000200

08000640 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fbe0 	bl	8006e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <_Z18SystemClock_Configv+0xe0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <_Z18SystemClock_Configv+0xe0>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <_Z18SystemClock_Configv+0xe0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <_Z18SystemClock_Configv+0xe4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <_Z18SystemClock_Configv+0xe4>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <_Z18SystemClock_Configv+0xe4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b0:	2319      	movs	r3, #25
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fea6 	bl	8002418 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf14      	ite	ne
 80006d2:	2301      	movne	r3, #1
 80006d4:	2300      	moveq	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80006dc:	f000 f8a2 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2105      	movs	r1, #5
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 f8fa 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000714:	f000 f886 	bl	8000824 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000760:	f002 fa96 	bl	8002c90 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000774:	f000 f856 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000200 	.word	0x20000200
 8000780:	40011000 	.word	0x40011000

08000784 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <_ZL12MX_GPIO_Initv+0x98>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2104      	movs	r1, #4
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <_ZL12MX_GPIO_Initv+0x9c>)
 80007f4:	f000 fc74 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f8:	2304      	movs	r3, #4
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <_ZL12MX_GPIO_Initv+0x9c>)
 8000810:	f000 facc 	bl	8000dac <HAL_GPIO_Init>

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40021000 	.word	0x40021000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082a:	e7fe      	b.n	800082a <Error_Handler+0x6>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_UART_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e8:	2307      	movs	r3, #7
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_UART_MspInit+0x8c>)
 80008f4:	f000 fa5a 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40011000 	.word	0x40011000
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f8d4 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <OTG_FS_IRQHandler+0x10>)
 8000966:	f000 fd24 	bl	80013b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20001724 	.word	0x20001724

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f006 f9fc 	bl	8006da0 <__errno>
 80009a8:	4602      	mov	r2, r0
 80009aa:	230c      	movs	r3, #12
 80009ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20020000 	.word	0x20020000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	20000240 	.word	0x20000240
 80009dc:	20001b30 	.word	0x20001b30

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SystemInit+0x28>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <SystemInit+0x28>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SystemInit+0x28>)
 80009f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fa:	609a      	str	r2, [r3, #8]
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
  ldr  r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd3 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f006 f9b7 	bl	8006dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fdd3 	bl	80005e8 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a48:	08007020 	.word	0x08007020
  ldr  r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a50:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000a54:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000a58:	20001b30 	.word	0x20001b30

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f94d 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff feca 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f965 	bl	8000d92 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f92d 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000250 	.word	0x20000250

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000250 	.word	0x20000250

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_Delay+0x40>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e16b      	b.n	80010a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 815a 	bne.w	800109a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d00b      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfa:	2b11      	cmp	r3, #17
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0xfc>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80b4 	beq.w	800109a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a5a      	ldr	r2, [pc, #360]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d025      	beq.n	8000fce <HAL_GPIO_Init+0x222>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d01f      	beq.n	8000fca <HAL_GPIO_Init+0x21e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x216>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x212>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_GPIO_Init+0x328>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x20e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_GPIO_Init+0x32c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x20a>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e00e      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	e00c      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4934      	ldr	r1, [pc, #208]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x330>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_GPIO_Init+0x330>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f ae90 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	; 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40021c00 	.word	0x40021c00
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001114:	b08f      	sub	sp, #60	; 0x3c
 8001116:	af0a      	add	r7, sp, #40	; 0x28
 8001118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e10f      	b.n	8001344 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f005 fb32 	bl	80067a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2203      	movs	r2, #3
 8001148:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fb55 	bl	8003812 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	687e      	ldr	r6, [r7, #4]
 8001170:	466d      	mov	r5, sp
 8001172:	f106 0410 	add.w	r4, r6, #16
 8001176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001182:	e885 0003 	stmia.w	r5, {r0, r1}
 8001186:	1d33      	adds	r3, r6, #4
 8001188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118a:	6838      	ldr	r0, [r7, #0]
 800118c:	f002 fa2c 	bl	80035e8 <USB_CoreInit>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2202      	movs	r2, #2
 800119a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0d0      	b.n	8001344 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fb43 	bl	8003834 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e04a      	b.n	800124a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	333d      	adds	r3, #61	; 0x3d
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	333c      	adds	r3, #60	; 0x3c
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	b298      	uxth	r0, r3
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	3342      	adds	r3, #66	; 0x42
 80011f0:	4602      	mov	r2, r0
 80011f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	333f      	adds	r3, #63	; 0x3f
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3344      	adds	r3, #68	; 0x44
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3348      	adds	r3, #72	; 0x48
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3350      	adds	r3, #80	; 0x50
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	3301      	adds	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3af      	bcc.n	80011b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e044      	b.n	80012e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	3301      	adds	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3b5      	bcc.n	800125a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	687e      	ldr	r6, [r7, #4]
 80012f6:	466d      	mov	r5, sp
 80012f8:	f106 0410 	add.w	r4, r6, #16
 80012fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001304:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001308:	e885 0003 	stmia.w	r5, {r0, r1}
 800130c:	1d33      	adds	r3, r6, #4
 800130e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f002 fab9 	bl	8003888 <USB_DevInit>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00d      	b.n	8001344 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fb01 	bl	8004944 <USB_DevDisconnect>

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800134c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_PCD_Start+0x1c>
 8001364:	2302      	movs	r3, #2
 8001366:	e020      	b.n	80013aa <HAL_PCD_Start+0x5e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	2b01      	cmp	r3, #1
 8001376:	d109      	bne.n	800138c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800137c:	2b01      	cmp	r3, #1
 800137e:	d005      	beq.n	800138c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fa2d 	bl	80037f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fab1 	bl	8004902 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013b2:	b590      	push	{r4, r7, lr}
 80013b4:	b08d      	sub	sp, #52	; 0x34
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fb6f 	bl	8004aac <USB_GetMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 839d 	bne.w	8001b10 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fad3 	bl	8004986 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8393 	beq.w	8001b0e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 faca 	bl	8004986 <USB_ReadInterrupts>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d107      	bne.n	800140c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f002 0202 	and.w	r2, r2, #2
 800140a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fab8 	bl	8004986 <USB_ReadInterrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b10      	cmp	r3, #16
 800141e:	d161      	bne.n	80014e4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0210 	bic.w	r2, r2, #16
 800142e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f003 020f 	and.w	r2, r3, #15
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	3304      	adds	r3, #4
 800144e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	0c5b      	lsrs	r3, r3, #17
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	2b02      	cmp	r3, #2
 800145a:	d124      	bne.n	80014a6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d035      	beq.n	80014d4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	6a38      	ldr	r0, [r7, #32]
 800147c:	f003 f91e 	bl	80046bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148c:	441a      	add	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149e:	441a      	add	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	619a      	str	r2, [r3, #24]
 80014a4:	e016      	b.n	80014d4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	0c5b      	lsrs	r3, r3, #17
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d110      	bne.n	80014d4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014b8:	2208      	movs	r2, #8
 80014ba:	4619      	mov	r1, r3
 80014bc:	6a38      	ldr	r0, [r7, #32]
 80014be:	f003 f8fd 	bl	80046bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ce:	441a      	add	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0210 	orr.w	r2, r2, #16
 80014e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fa4c 	bl	8004986 <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014f8:	d16e      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fa52 	bl	80049ac <USB_ReadDevAllOutEpInterrupt>
 8001508:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800150a:	e062      	b.n	80015d2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d057      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fa77 	bl	8004a14 <USB_ReadDevOutEPInterrupt>
 8001526:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00c      	beq.n	800154c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	015a      	lsls	r2, r3, #5
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	4413      	add	r3, r2
 800153a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153e:	461a      	mov	r2, r3
 8001540:	2301      	movs	r3, #1
 8001542:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fdb0 	bl	80020ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00c      	beq.n	8001570 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	015a      	lsls	r2, r3, #5
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	4413      	add	r3, r2
 800155e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001562:	461a      	mov	r2, r3
 8001564:	2308      	movs	r3, #8
 8001566:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 feaa 	bl	80022c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001586:	461a      	mov	r2, r3
 8001588:	2310      	movs	r3, #16
 800158a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	015a      	lsls	r2, r3, #5
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a2:	461a      	mov	r2, r3
 80015a4:	2320      	movs	r3, #32
 80015a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015be:	461a      	mov	r2, r3
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	3301      	adds	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d199      	bne.n	800150c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 f9d2 	bl	8004986 <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ec:	f040 80c0 	bne.w	8001770 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 f9f3 	bl	80049e0 <USB_ReadDevAllInEpInterrupt>
 80015fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001600:	e0b2      	b.n	8001768 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80a7 	beq.w	800175c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fa19 	bl	8004a50 <USB_ReadDevInEPInterrupt>
 800161e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d057      	beq.n	80016da <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	2201      	movs	r2, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43db      	mvns	r3, r3
 8001644:	69f9      	ldr	r1, [r7, #28]
 8001646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800164a:	4013      	ands	r3, r2
 800164c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	4413      	add	r3, r2
 8001656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165a:	461a      	mov	r2, r3
 800165c:	2301      	movs	r3, #1
 800165e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d132      	bne.n	80016ce <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3348      	adds	r3, #72	; 0x48
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4403      	add	r3, r0
 8001688:	3344      	adds	r3, #68	; 0x44
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4419      	add	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4403      	add	r3, r0
 800169c:	3348      	adds	r3, #72	; 0x48
 800169e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d113      	bne.n	80016ce <HAL_PCD_IRQHandler+0x31c>
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3350      	adds	r3, #80	; 0x50
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016c6:	461a      	mov	r2, r3
 80016c8:	2101      	movs	r1, #1
 80016ca:	f003 fa21 	bl	8004b10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f005 f8e8 	bl	80068aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	015a      	lsls	r2, r3, #5
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f0:	461a      	mov	r2, r3
 80016f2:	2308      	movs	r3, #8
 80016f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170c:	461a      	mov	r2, r3
 800170e:	2310      	movs	r3, #16
 8001710:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001728:	461a      	mov	r2, r3
 800172a:	2340      	movs	r3, #64	; 0x40
 800172c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001744:	461a      	mov	r2, r3
 8001746:	2302      	movs	r3, #2
 8001748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fc1b 	bl	8001f92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3301      	adds	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176a:	2b00      	cmp	r3, #0
 800176c:	f47f af49 	bne.w	8001602 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 f906 	bl	8004986 <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001784:	d122      	bne.n	80017cc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d108      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fe26 	bl	8002400 <HAL_PCDEx_LPM_Callback>
 80017b4:	e002      	b.n	80017bc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f005 f8ee 	bl	8006998 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f8d8 	bl	8004986 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e0:	d112      	bne.n	8001808 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f005 f8aa 	bl	800694c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001806:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f8ba 	bl	8004986 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181c:	f040 80c7 	bne.w	80019ae <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2110      	movs	r1, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f002 f988 	bl	8003b50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001844:	e056      	b.n	80018f4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	015a      	lsls	r2, r3, #5
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001852:	461a      	mov	r2, r3
 8001854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001858:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	0151      	lsls	r1, r2, #5
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	440a      	add	r2, r1
 8001870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001878:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	0151      	lsls	r1, r2, #5
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	440a      	add	r2, r1
 8001890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001894:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001898:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a6:	461a      	mov	r2, r3
 80018a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018be:	0151      	lsls	r1, r2, #5
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	440a      	add	r2, r1
 80018c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018de:	0151      	lsls	r1, r2, #5
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	440a      	add	r2, r1
 80018e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	3301      	adds	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3a3      	bcc.n	8001846 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001910:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	2b00      	cmp	r3, #0
 8001918:	d016      	beq.n	8001948 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192a:	f043 030b 	orr.w	r3, r3, #11
 800192e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001940:	f043 030b 	orr.w	r3, r3, #11
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	e015      	b.n	8001974 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001956:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800195a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800195e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800196e:	f043 030b 	orr.w	r3, r3, #11
 8001972:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001982:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001986:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001998:	461a      	mov	r2, r3
 800199a:	f003 f8b9 	bl	8004b10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 ffe7 	bl	8004986 <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c2:	d124      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 f87d 	bl	8004ac8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 f91d 	bl	8003c12 <USB_GetDevSpeed>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681c      	ldr	r4, [r3, #0]
 80019e4:	f001 f920 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 80019e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	4620      	mov	r0, r4
 80019f4:	f001 fe5a 	bl	80036ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f004 ff7e 	bl	80068fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 ffb7 	bl	8004986 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d10a      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f004 ff5b 	bl	80068de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f002 0208 	and.w	r2, r2, #8
 8001a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 ffa2 	bl	8004986 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a4c:	d10f      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f004 ffbd 	bl	80069d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 ff87 	bl	8004986 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a82:	d10f      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f004 ff90 	bl	80069b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 ff6c 	bl	8004986 <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f004 ff9e 	bl	80069fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 ff56 	bl	8004986 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d115      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f004 ff8e 	bl	8006a18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	e000      	b.n	8001b10 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b0e:	bf00      	nop
    }
  }
}
 8001b10:	3734      	adds	r7, #52	; 0x34
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}

08001b16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_PCD_SetAddress+0x1a>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e013      	b.n	8001b58 <HAL_PCD_SetAddress+0x42>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 feb4 	bl	80048b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	70fb      	strb	r3, [r7, #3]
 8001b72:	460b      	mov	r3, r1
 8001b74:	803b      	strh	r3, [r7, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da0f      	bge.n	8001ba6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3338      	adds	r3, #56	; 0x38
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	705a      	strb	r2, [r3, #1]
 8001ba4:	e00f      	b.n	8001bc6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 020f 	and.w	r2, r3, #15
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bd2:	883a      	ldrh	r2, [r7, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	78ba      	ldrb	r2, [r7, #2]
 8001bdc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bf0:	78bb      	ldrb	r3, [r7, #2]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d102      	bne.n	8001bfc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_PCD_EP_Open+0xaa>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e00e      	b.n	8001c28 <HAL_PCD_EP_Open+0xc8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 f81f 	bl	8003c5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c26:	7afb      	ldrb	r3, [r7, #11]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da0f      	bge.n	8001c64 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	f003 020f 	and.w	r2, r3, #15
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	3338      	adds	r3, #56	; 0x38
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	3304      	adds	r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	705a      	strb	r2, [r3, #1]
 8001c62:	e00f      	b.n	8001c84 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 020f 	and.w	r2, r3, #15
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_PCD_EP_Close+0x6e>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e00e      	b.n	8001cbc <HAL_PCD_EP_Close+0x8c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f002 f85d 	bl	8003d6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	f003 020f 	and.w	r2, r3, #15
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3304      	adds	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2200      	movs	r2, #0
 8001d04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	6979      	ldr	r1, [r7, #20]
 8001d38:	f002 fb38 	bl	80043ac <USB_EP0StartXfer>
 8001d3c:	e008      	b.n	8001d50 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6979      	ldr	r1, [r7, #20]
 8001d4c:	f002 f8ea 	bl	8003f24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d7c:	681b      	ldr	r3, [r3, #0]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	3338      	adds	r3, #56	; 0x38
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	f002 fad6 	bl	80043ac <USB_EP0StartXfer>
 8001e00:	e008      	b.n	8001e14 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	f002 f888 	bl	8003f24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d901      	bls.n	8001e3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e050      	b.n	8001ede <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da0f      	bge.n	8001e64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3338      	adds	r3, #56	; 0x38
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	705a      	strb	r2, [r3, #1]
 8001e62:	e00d      	b.n	8001e80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_PCD_EP_SetStall+0x82>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e01e      	b.n	8001ede <HAL_PCD_EP_SetStall+0xc0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68f9      	ldr	r1, [r7, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fc2d 	bl	800470e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	b2d9      	uxtb	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f002 fe1e 	bl	8004b10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d901      	bls.n	8001f04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e042      	b.n	8001f8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da0f      	bge.n	8001f2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 020f 	and.w	r2, r3, #15
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	3338      	adds	r3, #56	; 0x38
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	705a      	strb	r2, [r3, #1]
 8001f2a:	e00f      	b.n	8001f4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_PCD_EP_ClrStall+0x86>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e00e      	b.n	8001f8a <HAL_PCD_EP_ClrStall+0xa4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fc35 	bl	80047ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b08a      	sub	sp, #40	; 0x28
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3338      	adds	r3, #56	; 0x38
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d901      	bls.n	8001fca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06c      	b.n	80020a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d902      	bls.n	8001fe6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3303      	adds	r3, #3
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fee:	e02b      	b.n	8002048 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	429a      	cmp	r2, r3
 8002004:	d902      	bls.n	800200c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3303      	adds	r3, #3
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002024:	b2db      	uxtb	r3, r3
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4603      	mov	r3, r0
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f002 fb11 	bl	8004652 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	441a      	add	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	441a      	add	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	b29b      	uxth	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	429a      	cmp	r2, r3
 800205c:	d809      	bhi.n	8002072 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002066:	429a      	cmp	r2, r3
 8002068:	d203      	bcs.n	8002072 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1be      	bne.n	8001ff0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	429a      	cmp	r2, r3
 800207c:	d811      	bhi.n	80020a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	2201      	movs	r2, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	43db      	mvns	r3, r3
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800209e:	4013      	ands	r3, r2
 80020a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	333c      	adds	r3, #60	; 0x3c
 80020c4:	3304      	adds	r3, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	f040 80a0 	bne.w	8002224 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4a72      	ldr	r2, [pc, #456]	; (80022bc <PCD_EP_OutXfrComplete_int+0x210>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	f240 80dd 	bls.w	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80d7 	beq.w	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002110:	461a      	mov	r2, r3
 8002112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002116:	6093      	str	r3, [r2, #8]
 8002118:	e0cb      	b.n	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	2320      	movs	r3, #32
 8002134:	6093      	str	r3, [r2, #8]
 8002136:	e0bc      	b.n	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80b7 	bne.w	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <PCD_EP_OutXfrComplete_int+0x210>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d90f      	bls.n	800216c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	461a      	mov	r2, r3
 8002164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002168:	6093      	str	r3, [r2, #8]
 800216a:	e0a2      	b.n	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800217e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	0159      	lsls	r1, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	440b      	add	r3, r1
 8002188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002192:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4403      	add	r3, r0
 80021a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4403      	add	r3, r0
 80021ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4419      	add	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4403      	add	r3, r0
 80021e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d114      	bne.n	8002216 <PCD_EP_OutXfrComplete_int+0x16a>
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800220e:	461a      	mov	r2, r3
 8002210:	2101      	movs	r1, #1
 8002212:	f002 fc7d 	bl	8004b10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f004 fb29 	bl	8006874 <HAL_PCD_DataOutStageCallback>
 8002222:	e046      	b.n	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d124      	bne.n	8002276 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002242:	461a      	mov	r2, r3
 8002244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002248:	6093      	str	r3, [r2, #8]
 800224a:	e032      	b.n	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002262:	461a      	mov	r2, r3
 8002264:	2320      	movs	r3, #32
 8002266:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f004 fb00 	bl	8006874 <HAL_PCD_DataOutStageCallback>
 8002274:	e01d      	b.n	80022b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d114      	bne.n	80022a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d108      	bne.n	80022a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800229e:	461a      	mov	r2, r3
 80022a0:	2100      	movs	r1, #0
 80022a2:	f002 fc35 	bl	8004b10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f004 fae1 	bl	8006874 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	4f54300a 	.word	0x4f54300a
 80022c0:	4f54310a 	.word	0x4f54310a

080022c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	333c      	adds	r3, #60	; 0x3c
 80022dc:	3304      	adds	r3, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a15      	ldr	r2, [pc, #84]	; (800234c <PCD_EP_OutSetupPacket_int+0x88>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d90e      	bls.n	8002318 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002316:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f004 fa99 	bl	8006850 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <PCD_EP_OutSetupPacket_int+0x88>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d90c      	bls.n	8002340 <PCD_EP_OutSetupPacket_int+0x7c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002338:	461a      	mov	r2, r3
 800233a:	2101      	movs	r1, #1
 800233c:	f002 fbe8 	bl	8004b10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a

08002350 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
 800235c:	4613      	mov	r3, r2
 800235e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800236e:	883b      	ldrh	r3, [r7, #0]
 8002370:	0419      	lsls	r1, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	430a      	orrs	r2, r1
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
 800237c:	e028      	b.n	80023d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e00d      	b.n	80023ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3340      	adds	r3, #64	; 0x40
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3ec      	bcc.n	8002392 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023b8:	883b      	ldrh	r3, [r7, #0]
 80023ba:	0418      	lsls	r0, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4302      	orrs	r2, r0
 80023c8:	3340      	adds	r3, #64	; 0x40
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e25b      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d075      	beq.n	8002522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002436:	4ba3      	ldr	r3, [pc, #652]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d00c      	beq.n	800245c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4ba0      	ldr	r3, [pc, #640]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244a:	2b08      	cmp	r3, #8
 800244c:	d112      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244e:	4b9d      	ldr	r3, [pc, #628]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b99      	ldr	r3, [pc, #612]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d157      	bne.n	8002520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e236      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x74>
 800247e:	4b91      	ldr	r3, [pc, #580]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a90      	ldr	r2, [pc, #576]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x98>
 8002496:	4b8b      	ldr	r3, [pc, #556]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a8a      	ldr	r2, [pc, #552]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a87      	ldr	r2, [pc, #540]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 80024b0:	4b84      	ldr	r3, [pc, #528]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a83      	ldr	r2, [pc, #524]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fb2c 	bl	8000b2c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fb28 	bl	8000b2c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1fb      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xc0>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fb18 	bl	8000b2c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fb14 	bl	8000b2c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1e7      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0xe8>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b62      	ldr	r3, [pc, #392]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1bb      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b56      	ldr	r3, [pc, #344]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4952      	ldr	r1, [pc, #328]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_RCC_OscConfig+0x2b0>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe facd 	bl	8000b2c <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe fac9 	bl	8000b2c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e19c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4940      	ldr	r1, [pc, #256]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_OscConfig+0x2b0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe faac 	bl	8000b2c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe faa8 	bl	8000b2c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e17b      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d030      	beq.n	8002664 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_RCC_OscConfig+0x2b4>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fa8c 	bl	8000b2c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe fa88 	bl	8000b2c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e15b      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x200>
 8002636:	e015      	b.n	8002664 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_OscConfig+0x2b4>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe fa75 	bl	8000b2c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe fa71 	bl	8000b2c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e144      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f0      	bne.n	8002646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a0 	beq.w	80027b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_OscConfig+0x2b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d121      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RCC_OscConfig+0x2b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <HAL_RCC_OscConfig+0x2b8>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7fe fa37 	bl	8000b2c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e011      	b.n	80026e6 <HAL_RCC_OscConfig+0x2ce>
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470000 	.word	0x42470000
 80026cc:	42470e80 	.word	0x42470e80
 80026d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fa2a 	bl	8000b2c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0fd      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b81      	ldr	r3, [pc, #516]	; (80028ec <HAL_RCC_OscConfig+0x4d4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d106      	bne.n	8002708 <HAL_RCC_OscConfig+0x2f0>
 80026fa:	4b7d      	ldr	r3, [pc, #500]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a7c      	ldr	r2, [pc, #496]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
 8002706:	e01c      	b.n	8002742 <HAL_RCC_OscConfig+0x32a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0x312>
 8002710:	4b77      	ldr	r3, [pc, #476]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a76      	ldr	r2, [pc, #472]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a73      	ldr	r2, [pc, #460]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0x32a>
 800272a:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a70      	ldr	r2, [pc, #448]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	4b6e      	ldr	r3, [pc, #440]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a6d      	ldr	r2, [pc, #436]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d015      	beq.n	8002776 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7fe f9ef 	bl	8000b2c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe f9eb 	bl	8000b2c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0bc      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ee      	beq.n	8002752 <HAL_RCC_OscConfig+0x33a>
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe f9d9 	bl	8000b2c <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe f9d5 	bl	8000b2c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0a6      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a51      	ldr	r2, [pc, #324]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8092 	beq.w	80028e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027bc:	4b4c      	ldr	r3, [pc, #304]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d05c      	beq.n	8002882 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d141      	bne.n	8002854 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_RCC_OscConfig+0x4dc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe f9a9 	bl	8000b2c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe f9a5 	bl	8000b2c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e078      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	019b      	lsls	r3, r3, #6
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	4933      	ldr	r1, [pc, #204]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002826:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <HAL_RCC_OscConfig+0x4dc>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe f97e 	bl	8000b2c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe f97a 	bl	8000b2c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e04d      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x41c>
 8002852:	e045      	b.n	80028e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe f967 	bl	8000b2c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002862:	f7fe f963 	bl	8000b2c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e036      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f0      	bne.n	8002862 <HAL_RCC_OscConfig+0x44a>
 8002880:	e02e      	b.n	80028e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e029      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_RCC_OscConfig+0x4d8>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11c      	bne.n	80028dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d115      	bne.n	80028dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b6:	4013      	ands	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10d      	bne.n	80028dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40007000 	.word	0x40007000
 80028f0:	40023800 	.word	0x40023800
 80028f4:	42470060 	.word	0x42470060

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cc      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d90c      	bls.n	8002934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d044      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d119      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e067      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4934      	ldr	r1, [pc, #208]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe f8a0 	bl	8000b2c <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fe f89c 	bl	8000b2c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d20c      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f821 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a82:	4601      	mov	r1, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	5cd3      	ldrb	r3, [r2, r3]
 8002a92:	fa21 f303 	lsr.w	r3, r1, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe f800 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08006ff8 	.word	0x08006ff8
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ada:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d007      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d008      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x38>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 808d 	bne.w	8002c0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002af2:	60bb      	str	r3, [r7, #8]
       break;
 8002af4:	e08c      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af6:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002af8:	60bb      	str	r3, [r7, #8]
      break;
 8002afa:	e089      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b06:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d023      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	f04f 0400 	mov.w	r4, #0
 8002b1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	ea03 0501 	and.w	r5, r3, r1
 8002b28:	ea04 0602 	and.w	r6, r4, r2
 8002b2c:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b2e:	fb02 f106 	mul.w	r1, r2, r6
 8002b32:	2200      	movs	r2, #0
 8002b34:	fb02 f205 	mul.w	r2, r2, r5
 8002b38:	440a      	add	r2, r1
 8002b3a:	493a      	ldr	r1, [pc, #232]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b3c:	fba5 0101 	umull	r0, r1, r5, r1
 8002b40:	1853      	adds	r3, r2, r1
 8002b42:	4619      	mov	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f04f 0400 	mov.w	r4, #0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4623      	mov	r3, r4
 8002b4e:	f7fd fb3b 	bl	80001c8 <__aeabi_uldivmod>
 8002b52:	4603      	mov	r3, r0
 8002b54:	460c      	mov	r4, r1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e049      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	f04f 0400 	mov.w	r4, #0
 8002b64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	ea03 0501 	and.w	r5, r3, r1
 8002b70:	ea04 0602 	and.w	r6, r4, r2
 8002b74:	4629      	mov	r1, r5
 8002b76:	4632      	mov	r2, r6
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	0154      	lsls	r4, r2, #5
 8002b82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b86:	014b      	lsls	r3, r1, #5
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	1b49      	subs	r1, r1, r5
 8002b8e:	eb62 0206 	sbc.w	r2, r2, r6
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	f04f 0400 	mov.w	r4, #0
 8002b9a:	0194      	lsls	r4, r2, #6
 8002b9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ba0:	018b      	lsls	r3, r1, #6
 8002ba2:	1a5b      	subs	r3, r3, r1
 8002ba4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	00e2      	lsls	r2, r4, #3
 8002bb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bb6:	00d9      	lsls	r1, r3, #3
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4614      	mov	r4, r2
 8002bbc:	195b      	adds	r3, r3, r5
 8002bbe:	eb44 0406 	adc.w	r4, r4, r6
 8002bc2:	f04f 0100 	mov.w	r1, #0
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	02a2      	lsls	r2, r4, #10
 8002bcc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bd0:	0299      	lsls	r1, r3, #10
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4614      	mov	r4, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	4621      	mov	r1, r4
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f04f 0400 	mov.w	r4, #0
 8002be0:	461a      	mov	r2, r3
 8002be2:	4623      	mov	r3, r4
 8002be4:	f7fd faf0 	bl	80001c8 <__aeabi_uldivmod>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	60bb      	str	r3, [r7, #8]
      break;
 8002c08:	e002      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c0c:	60bb      	str	r3, [r7, #8]
      break;
 8002c0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c10:	68bb      	ldr	r3, [r7, #8]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	017d7840 	.word	0x017d7840

08002c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff0 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c48:	4601      	mov	r1, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	08007008 	.word	0x08007008

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c6c:	f7ff ffdc 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c70:	4601      	mov	r1, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0b5b      	lsrs	r3, r3, #13
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08007008 	.word	0x08007008

08002c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e03f      	b.n	8002d22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd fde0 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f90b 	bl	8002ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b088      	sub	sp, #32
 8002d2e:	af02      	add	r7, sp, #8
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 8083 	bne.w	8002e52 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_UART_Transmit+0x2e>
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e07b      	b.n	8002e54 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Transmit+0x40>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e074      	b.n	8002e54 <HAL_UART_Transmit+0x12a>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2221      	movs	r2, #33	; 0x21
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d80:	f7fd fed4 	bl	8000b2c <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d9a:	e042      	b.n	8002e22 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	d122      	bne.n	8002dfa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f84c 	bl	8002e5c <UART_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e042      	b.n	8002e54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3302      	adds	r3, #2
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	e017      	b.n	8002e22 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	e013      	b.n	8002e22 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2180      	movs	r1, #128	; 0x80
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f829 	bl	8002e5c <UART_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e01f      	b.n	8002e54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	60ba      	str	r2, [r7, #8]
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1b7      	bne.n	8002d9c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2200      	movs	r2, #0
 8002e34:	2140      	movs	r1, #64	; 0x40
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f810 	bl	8002e5c <UART_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e006      	b.n	8002e54 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6c:	e02c      	b.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d028      	beq.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7c:	f7fd fe56 	bl	8000b2c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d21d      	bcs.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e00f      	b.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d0c3      	beq.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f32:	f023 030c 	bic.w	r3, r3, #12
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5e:	f040 818b 	bne.w	8003278 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4ac1      	ldr	r2, [pc, #772]	; (800326c <UART_SetConfig+0x37c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d005      	beq.n	8002f78 <UART_SetConfig+0x88>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4abf      	ldr	r2, [pc, #764]	; (8003270 <UART_SetConfig+0x380>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f040 80bd 	bne.w	80030f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7ff fe76 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8002f7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	461d      	mov	r5, r3
 8002f82:	f04f 0600 	mov.w	r6, #0
 8002f86:	46a8      	mov	r8, r5
 8002f88:	46b1      	mov	r9, r6
 8002f8a:	eb18 0308 	adds.w	r3, r8, r8
 8002f8e:	eb49 0409 	adc.w	r4, r9, r9
 8002f92:	4698      	mov	r8, r3
 8002f94:	46a1      	mov	r9, r4
 8002f96:	eb18 0805 	adds.w	r8, r8, r5
 8002f9a:	eb49 0906 	adc.w	r9, r9, r6
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002faa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fb2:	4688      	mov	r8, r1
 8002fb4:	4691      	mov	r9, r2
 8002fb6:	eb18 0005 	adds.w	r0, r8, r5
 8002fba:	eb49 0106 	adc.w	r1, r9, r6
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	461d      	mov	r5, r3
 8002fc4:	f04f 0600 	mov.w	r6, #0
 8002fc8:	196b      	adds	r3, r5, r5
 8002fca:	eb46 0406 	adc.w	r4, r6, r6
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	f7fd f8f9 	bl	80001c8 <__aeabi_uldivmod>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460c      	mov	r4, r1
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4ba5      	ldr	r3, [pc, #660]	; (8003274 <UART_SetConfig+0x384>)
 8002fde:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	461d      	mov	r5, r3
 8002fec:	f04f 0600 	mov.w	r6, #0
 8002ff0:	46a9      	mov	r9, r5
 8002ff2:	46b2      	mov	sl, r6
 8002ff4:	eb19 0309 	adds.w	r3, r9, r9
 8002ff8:	eb4a 040a 	adc.w	r4, sl, sl
 8002ffc:	4699      	mov	r9, r3
 8002ffe:	46a2      	mov	sl, r4
 8003000:	eb19 0905 	adds.w	r9, r9, r5
 8003004:	eb4a 0a06 	adc.w	sl, sl, r6
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003014:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003018:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800301c:	4689      	mov	r9, r1
 800301e:	4692      	mov	sl, r2
 8003020:	eb19 0005 	adds.w	r0, r9, r5
 8003024:	eb4a 0106 	adc.w	r1, sl, r6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	461d      	mov	r5, r3
 800302e:	f04f 0600 	mov.w	r6, #0
 8003032:	196b      	adds	r3, r5, r5
 8003034:	eb46 0406 	adc.w	r4, r6, r6
 8003038:	461a      	mov	r2, r3
 800303a:	4623      	mov	r3, r4
 800303c:	f7fd f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	461a      	mov	r2, r3
 8003046:	4b8b      	ldr	r3, [pc, #556]	; (8003274 <UART_SetConfig+0x384>)
 8003048:	fba3 1302 	umull	r1, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2164      	movs	r1, #100	; 0x64
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	4a86      	ldr	r2, [pc, #536]	; (8003274 <UART_SetConfig+0x384>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003068:	4498      	add	r8, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	461d      	mov	r5, r3
 800306e:	f04f 0600 	mov.w	r6, #0
 8003072:	46a9      	mov	r9, r5
 8003074:	46b2      	mov	sl, r6
 8003076:	eb19 0309 	adds.w	r3, r9, r9
 800307a:	eb4a 040a 	adc.w	r4, sl, sl
 800307e:	4699      	mov	r9, r3
 8003080:	46a2      	mov	sl, r4
 8003082:	eb19 0905 	adds.w	r9, r9, r5
 8003086:	eb4a 0a06 	adc.w	sl, sl, r6
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003096:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800309a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800309e:	4689      	mov	r9, r1
 80030a0:	4692      	mov	sl, r2
 80030a2:	eb19 0005 	adds.w	r0, r9, r5
 80030a6:	eb4a 0106 	adc.w	r1, sl, r6
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	461d      	mov	r5, r3
 80030b0:	f04f 0600 	mov.w	r6, #0
 80030b4:	196b      	adds	r3, r5, r5
 80030b6:	eb46 0406 	adc.w	r4, r6, r6
 80030ba:	461a      	mov	r2, r3
 80030bc:	4623      	mov	r3, r4
 80030be:	f7fd f883 	bl	80001c8 <__aeabi_uldivmod>
 80030c2:	4603      	mov	r3, r0
 80030c4:	460c      	mov	r4, r1
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <UART_SetConfig+0x384>)
 80030ca:	fba3 1302 	umull	r1, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2164      	movs	r1, #100	; 0x64
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	3332      	adds	r3, #50	; 0x32
 80030dc:	4a65      	ldr	r2, [pc, #404]	; (8003274 <UART_SetConfig+0x384>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	f003 0207 	and.w	r2, r3, #7
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4442      	add	r2, r8
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	e26f      	b.n	80035d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030f2:	f7ff fda5 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80030f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	461d      	mov	r5, r3
 80030fc:	f04f 0600 	mov.w	r6, #0
 8003100:	46a8      	mov	r8, r5
 8003102:	46b1      	mov	r9, r6
 8003104:	eb18 0308 	adds.w	r3, r8, r8
 8003108:	eb49 0409 	adc.w	r4, r9, r9
 800310c:	4698      	mov	r8, r3
 800310e:	46a1      	mov	r9, r4
 8003110:	eb18 0805 	adds.w	r8, r8, r5
 8003114:	eb49 0906 	adc.w	r9, r9, r6
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003124:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003128:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800312c:	4688      	mov	r8, r1
 800312e:	4691      	mov	r9, r2
 8003130:	eb18 0005 	adds.w	r0, r8, r5
 8003134:	eb49 0106 	adc.w	r1, r9, r6
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	461d      	mov	r5, r3
 800313e:	f04f 0600 	mov.w	r6, #0
 8003142:	196b      	adds	r3, r5, r5
 8003144:	eb46 0406 	adc.w	r4, r6, r6
 8003148:	461a      	mov	r2, r3
 800314a:	4623      	mov	r3, r4
 800314c:	f7fd f83c 	bl	80001c8 <__aeabi_uldivmod>
 8003150:	4603      	mov	r3, r0
 8003152:	460c      	mov	r4, r1
 8003154:	461a      	mov	r2, r3
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <UART_SetConfig+0x384>)
 8003158:	fba3 2302 	umull	r2, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	461d      	mov	r5, r3
 8003166:	f04f 0600 	mov.w	r6, #0
 800316a:	46a9      	mov	r9, r5
 800316c:	46b2      	mov	sl, r6
 800316e:	eb19 0309 	adds.w	r3, r9, r9
 8003172:	eb4a 040a 	adc.w	r4, sl, sl
 8003176:	4699      	mov	r9, r3
 8003178:	46a2      	mov	sl, r4
 800317a:	eb19 0905 	adds.w	r9, r9, r5
 800317e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800318e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003196:	4689      	mov	r9, r1
 8003198:	4692      	mov	sl, r2
 800319a:	eb19 0005 	adds.w	r0, r9, r5
 800319e:	eb4a 0106 	adc.w	r1, sl, r6
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	461d      	mov	r5, r3
 80031a8:	f04f 0600 	mov.w	r6, #0
 80031ac:	196b      	adds	r3, r5, r5
 80031ae:	eb46 0406 	adc.w	r4, r6, r6
 80031b2:	461a      	mov	r2, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	f7fd f807 	bl	80001c8 <__aeabi_uldivmod>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	461a      	mov	r2, r3
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <UART_SetConfig+0x384>)
 80031c2:	fba3 1302 	umull	r1, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2164      	movs	r1, #100	; 0x64
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	3332      	adds	r3, #50	; 0x32
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <UART_SetConfig+0x384>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031e2:	4498      	add	r8, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	461d      	mov	r5, r3
 80031e8:	f04f 0600 	mov.w	r6, #0
 80031ec:	46a9      	mov	r9, r5
 80031ee:	46b2      	mov	sl, r6
 80031f0:	eb19 0309 	adds.w	r3, r9, r9
 80031f4:	eb4a 040a 	adc.w	r4, sl, sl
 80031f8:	4699      	mov	r9, r3
 80031fa:	46a2      	mov	sl, r4
 80031fc:	eb19 0905 	adds.w	r9, r9, r5
 8003200:	eb4a 0a06 	adc.w	sl, sl, r6
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003210:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003214:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003218:	4689      	mov	r9, r1
 800321a:	4692      	mov	sl, r2
 800321c:	eb19 0005 	adds.w	r0, r9, r5
 8003220:	eb4a 0106 	adc.w	r1, sl, r6
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	461d      	mov	r5, r3
 800322a:	f04f 0600 	mov.w	r6, #0
 800322e:	196b      	adds	r3, r5, r5
 8003230:	eb46 0406 	adc.w	r4, r6, r6
 8003234:	461a      	mov	r2, r3
 8003236:	4623      	mov	r3, r4
 8003238:	f7fc ffc6 	bl	80001c8 <__aeabi_uldivmod>
 800323c:	4603      	mov	r3, r0
 800323e:	460c      	mov	r4, r1
 8003240:	461a      	mov	r2, r3
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <UART_SetConfig+0x384>)
 8003244:	fba3 1302 	umull	r1, r3, r3, r2
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	2164      	movs	r1, #100	; 0x64
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	3332      	adds	r3, #50	; 0x32
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <UART_SetConfig+0x384>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	f003 0207 	and.w	r2, r3, #7
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4442      	add	r2, r8
 8003268:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800326a:	e1b2      	b.n	80035d2 <UART_SetConfig+0x6e2>
 800326c:	40011000 	.word	0x40011000
 8003270:	40011400 	.word	0x40011400
 8003274:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4ad7      	ldr	r2, [pc, #860]	; (80035dc <UART_SetConfig+0x6ec>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d005      	beq.n	800328e <UART_SetConfig+0x39e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4ad6      	ldr	r2, [pc, #856]	; (80035e0 <UART_SetConfig+0x6f0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	f040 80d1 	bne.w	8003430 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800328e:	f7ff fceb 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8003292:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	469a      	mov	sl, r3
 8003298:	f04f 0b00 	mov.w	fp, #0
 800329c:	46d0      	mov	r8, sl
 800329e:	46d9      	mov	r9, fp
 80032a0:	eb18 0308 	adds.w	r3, r8, r8
 80032a4:	eb49 0409 	adc.w	r4, r9, r9
 80032a8:	4698      	mov	r8, r3
 80032aa:	46a1      	mov	r9, r4
 80032ac:	eb18 080a 	adds.w	r8, r8, sl
 80032b0:	eb49 090b 	adc.w	r9, r9, fp
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032c8:	4688      	mov	r8, r1
 80032ca:	4691      	mov	r9, r2
 80032cc:	eb1a 0508 	adds.w	r5, sl, r8
 80032d0:	eb4b 0609 	adc.w	r6, fp, r9
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f04f 0400 	mov.w	r4, #0
 80032e6:	0094      	lsls	r4, r2, #2
 80032e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032ec:	008b      	lsls	r3, r1, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	4623      	mov	r3, r4
 80032f2:	4628      	mov	r0, r5
 80032f4:	4631      	mov	r1, r6
 80032f6:	f7fc ff67 	bl	80001c8 <__aeabi_uldivmod>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	461a      	mov	r2, r3
 8003300:	4bb8      	ldr	r3, [pc, #736]	; (80035e4 <UART_SetConfig+0x6f4>)
 8003302:	fba3 2302 	umull	r2, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	469b      	mov	fp, r3
 8003310:	f04f 0c00 	mov.w	ip, #0
 8003314:	46d9      	mov	r9, fp
 8003316:	46e2      	mov	sl, ip
 8003318:	eb19 0309 	adds.w	r3, r9, r9
 800331c:	eb4a 040a 	adc.w	r4, sl, sl
 8003320:	4699      	mov	r9, r3
 8003322:	46a2      	mov	sl, r4
 8003324:	eb19 090b 	adds.w	r9, r9, fp
 8003328:	eb4a 0a0c 	adc.w	sl, sl, ip
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800333c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003340:	4689      	mov	r9, r1
 8003342:	4692      	mov	sl, r2
 8003344:	eb1b 0509 	adds.w	r5, fp, r9
 8003348:	eb4c 060a 	adc.w	r6, ip, sl
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f04f 0400 	mov.w	r4, #0
 800335e:	0094      	lsls	r4, r2, #2
 8003360:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003364:	008b      	lsls	r3, r1, #2
 8003366:	461a      	mov	r2, r3
 8003368:	4623      	mov	r3, r4
 800336a:	4628      	mov	r0, r5
 800336c:	4631      	mov	r1, r6
 800336e:	f7fc ff2b 	bl	80001c8 <__aeabi_uldivmod>
 8003372:	4603      	mov	r3, r0
 8003374:	460c      	mov	r4, r1
 8003376:	461a      	mov	r2, r3
 8003378:	4b9a      	ldr	r3, [pc, #616]	; (80035e4 <UART_SetConfig+0x6f4>)
 800337a:	fba3 1302 	umull	r1, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2164      	movs	r1, #100	; 0x64
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	; 0x32
 800338c:	4a95      	ldr	r2, [pc, #596]	; (80035e4 <UART_SetConfig+0x6f4>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003398:	4498      	add	r8, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	469b      	mov	fp, r3
 800339e:	f04f 0c00 	mov.w	ip, #0
 80033a2:	46d9      	mov	r9, fp
 80033a4:	46e2      	mov	sl, ip
 80033a6:	eb19 0309 	adds.w	r3, r9, r9
 80033aa:	eb4a 040a 	adc.w	r4, sl, sl
 80033ae:	4699      	mov	r9, r3
 80033b0:	46a2      	mov	sl, r4
 80033b2:	eb19 090b 	adds.w	r9, r9, fp
 80033b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033ce:	4689      	mov	r9, r1
 80033d0:	4692      	mov	sl, r2
 80033d2:	eb1b 0509 	adds.w	r5, fp, r9
 80033d6:	eb4c 060a 	adc.w	r6, ip, sl
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4619      	mov	r1, r3
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	0094      	lsls	r4, r2, #2
 80033ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f2:	008b      	lsls	r3, r1, #2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	4628      	mov	r0, r5
 80033fa:	4631      	mov	r1, r6
 80033fc:	f7fc fee4 	bl	80001c8 <__aeabi_uldivmod>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	461a      	mov	r2, r3
 8003406:	4b77      	ldr	r3, [pc, #476]	; (80035e4 <UART_SetConfig+0x6f4>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2164      	movs	r1, #100	; 0x64
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a72      	ldr	r2, [pc, #456]	; (80035e4 <UART_SetConfig+0x6f4>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4442      	add	r2, r8
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	e0d0      	b.n	80035d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7ff fc06 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8003434:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	469a      	mov	sl, r3
 800343a:	f04f 0b00 	mov.w	fp, #0
 800343e:	46d0      	mov	r8, sl
 8003440:	46d9      	mov	r9, fp
 8003442:	eb18 0308 	adds.w	r3, r8, r8
 8003446:	eb49 0409 	adc.w	r4, r9, r9
 800344a:	4698      	mov	r8, r3
 800344c:	46a1      	mov	r9, r4
 800344e:	eb18 080a 	adds.w	r8, r8, sl
 8003452:	eb49 090b 	adc.w	r9, r9, fp
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003462:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003466:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800346a:	4688      	mov	r8, r1
 800346c:	4691      	mov	r9, r2
 800346e:	eb1a 0508 	adds.w	r5, sl, r8
 8003472:	eb4b 0609 	adc.w	r6, fp, r9
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4619      	mov	r1, r3
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	f04f 0400 	mov.w	r4, #0
 8003488:	0094      	lsls	r4, r2, #2
 800348a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	461a      	mov	r2, r3
 8003492:	4623      	mov	r3, r4
 8003494:	4628      	mov	r0, r5
 8003496:	4631      	mov	r1, r6
 8003498:	f7fc fe96 	bl	80001c8 <__aeabi_uldivmod>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <UART_SetConfig+0x6f4>)
 80034a4:	fba3 2302 	umull	r2, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	469b      	mov	fp, r3
 80034b2:	f04f 0c00 	mov.w	ip, #0
 80034b6:	46d9      	mov	r9, fp
 80034b8:	46e2      	mov	sl, ip
 80034ba:	eb19 0309 	adds.w	r3, r9, r9
 80034be:	eb4a 040a 	adc.w	r4, sl, sl
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	eb19 090b 	adds.w	r9, r9, fp
 80034ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e2:	4689      	mov	r9, r1
 80034e4:	4692      	mov	sl, r2
 80034e6:	eb1b 0509 	adds.w	r5, fp, r9
 80034ea:	eb4c 060a 	adc.w	r6, ip, sl
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f04f 0400 	mov.w	r4, #0
 8003500:	0094      	lsls	r4, r2, #2
 8003502:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003506:	008b      	lsls	r3, r1, #2
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	4628      	mov	r0, r5
 800350e:	4631      	mov	r1, r6
 8003510:	f7fc fe5a 	bl	80001c8 <__aeabi_uldivmod>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	461a      	mov	r2, r3
 800351a:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <UART_SetConfig+0x6f4>)
 800351c:	fba3 1302 	umull	r1, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	2164      	movs	r1, #100	; 0x64
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	3332      	adds	r3, #50	; 0x32
 800352e:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <UART_SetConfig+0x6f4>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353a:	4498      	add	r8, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	469b      	mov	fp, r3
 8003540:	f04f 0c00 	mov.w	ip, #0
 8003544:	46d9      	mov	r9, fp
 8003546:	46e2      	mov	sl, ip
 8003548:	eb19 0309 	adds.w	r3, r9, r9
 800354c:	eb4a 040a 	adc.w	r4, sl, sl
 8003550:	4699      	mov	r9, r3
 8003552:	46a2      	mov	sl, r4
 8003554:	eb19 090b 	adds.w	r9, r9, fp
 8003558:	eb4a 0a0c 	adc.w	sl, sl, ip
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003568:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800356c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003570:	4689      	mov	r9, r1
 8003572:	4692      	mov	sl, r2
 8003574:	eb1b 0509 	adds.w	r5, fp, r9
 8003578:	eb4c 060a 	adc.w	r6, ip, sl
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4619      	mov	r1, r3
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	f04f 0400 	mov.w	r4, #0
 800358e:	0094      	lsls	r4, r2, #2
 8003590:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003594:	008b      	lsls	r3, r1, #2
 8003596:	461a      	mov	r2, r3
 8003598:	4623      	mov	r3, r4
 800359a:	4628      	mov	r0, r5
 800359c:	4631      	mov	r1, r6
 800359e:	f7fc fe13 	bl	80001c8 <__aeabi_uldivmod>
 80035a2:	4603      	mov	r3, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <UART_SetConfig+0x6f4>)
 80035aa:	fba3 1302 	umull	r1, r3, r3, r2
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2164      	movs	r1, #100	; 0x64
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	3332      	adds	r3, #50	; 0x32
 80035bc:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <UART_SetConfig+0x6f4>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4442      	add	r2, r8
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	e7ff      	b.n	80035d2 <UART_SetConfig+0x6e2>
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035dc:	40011000 	.word	0x40011000
 80035e0:	40011400 	.word	0x40011400
 80035e4:	51eb851f 	.word	0x51eb851f

080035e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e8:	b084      	sub	sp, #16
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	f107 001c 	add.w	r0, r7, #28
 80035f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d122      	bne.n	8003646 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f001 fac6 	bl	8004bcc <USB_CoreReset>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e01a      	b.n	800367c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f001 faba 	bl	8004bcc <USB_CoreReset>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
 800366e:	e005      	b.n	800367c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10b      	bne.n	800369a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f043 0206 	orr.w	r2, r3, #6
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a6:	b004      	add	sp, #16
 80036a8:	4770      	bx	lr
	...

080036ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d165      	bne.n	800378c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a41      	ldr	r2, [pc, #260]	; (80037c8 <USB_SetTurnaroundTime+0x11c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d906      	bls.n	80036d6 <USB_SetTurnaroundTime+0x2a>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a40      	ldr	r2, [pc, #256]	; (80037cc <USB_SetTurnaroundTime+0x120>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d802      	bhi.n	80036d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036d0:	230f      	movs	r3, #15
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e062      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <USB_SetTurnaroundTime+0x120>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d906      	bls.n	80036ec <USB_SetTurnaroundTime+0x40>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4a3b      	ldr	r2, [pc, #236]	; (80037d0 <USB_SetTurnaroundTime+0x124>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d802      	bhi.n	80036ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036e6:	230e      	movs	r3, #14
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e057      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a38      	ldr	r2, [pc, #224]	; (80037d0 <USB_SetTurnaroundTime+0x124>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d906      	bls.n	8003702 <USB_SetTurnaroundTime+0x56>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <USB_SetTurnaroundTime+0x128>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d802      	bhi.n	8003702 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036fc:	230d      	movs	r3, #13
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e04c      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a33      	ldr	r2, [pc, #204]	; (80037d4 <USB_SetTurnaroundTime+0x128>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d906      	bls.n	8003718 <USB_SetTurnaroundTime+0x6c>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4a32      	ldr	r2, [pc, #200]	; (80037d8 <USB_SetTurnaroundTime+0x12c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d802      	bhi.n	8003718 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003712:	230c      	movs	r3, #12
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e041      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a2f      	ldr	r2, [pc, #188]	; (80037d8 <USB_SetTurnaroundTime+0x12c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d906      	bls.n	800372e <USB_SetTurnaroundTime+0x82>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <USB_SetTurnaroundTime+0x130>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d802      	bhi.n	800372e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003728:	230b      	movs	r3, #11
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e036      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a2a      	ldr	r2, [pc, #168]	; (80037dc <USB_SetTurnaroundTime+0x130>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d906      	bls.n	8003744 <USB_SetTurnaroundTime+0x98>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <USB_SetTurnaroundTime+0x134>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d802      	bhi.n	8003744 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800373e:	230a      	movs	r3, #10
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e02b      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <USB_SetTurnaroundTime+0x134>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d906      	bls.n	800375a <USB_SetTurnaroundTime+0xae>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <USB_SetTurnaroundTime+0x138>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d802      	bhi.n	800375a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003754:	2309      	movs	r3, #9
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e020      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <USB_SetTurnaroundTime+0x138>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d906      	bls.n	8003770 <USB_SetTurnaroundTime+0xc4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <USB_SetTurnaroundTime+0x13c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d802      	bhi.n	8003770 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800376a:	2308      	movs	r3, #8
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e015      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <USB_SetTurnaroundTime+0x13c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d906      	bls.n	8003786 <USB_SetTurnaroundTime+0xda>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <USB_SetTurnaroundTime+0x140>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d802      	bhi.n	8003786 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003780:	2307      	movs	r3, #7
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e00a      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003786:	2306      	movs	r3, #6
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e007      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003792:	2309      	movs	r3, #9
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e001      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003798:	2309      	movs	r3, #9
 800379a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	029b      	lsls	r3, r3, #10
 80037b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	00d8acbf 	.word	0x00d8acbf
 80037cc:	00e4e1bf 	.word	0x00e4e1bf
 80037d0:	00f423ff 	.word	0x00f423ff
 80037d4:	0106737f 	.word	0x0106737f
 80037d8:	011a499f 	.word	0x011a499f
 80037dc:	01312cff 	.word	0x01312cff
 80037e0:	014ca43f 	.word	0x014ca43f
 80037e4:	016e35ff 	.word	0x016e35ff
 80037e8:	01a6ab1f 	.word	0x01a6ab1f
 80037ec:	01e847ff 	.word	0x01e847ff

080037f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 0201 	bic.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d106      	bne.n	8003860 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	e00b      	b.n	8003878 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e001      	b.n	8003878 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e003      	b.n	8003880 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003878:	2032      	movs	r0, #50	; 0x32
 800387a:	f7fd f963 	bl	8000b44 <HAL_Delay>

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003888:	b084      	sub	sp, #16
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e009      	b.n	80038bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3340      	adds	r3, #64	; 0x40
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	3301      	adds	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b0e      	cmp	r3, #14
 80038c0:	d9f2      	bls.n	80038a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d11c      	bne.n	8003902 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
 8003900:	e00b      	b.n	800391a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003920:	461a      	mov	r2, r3
 8003922:	2300      	movs	r3, #0
 8003924:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392c:	4619      	mov	r1, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	461a      	mov	r2, r3
 8003936:	680b      	ldr	r3, [r1, #0]
 8003938:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10c      	bne.n	800395a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003946:	2100      	movs	r1, #0
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f949 	bl	8003be0 <USB_SetDevSpeed>
 800394e:	e008      	b.n	8003962 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003950:	2101      	movs	r1, #1
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f944 	bl	8003be0 <USB_SetDevSpeed>
 8003958:	e003      	b.n	8003962 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800395a:	2103      	movs	r1, #3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f93f 	bl	8003be0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003962:	2110      	movs	r1, #16
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8f3 	bl	8003b50 <USB_FlushTxFifo>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f911 	bl	8003b9c <USB_FlushRxFifo>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	461a      	mov	r2, r3
 800398c:	2300      	movs	r3, #0
 800398e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	e043      	b.n	8003a36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c4:	d118      	bne.n	80039f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	461a      	mov	r2, r3
 80039da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e013      	b.n	8003a0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ee:	461a      	mov	r2, r3
 80039f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e008      	b.n	8003a0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a04:	461a      	mov	r2, r3
 8003a06:	2300      	movs	r3, #0
 8003a08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a16:	461a      	mov	r2, r3
 8003a18:	2300      	movs	r3, #0
 8003a1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	3301      	adds	r3, #1
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d3b7      	bcc.n	80039ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	e043      	b.n	8003acc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5a:	d118      	bne.n	8003a8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e013      	b.n	8003aa0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e008      	b.n	8003aa0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3b7      	bcc.n	8003a44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003af4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <USB_DevInit+0x2c4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f043 0208 	orr.w	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b48:	b004      	add	sp, #16
 8003b4a:	4770      	bx	lr
 8003b4c:	803c3800 	.word	0x803c3800

08003b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	019b      	lsls	r3, r3, #6
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <USB_FlushTxFifo+0x48>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e006      	b.n	8003b8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d0f0      	beq.n	8003b6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	00030d40 	.word	0x00030d40

08003b9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2210      	movs	r2, #16
 8003bac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <USB_FlushRxFifo+0x40>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e006      	b.n	8003bce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d0f0      	beq.n	8003bae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	00030d40 	.word	0x00030d40

08003be0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0306 	and.w	r3, r3, #6
 8003c2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
 8003c36:	e00a      	b.n	8003c4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d002      	beq.n	8003c44 <USB_GetDevSpeed+0x32>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d102      	bne.n	8003c4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c44:	2302      	movs	r3, #2
 8003c46:	75fb      	strb	r3, [r7, #23]
 8003c48:	e001      	b.n	8003c4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c4a:	230f      	movs	r3, #15
 8003c4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d13a      	bne.n	8003cee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d155      	bne.n	8003d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	78db      	ldrb	r3, [r3, #3]
 8003cca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ccc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	059b      	lsls	r3, r3, #22
 8003cd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e036      	b.n	8003d5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11a      	bne.n	8003d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	78db      	ldrb	r3, [r3, #3]
 8003d40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d42:	430b      	orrs	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d161      	bne.n	8003e4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d9e:	d11f      	bne.n	8003de0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	0151      	lsls	r1, r2, #5
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	440a      	add	r2, r1
 8003db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e00:	4013      	ands	r3, r2
 8003e02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e24:	4013      	ands	r3, r2
 8003e26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	4619      	mov	r1, r3
 8003e44:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <USB_DeactivateEndpoint+0x1b0>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
 8003e4a:	e060      	b.n	8003f0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e62:	d11f      	bne.n	8003ea4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	0159      	lsls	r1, r3, #5
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	440b      	add	r3, r1
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	4619      	mov	r1, r3
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <USB_DeactivateEndpoint+0x1b4>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	ec337800 	.word	0xec337800
 8003f20:	eff37800 	.word	0xeff37800

08003f24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 815c 	bne.w	80041fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d132      	bne.n	8003fb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fac:	0cdb      	lsrs	r3, r3, #19
 8003fae:	04db      	lsls	r3, r3, #19
 8003fb0:	6113      	str	r3, [r2, #16]
 8003fb2:	e074      	b.n	800409e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fce:	0cdb      	lsrs	r3, r3, #19
 8003fd0:	04db      	lsls	r3, r3, #19
 8003fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ff2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6959      	ldr	r1, [r3, #20]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	440b      	add	r3, r1
 8004010:	1e59      	subs	r1, r3, #1
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	fbb1 f3f3 	udiv	r3, r1, r3
 800401a:	04d9      	lsls	r1, r3, #19
 800401c:	4b9d      	ldr	r3, [pc, #628]	; (8004294 <USB_EPStartXfer+0x370>)
 800401e:	400b      	ands	r3, r1
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	0148      	lsls	r0, r1, #5
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	4401      	add	r1, r0
 8004028:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800402c:	4313      	orrs	r3, r2
 800402e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004046:	69b9      	ldr	r1, [r7, #24]
 8004048:	0148      	lsls	r0, r1, #5
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	4401      	add	r1, r0
 800404e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004052:	4313      	orrs	r3, r2
 8004054:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	78db      	ldrb	r3, [r3, #3]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d11f      	bne.n	800409e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004078:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800407c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800409c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d14b      	bne.n	800413c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	78db      	ldrb	r3, [r3, #3]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d128      	bne.n	800411a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d110      	bne.n	80040fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	e00f      	b.n	800411a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	440a      	add	r2, r1
 8004130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004134:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e12f      	b.n	800439c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004156:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800415a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	78db      	ldrb	r3, [r3, #3]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d015      	beq.n	8004190 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8117 	beq.w	800439c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	69f9      	ldr	r1, [r7, #28]
 8004186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800418a:	4313      	orrs	r3, r2
 800418c:	634b      	str	r3, [r1, #52]	; 0x34
 800418e:	e105      	b.n	800439c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d110      	bne.n	80041c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e00f      	b.n	80041e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	68d9      	ldr	r1, [r3, #12]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	b298      	uxth	r0, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4603      	mov	r3, r0
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fa2b 	bl	8004652 <USB_WritePacket>
 80041fc:	e0ce      	b.n	800439c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004218:	0cdb      	lsrs	r3, r3, #19
 800421a:	04db      	lsls	r3, r3, #19
 800421c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800423c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004240:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d126      	bne.n	8004298 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004260:	69b9      	ldr	r1, [r7, #24]
 8004262:	0148      	lsls	r0, r1, #5
 8004264:	69f9      	ldr	r1, [r7, #28]
 8004266:	4401      	add	r1, r0
 8004268:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800426c:	4313      	orrs	r3, r2
 800426e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	0151      	lsls	r1, r2, #5
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	440a      	add	r2, r1
 8004286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800428a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800428e:	6113      	str	r3, [r2, #16]
 8004290:	e036      	b.n	8004300 <USB_EPStartXfer+0x3dc>
 8004292:	bf00      	nop
 8004294:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4413      	add	r3, r2
 80042a2:	1e5a      	subs	r2, r3, #1
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	8afb      	ldrh	r3, [r7, #22]
 80042be:	04d9      	lsls	r1, r3, #19
 80042c0:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <USB_EPStartXfer+0x484>)
 80042c2:	400b      	ands	r3, r1
 80042c4:	69b9      	ldr	r1, [r7, #24]
 80042c6:	0148      	lsls	r0, r1, #5
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	4401      	add	r1, r0
 80042cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042d0:	4313      	orrs	r3, r2
 80042d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	8af9      	ldrh	r1, [r7, #22]
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	0148      	lsls	r0, r1, #5
 80042f4:	69f9      	ldr	r1, [r7, #28]
 80042f6:	4401      	add	r1, r0
 80042f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042fc:	4313      	orrs	r3, r2
 80042fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10d      	bne.n	8004322 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	460a      	mov	r2, r1
 8004320:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	78db      	ldrb	r3, [r3, #3]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d128      	bne.n	800437c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d110      	bne.n	800435c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00f      	b.n	800437c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	0151      	lsls	r1, r2, #5
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	440a      	add	r2, r1
 8004372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800439a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	1ff80000 	.word	0x1ff80000

080043ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	f040 80cd 	bne.w	8004568 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d132      	bne.n	800443c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004418:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004434:	0cdb      	lsrs	r3, r3, #19
 8004436:	04db      	lsls	r3, r3, #19
 8004438:	6113      	str	r3, [r2, #16]
 800443a:	e04e      	b.n	80044da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004456:	0cdb      	lsrs	r3, r3, #19
 8004458:	04db      	lsls	r3, r3, #19
 800445a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004476:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800447a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800447e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d903      	bls.n	8004494 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ca:	6939      	ldr	r1, [r7, #16]
 80044cc:	0148      	lsls	r0, r1, #5
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	4401      	add	r1, r0
 80044d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044d6:	4313      	orrs	r3, r2
 80044d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d11e      	bne.n	800451e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	461a      	mov	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e092      	b.n	8004644 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004538:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800453c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d07e      	beq.n	8004644 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	2101      	movs	r1, #1
 8004558:	fa01 f303 	lsl.w	r3, r1, r3
 800455c:	6979      	ldr	r1, [r7, #20]
 800455e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004562:	4313      	orrs	r3, r2
 8004564:	634b      	str	r3, [r1, #52]	; 0x34
 8004566:	e06d      	b.n	8004644 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	0cdb      	lsrs	r3, r3, #19
 8004584:	04db      	lsls	r3, r3, #19
 8004586:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f2:	6939      	ldr	r1, [r7, #16]
 80045f4:	0148      	lsls	r0, r1, #5
 80045f6:	6979      	ldr	r1, [r7, #20]
 80045f8:	4401      	add	r1, r0
 80045fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045fe:	4313      	orrs	r3, r2
 8004600:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10d      	bne.n	8004624 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d009      	beq.n	8004624 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	68d9      	ldr	r1, [r3, #12]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	460a      	mov	r2, r1
 8004622:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004652:	b480      	push	{r7}
 8004654:	b089      	sub	sp, #36	; 0x24
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	4611      	mov	r1, r2
 800465e:	461a      	mov	r2, r3
 8004660:	460b      	mov	r3, r1
 8004662:	71fb      	strb	r3, [r7, #7]
 8004664:	4613      	mov	r3, r2
 8004666:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004670:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11a      	bne.n	80046ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004678:	88bb      	ldrh	r3, [r7, #4]
 800467a:	3303      	adds	r3, #3
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e00f      	b.n	80046a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	031a      	lsls	r2, r3, #12
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4413      	add	r3, r2
 800468e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004692:	461a      	mov	r2, r3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6013      	str	r3, [r2, #0]
      pSrc++;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3304      	adds	r3, #4
 800469e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	3301      	adds	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3eb      	bcc.n	8004686 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3724      	adds	r7, #36	; 0x24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	3303      	adds	r3, #3
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e00b      	b.n	80046f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	3304      	adds	r3, #4
 80046f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d3ef      	bcc.n	80046e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004700:	69fb      	ldr	r3, [r7, #28]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3724      	adds	r7, #36	; 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d12c      	bne.n	8004784 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	db12      	blt.n	8004762 <USB_EPSetStall+0x54>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00f      	beq.n	8004762 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004760:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e02b      	b.n	80047dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	db12      	blt.n	80047bc <USB_EPSetStall+0xae>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00f      	beq.n	80047bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d128      	bne.n	8004858 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004824:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	78db      	ldrb	r3, [r3, #3]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d003      	beq.n	8004836 <USB_EPClearStall+0x4c>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	78db      	ldrb	r3, [r3, #3]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d138      	bne.n	80048a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e027      	b.n	80048a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	78db      	ldrb	r3, [r3, #3]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d003      	beq.n	8004888 <USB_EPClearStall+0x9e>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	78db      	ldrb	r3, [r3, #3]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d10f      	bne.n	80048a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800491c:	f023 0303 	bic.w	r3, r3, #3
 8004920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004930:	f023 0302 	bic.w	r3, r3, #2
 8004934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004972:	f043 0302 	orr.w	r3, r3, #2
 8004976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4013      	ands	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4013      	ands	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	0c1b      	lsrs	r3, r3, #16
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	b29b      	uxth	r3, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a42:	68bb      	ldr	r3, [r7, #8]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	01db      	lsls	r3, r3, #7
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ae6:	f023 0307 	bic.w	r3, r3, #7
 8004aea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	333c      	adds	r3, #60	; 0x3c
 8004b26:	3304      	adds	r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <USB_EP0_OutStart+0xb8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d90a      	bls.n	8004b4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b44:	d101      	bne.n	8004b4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e037      	b.n	8004bba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b78:	f043 0318 	orr.w	r3, r3, #24
 8004b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d10f      	bne.n	8004bb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	4f54300a 	.word	0x4f54300a

08004bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <USB_CoreReset+0x64>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e01b      	b.n	8004c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	daf2      	bge.n	8004bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f043 0201 	orr.w	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <USB_CoreReset+0x64>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e006      	b.n	8004c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d0f0      	beq.n	8004c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	00030d40 	.word	0x00030d40

08004c34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c44:	f002 f8d6 	bl	8006df4 <malloc>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e066      	b.n	8004d2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	7c1b      	ldrb	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d119      	bne.n	8004ca2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c72:	2202      	movs	r2, #2
 8004c74:	2181      	movs	r1, #129	; 0x81
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f001 ff43 	bl	8006b02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c86:	2202      	movs	r2, #2
 8004c88:	2101      	movs	r1, #1
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 ff39 	bl	8006b02 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2210      	movs	r2, #16
 8004c9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004ca0:	e016      	b.n	8004cd0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ca2:	2340      	movs	r3, #64	; 0x40
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	2181      	movs	r1, #129	; 0x81
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 ff2a 	bl	8006b02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	2101      	movs	r1, #1
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 ff21 	bl	8006b02 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2210      	movs	r2, #16
 8004ccc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	2182      	movs	r1, #130	; 0x82
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 ff13 	bl	8006b02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	7c1b      	ldrb	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d10:	2101      	movs	r1, #1
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 ffe4 	bl	8006ce0 <USBD_LL_PrepareReceive>
 8004d18:	e007      	b.n	8004d2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	2101      	movs	r1, #1
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 ffdb 	bl	8006ce0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004d44:	2181      	movs	r1, #129	; 0x81
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f001 ff01 	bl	8006b4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004d52:	2101      	movs	r1, #1
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 fefa 	bl	8006b4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004d62:	2182      	movs	r1, #130	; 0x82
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f001 fef2 	bl	8006b4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00e      	beq.n	8004da2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d94:	4618      	mov	r0, r3
 8004d96:	f002 f835 	bl	8006e04 <free>
    pdev->pClassData = NULL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dbc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d03a      	beq.n	8004e4c <USBD_CDC_Setup+0xa0>
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	f040 8097 	bne.w	8004f0a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	88db      	ldrh	r3, [r3, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d029      	beq.n	8004e38 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da11      	bge.n	8004e12 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004dfa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	88d2      	ldrh	r2, [r2, #6]
 8004e00:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e02:	6939      	ldr	r1, [r7, #16]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	88db      	ldrh	r3, [r3, #6]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f001 fa6d 	bl	80062ea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004e10:	e082      	b.n	8004f18 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	785a      	ldrb	r2, [r3, #1]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	88db      	ldrh	r3, [r3, #6]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e28:	6939      	ldr	r1, [r7, #16]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	88db      	ldrh	r3, [r3, #6]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 fa86 	bl	8006342 <USBD_CtlPrepareRx>
    break;
 8004e36:	e06f      	b.n	8004f18 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	7850      	ldrb	r0, [r2, #1]
 8004e44:	2200      	movs	r2, #0
 8004e46:	6839      	ldr	r1, [r7, #0]
 8004e48:	4798      	blx	r3
    break;
 8004e4a:	e065      	b.n	8004f18 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	2b0b      	cmp	r3, #11
 8004e52:	d84f      	bhi.n	8004ef4 <USBD_CDC_Setup+0x148>
 8004e54:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <USBD_CDC_Setup+0xb0>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004e8d 	.word	0x08004e8d
 8004e60:	08004f03 	.word	0x08004f03
 8004e64:	08004ef5 	.word	0x08004ef5
 8004e68:	08004ef5 	.word	0x08004ef5
 8004e6c:	08004ef5 	.word	0x08004ef5
 8004e70:	08004ef5 	.word	0x08004ef5
 8004e74:	08004ef5 	.word	0x08004ef5
 8004e78:	08004ef5 	.word	0x08004ef5
 8004e7c:	08004ef5 	.word	0x08004ef5
 8004e80:	08004ef5 	.word	0x08004ef5
 8004e84:	08004eb5 	.word	0x08004eb5
 8004e88:	08004edd 	.word	0x08004edd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d107      	bne.n	8004ea6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 fa23 	bl	80062ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ea4:	e030      	b.n	8004f08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 f9ad 	bl	8006208 <USBD_CtlError>
        ret = USBD_FAIL;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb2:	e029      	b.n	8004f08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d107      	bne.n	8004ece <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ebe:	f107 030f 	add.w	r3, r7, #15
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 fa0f 	bl	80062ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ecc:	e01c      	b.n	8004f08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 f999 	bl	8006208 <USBD_CtlError>
        ret = USBD_FAIL;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eda:	e015      	b.n	8004f08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d00f      	beq.n	8004f06 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 f98d 	bl	8006208 <USBD_CtlError>
        ret = USBD_FAIL;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ef2:	e008      	b.n	8004f06 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 f986 	bl	8006208 <USBD_CtlError>
      ret = USBD_FAIL;
 8004efc:	2303      	movs	r3, #3
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e002      	b.n	8004f08 <USBD_CDC_Setup+0x15c>
      break;
 8004f02:	bf00      	nop
 8004f04:	e008      	b.n	8004f18 <USBD_CDC_Setup+0x16c>
      break;
 8004f06:	bf00      	nop
    }
    break;
 8004f08:	e006      	b.n	8004f18 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 f97b 	bl	8006208 <USBD_CtlError>
    ret = USBD_FAIL;
 8004f12:	2303      	movs	r3, #3
 8004f14:	75fb      	strb	r3, [r7, #23]
    break;
 8004f16:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop

08004f24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e049      	b.n	8004fda <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3318      	adds	r3, #24
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d029      	beq.n	8004fb8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3318      	adds	r3, #24
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	78f9      	ldrb	r1, [r7, #3]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	1a5b      	subs	r3, r3, r1
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4403      	add	r3, r0
 8004f84:	3344      	adds	r3, #68	; 0x44
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f8c:	fb03 f301 	mul.w	r3, r3, r1
 8004f90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d110      	bne.n	8004fb8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3318      	adds	r3, #24
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004faa:	78f9      	ldrb	r1, [r7, #3]
 8004fac:	2300      	movs	r3, #0
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 fe74 	bl	8006c9e <USBD_LL_Transmit>
 8004fb6:	e00f      	b.n	8004fd8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005000:	2303      	movs	r3, #3
 8005002:	e015      	b.n	8005030 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 fe8a 	bl	8006d22 <USBD_LL_GetRxDataSize>
 800500e:	4602      	mov	r2, r0
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800502a:	4611      	mov	r1, r2
 800502c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005046:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d015      	beq.n	800507e <USBD_CDC_EP0_RxReady+0x46>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005058:	2bff      	cmp	r3, #255	; 0xff
 800505a:	d010      	beq.n	800507e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800506a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005072:	b292      	uxth	r2, r2
 8005074:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22ff      	movs	r2, #255	; 0xff
 800507a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2243      	movs	r2, #67	; 0x43
 8005094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005096:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	20000094 	.word	0x20000094

080050a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2243      	movs	r2, #67	; 0x43
 80050b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80050b6:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	20000050 	.word	0x20000050

080050c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2243      	movs	r2, #67	; 0x43
 80050d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80050d6:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	200000d8 	.word	0x200000d8

080050e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	220a      	movs	r2, #10
 80050f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80050f6:	4b03      	ldr	r3, [pc, #12]	; (8005104 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	2000000c 	.word	0x2000000c

08005108 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005118:	2303      	movs	r3, #3
 800511a:	e004      	b.n	8005126 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005132:	b480      	push	{r7}
 8005134:	b087      	sub	sp, #28
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005144:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005174:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800519a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e016      	b.n	80051d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7c1b      	ldrb	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051bc:	2101      	movs	r1, #1
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 fd8e 	bl	8006ce0 <USBD_LL_PrepareReceive>
 80051c4:	e007      	b.n	80051d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051cc:	2340      	movs	r3, #64	; 0x40
 80051ce:	2101      	movs	r1, #1
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 fd85 	bl	8006ce0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e025      	b.n	8005244 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	79fa      	ldrb	r2, [r7, #7]
 8005236:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f001 fbfb 	bl	8006a34 <USBD_LL_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005242:	7dfb      	ldrb	r3, [r7, #23]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005260:	2303      	movs	r3, #3
 8005262:	e010      	b.n	8005286 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	f107 020e 	add.w	r2, r7, #14
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fc18 	bl	8006acc <USBD_LL_Start>
 800529c:	4603      	mov	r3, r0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80052c8:	2303      	movs	r3, #3
 80052ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	4611      	mov	r1, r2
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	4611      	mov	r1, r2
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
  }

  return USBD_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 ff2c 	bl	8006194 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2b01      	cmp	r3, #1
 800535e:	d00e      	beq.n	800537e <USBD_LL_SetupStage+0x5a>
 8005360:	2b01      	cmp	r3, #1
 8005362:	d302      	bcc.n	800536a <USBD_LL_SetupStage+0x46>
 8005364:	2b02      	cmp	r3, #2
 8005366:	d014      	beq.n	8005392 <USBD_LL_SetupStage+0x6e>
 8005368:	e01d      	b.n	80053a6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa18 	bl	80057a8 <USBD_StdDevReq>
 8005378:	4603      	mov	r3, r0
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e020      	b.n	80053c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa7c 	bl	8005884 <USBD_StdItfReq>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]
      break;
 8005390:	e016      	b.n	80053c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fab8 	bl	8005910 <USBD_StdEPReq>
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]
      break;
 80053a4:	e00c      	b.n	80053c0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 fbe9 	bl	8006b8c <USBD_LL_StallEP>
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
      break;
 80053be:	bf00      	nop
  }

  return ret;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	460b      	mov	r3, r1
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053d8:	7afb      	ldrb	r3, [r7, #11]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d137      	bne.n	800544e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d14a      	bne.n	8005486 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d913      	bls.n	8005424 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	4293      	cmp	r3, r2
 8005414:	bf28      	it	cs
 8005416:	4613      	movcs	r3, r2
 8005418:	461a      	mov	r2, r3
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 ffad 	bl	800637c <USBD_CtlContinueRx>
 8005422:	e030      	b.n	8005486 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005436:	2b03      	cmp	r3, #3
 8005438:	d105      	bne.n	8005446 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 ffa9 	bl	800639e <USBD_CtlSendStatus>
 800544c:	e01b      	b.n	8005486 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d013      	beq.n	8005482 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005460:	2b03      	cmp	r3, #3
 8005462:	d10e      	bne.n	8005482 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	7afa      	ldrb	r2, [r7, #11]
 800546e:	4611      	mov	r1, r2
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	4798      	blx	r3
 8005474:	4603      	mov	r3, r0
 8005476:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	e002      	b.n	8005488 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005482:	2303      	movs	r3, #3
 8005484:	e000      	b.n	8005488 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	460b      	mov	r3, r1
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d16a      	bne.n	800557a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3314      	adds	r3, #20
 80054a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d155      	bne.n	8005560 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d914      	bls.n	80054ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 ff22 	bl	8006320 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054dc:	2300      	movs	r3, #0
 80054de:	2200      	movs	r2, #0
 80054e0:	2100      	movs	r1, #0
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f001 fbfc 	bl	8006ce0 <USBD_LL_PrepareReceive>
 80054e8:	e03a      	b.n	8005560 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d11c      	bne.n	8005530 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054fe:	429a      	cmp	r2, r3
 8005500:	d316      	bcc.n	8005530 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800550c:	429a      	cmp	r2, r3
 800550e:	d20f      	bcs.n	8005530 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005510:	2200      	movs	r2, #0
 8005512:	2100      	movs	r1, #0
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 ff03 	bl	8006320 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005522:	2300      	movs	r3, #0
 8005524:	2200      	movs	r2, #0
 8005526:	2100      	movs	r1, #0
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f001 fbd9 	bl	8006ce0 <USBD_LL_PrepareReceive>
 800552e:	e017      	b.n	8005560 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005542:	2b03      	cmp	r3, #3
 8005544:	d105      	bne.n	8005552 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f001 fb19 	bl	8006b8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 ff32 	bl	80063c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d123      	bne.n	80055b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff fe9b 	bl	80052a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005578:	e01b      	b.n	80055b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800558c:	2b03      	cmp	r3, #3
 800558e:	d10e      	bne.n	80055ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	7afa      	ldrb	r2, [r7, #11]
 800559a:	4611      	mov	r1, r2
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	4798      	blx	r3
 80055a0:	4603      	mov	r3, r0
 80055a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	e002      	b.n	80055b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e000      	b.n	80055b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6852      	ldr	r2, [r2, #4]
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	4611      	mov	r1, r2
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	2200      	movs	r2, #0
 8005604:	2100      	movs	r1, #0
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fa7b 	bl	8006b02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	2200      	movs	r2, #0
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fa6d 	bl	8006b02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2240      	movs	r2, #64	; 0x40
 8005632:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2204      	movs	r2, #4
 8005676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005696:	2b04      	cmp	r3, #4
 8005698:	d105      	bne.n	80056a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d10b      	bne.n	80056de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d009      	beq.n	8005760 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6852      	ldr	r2, [r2, #4]
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	4611      	mov	r1, r2
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
  }

  return USBD_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3301      	adds	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005788:	8a3b      	ldrh	r3, [r7, #16]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	b21a      	sxth	r2, r3
 800578e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005792:	4313      	orrs	r3, r2
 8005794:	b21b      	sxth	r3, r3
 8005796:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005798:	89fb      	ldrh	r3, [r7, #14]
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d004      	beq.n	80057cc <USBD_StdDevReq+0x24>
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d002      	beq.n	80057cc <USBD_StdDevReq+0x24>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <USBD_StdDevReq+0x38>
 80057ca:	e050      	b.n	800586e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
 80057da:	4603      	mov	r3, r0
 80057dc:	73fb      	strb	r3, [r7, #15]
    break;
 80057de:	e04b      	b.n	8005878 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	2b09      	cmp	r3, #9
 80057e6:	d83c      	bhi.n	8005862 <USBD_StdDevReq+0xba>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <USBD_StdDevReq+0x48>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005845 	.word	0x08005845
 80057f4:	08005859 	.word	0x08005859
 80057f8:	08005863 	.word	0x08005863
 80057fc:	0800584f 	.word	0x0800584f
 8005800:	08005863 	.word	0x08005863
 8005804:	08005823 	.word	0x08005823
 8005808:	08005819 	.word	0x08005819
 800580c:	08005863 	.word	0x08005863
 8005810:	0800583b 	.word	0x0800583b
 8005814:	0800582d 	.word	0x0800582d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9ce 	bl	8005bbc <USBD_GetDescriptor>
      break;
 8005820:	e024      	b.n	800586c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fb33 	bl	8005e90 <USBD_SetAddress>
      break;
 800582a:	e01f      	b.n	800586c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb70 	bl	8005f14 <USBD_SetConfig>
 8005834:	4603      	mov	r3, r0
 8005836:	73fb      	strb	r3, [r7, #15]
      break;
 8005838:	e018      	b.n	800586c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fc0d 	bl	800605c <USBD_GetConfig>
      break;
 8005842:	e013      	b.n	800586c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fc3c 	bl	80060c4 <USBD_GetStatus>
      break;
 800584c:	e00e      	b.n	800586c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fc6a 	bl	800612a <USBD_SetFeature>
      break;
 8005856:	e009      	b.n	800586c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fc79 	bl	8006152 <USBD_ClrFeature>
      break;
 8005860:	e004      	b.n	800586c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fccf 	bl	8006208 <USBD_CtlError>
      break;
 800586a:	bf00      	nop
    }
    break;
 800586c:	e004      	b.n	8005878 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fcc9 	bl	8006208 <USBD_CtlError>
    break;
 8005876:	bf00      	nop
  }

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop

08005884 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800589a:	2b20      	cmp	r3, #32
 800589c:	d003      	beq.n	80058a6 <USBD_StdItfReq+0x22>
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d001      	beq.n	80058a6 <USBD_StdItfReq+0x22>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d12a      	bne.n	80058fc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ac:	3b01      	subs	r3, #1
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d81d      	bhi.n	80058ee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	889b      	ldrh	r3, [r3, #4]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d813      	bhi.n	80058e4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	88db      	ldrh	r3, [r3, #6]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d110      	bne.n	80058f8 <USBD_StdItfReq+0x74>
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fd5e 	bl	800639e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80058e2:	e009      	b.n	80058f8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fc8e 	bl	8006208 <USBD_CtlError>
      break;
 80058ec:	e004      	b.n	80058f8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fc89 	bl	8006208 <USBD_CtlError>
      break;
 80058f6:	e000      	b.n	80058fa <USBD_StdItfReq+0x76>
      break;
 80058f8:	bf00      	nop
    }
    break;
 80058fa:	e004      	b.n	8005906 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fc82 	bl	8006208 <USBD_CtlError>
    break;
 8005904:	bf00      	nop
  }

  return ret;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	889b      	ldrh	r3, [r3, #4]
 8005922:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800592c:	2b20      	cmp	r3, #32
 800592e:	d004      	beq.n	800593a <USBD_StdEPReq+0x2a>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d002      	beq.n	800593a <USBD_StdEPReq+0x2a>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <USBD_StdEPReq+0x3e>
 8005938:	e135      	b.n	8005ba6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]
    break;
 800594c:	e130      	b.n	8005bb0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d03e      	beq.n	80059d4 <USBD_StdEPReq+0xc4>
 8005956:	2b03      	cmp	r3, #3
 8005958:	d002      	beq.n	8005960 <USBD_StdEPReq+0x50>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d077      	beq.n	8005a4e <USBD_StdEPReq+0x13e>
 800595e:	e11c      	b.n	8005b9a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005966:	2b02      	cmp	r3, #2
 8005968:	d002      	beq.n	8005970 <USBD_StdEPReq+0x60>
 800596a:	2b03      	cmp	r3, #3
 800596c:	d015      	beq.n	800599a <USBD_StdEPReq+0x8a>
 800596e:	e02b      	b.n	80059c8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <USBD_StdEPReq+0x80>
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d009      	beq.n	8005990 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 f903 	bl	8006b8c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 f8ff 	bl	8006b8c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800598e:	e020      	b.n	80059d2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fc38 	bl	8006208 <USBD_CtlError>
        break;
 8005998:	e01b      	b.n	80059d2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	885b      	ldrh	r3, [r3, #2]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10e      	bne.n	80059c0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059a2:	7bbb      	ldrb	r3, [r7, #14]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <USBD_StdEPReq+0xb0>
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d008      	beq.n	80059c0 <USBD_StdEPReq+0xb0>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	88db      	ldrh	r3, [r3, #6]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 f8e6 	bl	8006b8c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fcec 	bl	800639e <USBD_CtlSendStatus>

        break;
 80059c6:	e004      	b.n	80059d2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fc1c 	bl	8006208 <USBD_CtlError>
        break;
 80059d0:	bf00      	nop
      }
      break;
 80059d2:	e0e7      	b.n	8005ba4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d002      	beq.n	80059e4 <USBD_StdEPReq+0xd4>
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d015      	beq.n	8005a0e <USBD_StdEPReq+0xfe>
 80059e2:	e02d      	b.n	8005a40 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <USBD_StdEPReq+0xf4>
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d009      	beq.n	8005a04 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80059f0:	7bbb      	ldrb	r3, [r7, #14]
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f8c9 	bl	8006b8c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059fa:	2180      	movs	r1, #128	; 0x80
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f8c5 	bl	8006b8c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a02:	e023      	b.n	8005a4c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fbfe 	bl	8006208 <USBD_CtlError>
        break;
 8005a0c:	e01e      	b.n	8005a4c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	885b      	ldrh	r3, [r3, #2]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d119      	bne.n	8005a4a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005a16:	7bbb      	ldrb	r3, [r7, #14]
 8005a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 f8d0 	bl	8006bca <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fcb7 	bl	800639e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4798      	blx	r3
        }
        break;
 8005a3e:	e004      	b.n	8005a4a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fbe0 	bl	8006208 <USBD_CtlError>
        break;
 8005a48:	e000      	b.n	8005a4c <USBD_StdEPReq+0x13c>
        break;
 8005a4a:	bf00      	nop
      }
      break;
 8005a4c:	e0aa      	b.n	8005ba4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d002      	beq.n	8005a5e <USBD_StdEPReq+0x14e>
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d032      	beq.n	8005ac2 <USBD_StdEPReq+0x1b2>
 8005a5c:	e097      	b.n	8005b8e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <USBD_StdEPReq+0x164>
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d004      	beq.n	8005a74 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fbcb 	bl	8006208 <USBD_CtlError>
          break;
 8005a72:	e091      	b.n	8005b98 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	da0b      	bge.n	8005a94 <USBD_StdEPReq+0x184>
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	3310      	adds	r3, #16
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	e00b      	b.n	8005aac <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3304      	adds	r3, #4
 8005aac:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fc15 	bl	80062ea <USBD_CtlSendData>
        break;
 8005ac0:	e06a      	b.n	8005b98 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da11      	bge.n	8005aee <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	f003 020f 	and.w	r2, r3, #15
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	3324      	adds	r3, #36	; 0x24
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d117      	bne.n	8005b14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb8e 	bl	8006208 <USBD_CtlError>
            break;
 8005aec:	e054      	b.n	8005b98 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005aee:	7bbb      	ldrb	r3, [r7, #14]
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fb7b 	bl	8006208 <USBD_CtlError>
            break;
 8005b12:	e041      	b.n	8005b98 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da0b      	bge.n	8005b34 <USBD_StdEPReq+0x224>
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	3310      	adds	r3, #16
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	e00b      	b.n	8005b4c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b4e:	7bbb      	ldrb	r3, [r7, #14]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <USBD_StdEPReq+0x24a>
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	2b80      	cmp	r3, #128	; 0x80
 8005b58:	d103      	bne.n	8005b62 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e00e      	b.n	8005b80 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b62:	7bbb      	ldrb	r3, [r7, #14]
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 f84e 	bl	8006c08 <USBD_LL_IsStallEP>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2201      	movs	r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e002      	b.n	8005b80 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2202      	movs	r2, #2
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fbaf 	bl	80062ea <USBD_CtlSendData>
          break;
 8005b8c:	e004      	b.n	8005b98 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fb39 	bl	8006208 <USBD_CtlError>
        break;
 8005b96:	bf00      	nop
      }
      break;
 8005b98:	e004      	b.n	8005ba4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fb33 	bl	8006208 <USBD_CtlError>
      break;
 8005ba2:	bf00      	nop
    }
    break;
 8005ba4:	e004      	b.n	8005bb0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fb2d 	bl	8006208 <USBD_CtlError>
    break;
 8005bae:	bf00      	nop
  }

  return ret;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	885b      	ldrh	r3, [r3, #2]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	2b06      	cmp	r3, #6
 8005bde:	f200 8128 	bhi.w	8005e32 <USBD_GetDescriptor+0x276>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <USBD_GetDescriptor+0x2c>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c05 	.word	0x08005c05
 8005bec:	08005c1d 	.word	0x08005c1d
 8005bf0:	08005c5d 	.word	0x08005c5d
 8005bf4:	08005e33 	.word	0x08005e33
 8005bf8:	08005e33 	.word	0x08005e33
 8005bfc:	08005dd3 	.word	0x08005dd3
 8005c00:	08005dff 	.word	0x08005dff
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	7c12      	ldrb	r2, [r2, #16]
 8005c10:	f107 0108 	add.w	r1, r7, #8
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	60f8      	str	r0, [r7, #12]
    break;
 8005c1a:	e112      	b.n	8005e42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	7c1b      	ldrb	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10d      	bne.n	8005c40 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	f107 0208 	add.w	r2, r7, #8
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
 8005c34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005c3e:	e100      	b.n	8005e42 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	f107 0208 	add.w	r2, r7, #8
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	2202      	movs	r2, #2
 8005c58:	701a      	strb	r2, [r3, #0]
    break;
 8005c5a:	e0f2      	b.n	8005e42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	885b      	ldrh	r3, [r3, #2]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	f200 80ac 	bhi.w	8005dc0 <USBD_GetDescriptor+0x204>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <USBD_GetDescriptor+0xb4>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c89 	.word	0x08005c89
 8005c74:	08005cbd 	.word	0x08005cbd
 8005c78:	08005cf1 	.word	0x08005cf1
 8005c7c:	08005d25 	.word	0x08005d25
 8005c80:	08005d59 	.word	0x08005d59
 8005c84:	08005d8d 	.word	0x08005d8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	7c12      	ldrb	r2, [r2, #16]
 8005ca0:	f107 0108 	add.w	r1, r7, #8
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
 8005ca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005caa:	e091      	b.n	8005dd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 faaa 	bl	8006208 <USBD_CtlError>
        err++;
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8005cba:	e089      	b.n	8005dd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	7c12      	ldrb	r2, [r2, #16]
 8005cd4:	f107 0108 	add.w	r1, r7, #8
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cde:	e077      	b.n	8005dd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa90 	bl	8006208 <USBD_CtlError>
        err++;
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
 8005cea:	3301      	adds	r3, #1
 8005cec:	72fb      	strb	r3, [r7, #11]
      break;
 8005cee:	e06f      	b.n	8005dd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	7c12      	ldrb	r2, [r2, #16]
 8005d08:	f107 0108 	add.w	r1, r7, #8
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4798      	blx	r3
 8005d10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d12:	e05d      	b.n	8005dd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa76 	bl	8006208 <USBD_CtlError>
        err++;
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	72fb      	strb	r3, [r7, #11]
      break;
 8005d22:	e055      	b.n	8005dd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	7c12      	ldrb	r2, [r2, #16]
 8005d3c:	f107 0108 	add.w	r1, r7, #8
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
 8005d44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d46:	e043      	b.n	8005dd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa5c 	bl	8006208 <USBD_CtlError>
        err++;
 8005d50:	7afb      	ldrb	r3, [r7, #11]
 8005d52:	3301      	adds	r3, #1
 8005d54:	72fb      	strb	r3, [r7, #11]
      break;
 8005d56:	e03b      	b.n	8005dd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	7c12      	ldrb	r2, [r2, #16]
 8005d70:	f107 0108 	add.w	r1, r7, #8
 8005d74:	4610      	mov	r0, r2
 8005d76:	4798      	blx	r3
 8005d78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d7a:	e029      	b.n	8005dd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa42 	bl	8006208 <USBD_CtlError>
        err++;
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	3301      	adds	r3, #1
 8005d88:	72fb      	strb	r3, [r7, #11]
      break;
 8005d8a:	e021      	b.n	8005dd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	7c12      	ldrb	r2, [r2, #16]
 8005da4:	f107 0108 	add.w	r1, r7, #8
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
 8005dac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dae:	e00f      	b.n	8005dd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa28 	bl	8006208 <USBD_CtlError>
        err++;
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	72fb      	strb	r3, [r7, #11]
      break;
 8005dbe:	e007      	b.n	8005dd0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa20 	bl	8006208 <USBD_CtlError>
      err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005dce:	bf00      	nop
    }
    break;
 8005dd0:	e037      	b.n	8005e42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	7c1b      	ldrb	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de2:	f107 0208 	add.w	r2, r7, #8
 8005de6:	4610      	mov	r0, r2
 8005de8:	4798      	blx	r3
 8005dea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005dec:	e029      	b.n	8005e42 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa09 	bl	8006208 <USBD_CtlError>
      err++;
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	72fb      	strb	r3, [r7, #11]
    break;
 8005dfc:	e021      	b.n	8005e42 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7c1b      	ldrb	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10d      	bne.n	8005e22 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	f107 0208 	add.w	r2, r7, #8
 8005e12:	4610      	mov	r0, r2
 8005e14:	4798      	blx	r3
 8005e16:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	2207      	movs	r2, #7
 8005e1e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e20:	e00f      	b.n	8005e42 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f9ef 	bl	8006208 <USBD_CtlError>
      err++;
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	72fb      	strb	r3, [r7, #11]
    break;
 8005e30:	e007      	b.n	8005e42 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f9e7 	bl	8006208 <USBD_CtlError>
    err++;
 8005e3a:	7afb      	ldrb	r3, [r7, #11]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	72fb      	strb	r3, [r7, #11]
    break;
 8005e40:	bf00      	nop
  }

  if (err != 0U)
 8005e42:	7afb      	ldrb	r3, [r7, #11]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11e      	bne.n	8005e86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	88db      	ldrh	r3, [r3, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005e50:	893b      	ldrh	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	88da      	ldrh	r2, [r3, #6]
 8005e5a:	893b      	ldrh	r3, [r7, #8]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bf28      	it	cs
 8005e60:	4613      	movcs	r3, r2
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e66:	893b      	ldrh	r3, [r7, #8]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fa3c 	bl	80062ea <USBD_CtlSendData>
 8005e72:	e009      	b.n	8005e88 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f9c6 	bl	8006208 <USBD_CtlError>
 8005e7c:	e004      	b.n	8005e88 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa8d 	bl	800639e <USBD_CtlSendStatus>
 8005e84:	e000      	b.n	8005e88 <USBD_GetDescriptor+0x2cc>
    return;
 8005e86:	bf00      	nop
    }
  }
}
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop

08005e90 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	889b      	ldrh	r3, [r3, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d130      	bne.n	8005f04 <USBD_SetAddress+0x74>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	88db      	ldrh	r3, [r3, #6]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d12c      	bne.n	8005f04 <USBD_SetAddress+0x74>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	885b      	ldrh	r3, [r3, #2]
 8005eae:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb0:	d828      	bhi.n	8005f04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	885b      	ldrh	r3, [r3, #2]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ebc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d104      	bne.n	8005ed2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f99c 	bl	8006208 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed0:	e01c      	b.n	8005f0c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 febe 	bl	8006c60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fa5a 	bl	800639e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef8:	e008      	b.n	8005f0c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f02:	e003      	b.n	8005f0c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f97e 	bl	8006208 <USBD_CtlError>
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	4b4b      	ldr	r3, [pc, #300]	; (8006058 <USBD_SetConfig+0x144>)
 8005f2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f2c:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <USBD_SetConfig+0x144>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d905      	bls.n	8005f40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f966 	bl	8006208 <USBD_CtlError>
    return USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e087      	b.n	8006050 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d002      	beq.n	8005f50 <USBD_SetConfig+0x3c>
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d025      	beq.n	8005f9a <USBD_SetConfig+0x86>
 8005f4e:	e071      	b.n	8006034 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005f50:	4b41      	ldr	r3, [pc, #260]	; (8006058 <USBD_SetConfig+0x144>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01c      	beq.n	8005f92 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005f58:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <USBD_SetConfig+0x144>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f62:	4b3d      	ldr	r3, [pc, #244]	; (8006058 <USBD_SetConfig+0x144>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff f9a7 	bl	80052bc <USBD_SetClassConfig>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f944 	bl	8006208 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005f80:	e065      	b.n	800604e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa0b 	bl	800639e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005f90:	e05d      	b.n	800604e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa03 	bl	800639e <USBD_CtlSendStatus>
    break;
 8005f98:	e059      	b.n	800604e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005f9a:	4b2f      	ldr	r3, [pc, #188]	; (8006058 <USBD_SetConfig+0x144>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d112      	bne.n	8005fc8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005faa:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <USBD_SetConfig+0x144>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <USBD_SetConfig+0x144>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff f99a 	bl	80052f4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9ec 	bl	800639e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005fc6:	e042      	b.n	800604e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005fc8:	4b23      	ldr	r3, [pc, #140]	; (8006058 <USBD_SetConfig+0x144>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d02a      	beq.n	800602c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff f988 	bl	80052f4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005fe4:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <USBD_SetConfig+0x144>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fee:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <USBD_SetConfig+0x144>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff f961 	bl	80052bc <USBD_SetClassConfig>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f8fe 	bl	8006208 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff f96d 	bl	80052f4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006022:	e014      	b.n	800604e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9ba 	bl	800639e <USBD_CtlSendStatus>
    break;
 800602a:	e010      	b.n	800604e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f9b6 	bl	800639e <USBD_CtlSendStatus>
    break;
 8006032:	e00c      	b.n	800604e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8e6 	bl	8006208 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <USBD_SetConfig+0x144>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff f956 	bl	80052f4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006048:	2303      	movs	r3, #3
 800604a:	73fb      	strb	r3, [r7, #15]
    break;
 800604c:	bf00      	nop
  }

  return ret;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000244 	.word	0x20000244

0800605c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	88db      	ldrh	r3, [r3, #6]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d004      	beq.n	8006078 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8c9 	bl	8006208 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006076:	e021      	b.n	80060bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607e:	2b01      	cmp	r3, #1
 8006080:	db17      	blt.n	80060b2 <USBD_GetConfig+0x56>
 8006082:	2b02      	cmp	r3, #2
 8006084:	dd02      	ble.n	800608c <USBD_GetConfig+0x30>
 8006086:	2b03      	cmp	r3, #3
 8006088:	d00b      	beq.n	80060a2 <USBD_GetConfig+0x46>
 800608a:	e012      	b.n	80060b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3308      	adds	r3, #8
 8006096:	2201      	movs	r2, #1
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f925 	bl	80062ea <USBD_CtlSendData>
      break;
 80060a0:	e00c      	b.n	80060bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3304      	adds	r3, #4
 80060a6:	2201      	movs	r2, #1
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f91d 	bl	80062ea <USBD_CtlSendData>
      break;
 80060b0:	e004      	b.n	80060bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8a7 	bl	8006208 <USBD_CtlError>
      break;
 80060ba:	bf00      	nop
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d4:	3b01      	subs	r3, #1
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d81e      	bhi.n	8006118 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	88db      	ldrh	r3, [r3, #6]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d004      	beq.n	80060ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f88f 	bl	8006208 <USBD_CtlError>
      break;
 80060ea:	e01a      	b.n	8006122 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f043 0202 	orr.w	r2, r3, #2
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	330c      	adds	r3, #12
 800610c:	2202      	movs	r2, #2
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f8ea 	bl	80062ea <USBD_CtlSendData>
    break;
 8006116:	e004      	b.n	8006122 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f874 	bl	8006208 <USBD_CtlError>
    break;
 8006120:	bf00      	nop
  }
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d106      	bne.n	800614a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f92a 	bl	800639e <USBD_CtlSendStatus>
  }
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006162:	3b01      	subs	r3, #1
 8006164:	2b02      	cmp	r3, #2
 8006166:	d80b      	bhi.n	8006180 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	885b      	ldrh	r3, [r3, #2]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d10c      	bne.n	800618a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f910 	bl	800639e <USBD_CtlSendStatus>
      }
      break;
 800617e:	e004      	b.n	800618a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f840 	bl	8006208 <USBD_CtlError>
      break;
 8006188:	e000      	b.n	800618c <USBD_ClrFeature+0x3a>
      break;
 800618a:	bf00      	nop
  }
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fad3 	bl	800576a <SWAPBYTE>
 80061c4:	4603      	mov	r3, r0
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fac6 	bl	800576a <SWAPBYTE>
 80061de:	4603      	mov	r3, r0
 80061e0:	461a      	mov	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3301      	adds	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7ff fab9 	bl	800576a <SWAPBYTE>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	80da      	strh	r2, [r3, #6]
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006212:	2180      	movs	r1, #128	; 0x80
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fcb9 	bl	8006b8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800621a:	2100      	movs	r1, #0
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fcb5 	bl	8006b8c <USBD_LL_StallEP>
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d036      	beq.n	80062ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006244:	6938      	ldr	r0, [r7, #16]
 8006246:	f000 f836 	bl	80062b6 <USBD_GetLen>
 800624a:	4603      	mov	r3, r0
 800624c:	3301      	adds	r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	7812      	ldrb	r2, [r2, #0]
 8006262:	701a      	strb	r2, [r3, #0]
  idx++;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	3301      	adds	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	4413      	add	r3, r2
 8006270:	2203      	movs	r2, #3
 8006272:	701a      	strb	r2, [r3, #0]
  idx++;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	3301      	adds	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800627a:	e013      	b.n	80062a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	7812      	ldrb	r2, [r2, #0]
 8006286:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3301      	adds	r3, #1
 800628c:	613b      	str	r3, [r7, #16]
    idx++;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	3301      	adds	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4413      	add	r3, r2
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
    idx++;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	3301      	adds	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e7      	bne.n	800627c <USBD_GetString+0x52>
 80062ac:	e000      	b.n	80062b0 <USBD_GetString+0x86>
    return;
 80062ae:	bf00      	nop
  }
}
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80062c6:	e005      	b.n	80062d4 <USBD_GetLen+0x1e>
  {
    len++;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	3301      	adds	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f5      	bne.n	80062c8 <USBD_GetLen+0x12>
  }

  return len;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fcc4 	bl	8006c9e <USBD_LL_Transmit>

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	2100      	movs	r1, #0
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fcb3 	bl	8006c9e <USBD_LL_Transmit>

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2203      	movs	r2, #3
 8006352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	2100      	movs	r1, #0
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fcb7 	bl	8006ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	2100      	movs	r1, #0
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fca6 	bl	8006ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2204      	movs	r2, #4
 80063aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063ae:	2300      	movs	r3, #0
 80063b0:	2200      	movs	r2, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fc72 	bl	8006c9e <USBD_LL_Transmit>

  return USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2205      	movs	r2, #5
 80063d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063d4:	2300      	movs	r3, #0
 80063d6:	2200      	movs	r2, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fc80 	bl	8006ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80063f0:	2200      	movs	r2, #0
 80063f2:	4912      	ldr	r1, [pc, #72]	; (800643c <MX_USB_DEVICE_Init+0x50>)
 80063f4:	4812      	ldr	r0, [pc, #72]	; (8006440 <MX_USB_DEVICE_Init+0x54>)
 80063f6:	f7fe fef3 	bl	80051e0 <USBD_Init>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006400:	f7fa fa10 	bl	8000824 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006404:	490f      	ldr	r1, [pc, #60]	; (8006444 <MX_USB_DEVICE_Init+0x58>)
 8006406:	480e      	ldr	r0, [pc, #56]	; (8006440 <MX_USB_DEVICE_Init+0x54>)
 8006408:	f7fe ff20 	bl	800524c <USBD_RegisterClass>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006412:	f7fa fa07 	bl	8000824 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006416:	490c      	ldr	r1, [pc, #48]	; (8006448 <MX_USB_DEVICE_Init+0x5c>)
 8006418:	4809      	ldr	r0, [pc, #36]	; (8006440 <MX_USB_DEVICE_Init+0x54>)
 800641a:	f7fe fe75 	bl	8005108 <USBD_CDC_RegisterInterface>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006424:	f7fa f9fe 	bl	8000824 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006428:	4805      	ldr	r0, [pc, #20]	; (8006440 <MX_USB_DEVICE_Init+0x54>)
 800642a:	f7fe ff30 	bl	800528e <USBD_Start>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006434:	f7fa f9f6 	bl	8000824 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006438:	bf00      	nop
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000130 	.word	0x20000130
 8006440:	20000254 	.word	0x20000254
 8006444:	20000018 	.word	0x20000018
 8006448:	2000011c 	.word	0x2000011c

0800644c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006450:	2200      	movs	r2, #0
 8006452:	4905      	ldr	r1, [pc, #20]	; (8006468 <CDC_Init_FS+0x1c>)
 8006454:	4805      	ldr	r0, [pc, #20]	; (800646c <CDC_Init_FS+0x20>)
 8006456:	f7fe fe6c 	bl	8005132 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800645a:	4905      	ldr	r1, [pc, #20]	; (8006470 <CDC_Init_FS+0x24>)
 800645c:	4803      	ldr	r0, [pc, #12]	; (800646c <CDC_Init_FS+0x20>)
 800645e:	f7fe fe81 	bl	8005164 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006462:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006464:	4618      	mov	r0, r3
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20000d24 	.word	0x20000d24
 800646c:	20000254 	.word	0x20000254
 8006470:	20000524 	.word	0x20000524

08006474 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006478:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800647a:	4618      	mov	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	71fb      	strb	r3, [r7, #7]
 8006490:	4613      	mov	r3, r2
 8006492:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b23      	cmp	r3, #35	; 0x23
 8006498:	d84a      	bhi.n	8006530 <CDC_Control_FS+0xac>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <CDC_Control_FS+0x1c>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	08006531 	.word	0x08006531
 80064a4:	08006531 	.word	0x08006531
 80064a8:	08006531 	.word	0x08006531
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006531 	.word	0x08006531
 80064b4:	08006531 	.word	0x08006531
 80064b8:	08006531 	.word	0x08006531
 80064bc:	08006531 	.word	0x08006531
 80064c0:	08006531 	.word	0x08006531
 80064c4:	08006531 	.word	0x08006531
 80064c8:	08006531 	.word	0x08006531
 80064cc:	08006531 	.word	0x08006531
 80064d0:	08006531 	.word	0x08006531
 80064d4:	08006531 	.word	0x08006531
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006531 	.word	0x08006531
 80064e0:	08006531 	.word	0x08006531
 80064e4:	08006531 	.word	0x08006531
 80064e8:	08006531 	.word	0x08006531
 80064ec:	08006531 	.word	0x08006531
 80064f0:	08006531 	.word	0x08006531
 80064f4:	08006531 	.word	0x08006531
 80064f8:	08006531 	.word	0x08006531
 80064fc:	08006531 	.word	0x08006531
 8006500:	08006531 	.word	0x08006531
 8006504:	08006531 	.word	0x08006531
 8006508:	08006531 	.word	0x08006531
 800650c:	08006531 	.word	0x08006531
 8006510:	08006531 	.word	0x08006531
 8006514:	08006531 	.word	0x08006531
 8006518:	08006531 	.word	0x08006531
 800651c:	08006531 	.word	0x08006531
 8006520:	08006531 	.word	0x08006531
 8006524:	08006531 	.word	0x08006531
 8006528:	08006531 	.word	0x08006531
 800652c:	08006531 	.word	0x08006531
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006530:	bf00      	nop
  }

  return (USBD_OK);
 8006532:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4805      	ldr	r0, [pc, #20]	; (8006564 <CDC_Receive_FS+0x24>)
 800654e:	f7fe fe09 	bl	8005164 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006552:	4804      	ldr	r0, [pc, #16]	; (8006564 <CDC_Receive_FS+0x24>)
 8006554:	f7fe fe1a 	bl	800518c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006558:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000254 	.word	0x20000254

08006568 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4613      	mov	r3, r2
 8006574:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800657a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800657e:	4618      	mov	r0, r3
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
	...

0800658c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	6039      	str	r1, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2212      	movs	r2, #18
 800659c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800659e:	4b03      	ldr	r3, [pc, #12]	; (80065ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	2000014c 	.word	0x2000014c

080065b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2204      	movs	r2, #4
 80065c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065c2:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	20000160 	.word	0x20000160

080065d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	4603      	mov	r3, r0
 80065dc:	6039      	str	r1, [r7, #0]
 80065de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4907      	ldr	r1, [pc, #28]	; (8006608 <USBD_FS_ProductStrDescriptor+0x34>)
 80065ea:	4808      	ldr	r0, [pc, #32]	; (800660c <USBD_FS_ProductStrDescriptor+0x38>)
 80065ec:	f7ff fe1d 	bl	800622a <USBD_GetString>
 80065f0:	e004      	b.n	80065fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	4904      	ldr	r1, [pc, #16]	; (8006608 <USBD_FS_ProductStrDescriptor+0x34>)
 80065f6:	4805      	ldr	r0, [pc, #20]	; (800660c <USBD_FS_ProductStrDescriptor+0x38>)
 80065f8:	f7ff fe17 	bl	800622a <USBD_GetString>
  }
  return USBD_StrDesc;
 80065fc:	4b02      	ldr	r3, [pc, #8]	; (8006608 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20001524 	.word	0x20001524
 800660c:	08006fb0 	.word	0x08006fb0

08006610 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	6039      	str	r1, [r7, #0]
 800661a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	4904      	ldr	r1, [pc, #16]	; (8006630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006620:	4804      	ldr	r0, [pc, #16]	; (8006634 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006622:	f7ff fe02 	bl	800622a <USBD_GetString>
  return USBD_StrDesc;
 8006626:	4b02      	ldr	r3, [pc, #8]	; (8006630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	20001524 	.word	0x20001524
 8006634:	08006fc8 	.word	0x08006fc8

08006638 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	221a      	movs	r2, #26
 8006648:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800664a:	f000 f843 	bl	80066d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800664e:	4b02      	ldr	r3, [pc, #8]	; (8006658 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000164 	.word	0x20000164

0800665c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	6039      	str	r1, [r7, #0]
 8006666:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d105      	bne.n	800667a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	4907      	ldr	r1, [pc, #28]	; (8006690 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006672:	4808      	ldr	r0, [pc, #32]	; (8006694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006674:	f7ff fdd9 	bl	800622a <USBD_GetString>
 8006678:	e004      	b.n	8006684 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	4904      	ldr	r1, [pc, #16]	; (8006690 <USBD_FS_ConfigStrDescriptor+0x34>)
 800667e:	4805      	ldr	r0, [pc, #20]	; (8006694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006680:	f7ff fdd3 	bl	800622a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20001524 	.word	0x20001524
 8006694:	08006fdc 	.word	0x08006fdc

08006698 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	6039      	str	r1, [r7, #0]
 80066a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	4907      	ldr	r1, [pc, #28]	; (80066cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066ae:	4808      	ldr	r0, [pc, #32]	; (80066d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066b0:	f7ff fdbb 	bl	800622a <USBD_GetString>
 80066b4:	e004      	b.n	80066c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4904      	ldr	r1, [pc, #16]	; (80066cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066ba:	4805      	ldr	r0, [pc, #20]	; (80066d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066bc:	f7ff fdb5 	bl	800622a <USBD_GetString>
  }
  return USBD_StrDesc;
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20001524 	.word	0x20001524
 80066d0:	08006fe8 	.word	0x08006fe8

080066d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80066da:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <Get_SerialNum+0x44>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <Get_SerialNum+0x48>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80066e6:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <Get_SerialNum+0x4c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80066fa:	2208      	movs	r2, #8
 80066fc:	4909      	ldr	r1, [pc, #36]	; (8006724 <Get_SerialNum+0x50>)
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f814 	bl	800672c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006704:	2204      	movs	r2, #4
 8006706:	4908      	ldr	r1, [pc, #32]	; (8006728 <Get_SerialNum+0x54>)
 8006708:	68b8      	ldr	r0, [r7, #8]
 800670a:	f000 f80f 	bl	800672c <IntToUnicode>
  }
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	1fff7a10 	.word	0x1fff7a10
 800671c:	1fff7a14 	.word	0x1fff7a14
 8006720:	1fff7a18 	.word	0x1fff7a18
 8006724:	20000166 	.word	0x20000166
 8006728:	20000176 	.word	0x20000176

0800672c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
 8006742:	e027      	b.n	8006794 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	0f1b      	lsrs	r3, r3, #28
 8006748:	2b09      	cmp	r3, #9
 800674a:	d80b      	bhi.n	8006764 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	0f1b      	lsrs	r3, r3, #28
 8006750:	b2da      	uxtb	r2, r3
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	4619      	mov	r1, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	440b      	add	r3, r1
 800675c:	3230      	adds	r2, #48	; 0x30
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e00a      	b.n	800677a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	0f1b      	lsrs	r3, r3, #28
 8006768:	b2da      	uxtb	r2, r3
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4619      	mov	r1, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	440b      	add	r3, r1
 8006774:	3237      	adds	r2, #55	; 0x37
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	3301      	adds	r3, #1
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	4413      	add	r3, r2
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	3301      	adds	r3, #1
 8006792:	75fb      	strb	r3, [r7, #23]
 8006794:	7dfa      	ldrb	r2, [r7, #23]
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	429a      	cmp	r2, r3
 800679a:	d3d3      	bcc.n	8006744 <IntToUnicode+0x18>
  }
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067b0:	f107 0314 	add.w	r3, r7, #20
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	609a      	str	r2, [r3, #8]
 80067bc:	60da      	str	r2, [r3, #12]
 80067be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c8:	d13a      	bne.n	8006840 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	6313      	str	r3, [r2, #48]	; 0x30
 80067da:	4b1b      	ldr	r3, [pc, #108]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80067e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80067ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ec:	2302      	movs	r3, #2
 80067ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067f4:	2303      	movs	r3, #3
 80067f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80067f8:	230a      	movs	r3, #10
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067fc:	f107 0314 	add.w	r3, r7, #20
 8006800:	4619      	mov	r1, r3
 8006802:	4812      	ldr	r0, [pc, #72]	; (800684c <HAL_PCD_MspInit+0xa4>)
 8006804:	f7fa fad2 	bl	8000dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 800680a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680c:	4a0e      	ldr	r2, [pc, #56]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	6353      	str	r3, [r2, #52]	; 0x34
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 800681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681c:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 800681e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006822:	6453      	str	r3, [r2, #68]	; 0x44
 8006824:	4b08      	ldr	r3, [pc, #32]	; (8006848 <HAL_PCD_MspInit+0xa0>)
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006830:	2200      	movs	r2, #0
 8006832:	2100      	movs	r1, #0
 8006834:	2043      	movs	r0, #67	; 0x43
 8006836:	f7fa fa82 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800683a:	2043      	movs	r0, #67	; 0x43
 800683c:	f7fa fa9b 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006840:	bf00      	nop
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40023800 	.word	0x40023800
 800684c:	40020000 	.word	0x40020000

08006850 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7fe fd5c 	bl	8005324 <USBD_LL_SetupStage>
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006886:	78fa      	ldrb	r2, [r7, #3]
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	4619      	mov	r1, r3
 800689e:	f7fe fd94 	bl	80053ca <USBD_LL_DataOutStage>
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80068bc:	78fa      	ldrb	r2, [r7, #3]
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	3348      	adds	r3, #72	; 0x48
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	4619      	mov	r1, r3
 80068d2:	f7fe fddd 	bl	8005490 <USBD_LL_DataInStage>
}
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fee1 	bl	80056b4 <USBD_LL_SOF>
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006902:	2301      	movs	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
 8006912:	e008      	b.n	8006926 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d102      	bne.n	8006922 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
 8006920:	e001      	b.n	8006926 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006922:	f7f9 ff7f 	bl	8000824 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fe84 	bl	800563e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fe3d 	bl	80055bc <USBD_LL_Reset>
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fe7f 	bl	800565e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006972:	f043 0301 	orr.w	r3, r3, #1
 8006976:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <HAL_PCD_SuspendCallback+0x48>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	4a03      	ldr	r2, [pc, #12]	; (8006994 <HAL_PCD_SuspendCallback+0x48>)
 8006986:	f043 0306 	orr.w	r3, r3, #6
 800698a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000ed00 	.word	0xe000ed00

08006998 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fe6e 	bl	8005688 <USBD_LL_Resume>
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fe99 	bl	8005702 <USBD_LL_IsoOUTIncomplete>
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fe7a 	bl	80056e8 <USBD_LL_IsoINIncomplete>
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fe86 	bl	800571c <USBD_LL_DevConnected>
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fe83 	bl	8005732 <USBD_LL_DevDisconnected>
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d13c      	bne.n	8006abe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a54:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006a5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a5e:	2204      	movs	r2, #4
 8006a60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006a62:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a64:	2202      	movs	r2, #2
 8006a66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a6e:	4b16      	ldr	r3, [pc, #88]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a70:	2202      	movs	r2, #2
 8006a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006a74:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006a80:	4b11      	ldr	r3, [pc, #68]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006a86:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a92:	480d      	ldr	r0, [pc, #52]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006a94:	f7fa fb3d 	bl	8001112 <HAL_PCD_Init>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a9e:	f7f9 fec1 	bl	8000824 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006aa2:	2180      	movs	r1, #128	; 0x80
 8006aa4:	4808      	ldr	r0, [pc, #32]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006aa6:	f7fb fc9a 	bl	80023de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006aaa:	2240      	movs	r2, #64	; 0x40
 8006aac:	2100      	movs	r1, #0
 8006aae:	4806      	ldr	r0, [pc, #24]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006ab0:	f7fb fc4e 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4803      	ldr	r0, [pc, #12]	; (8006ac8 <USBD_LL_Init+0x94>)
 8006aba:	f7fb fc49 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20001724 	.word	0x20001724

08006acc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fa fc32 	bl	800134c <HAL_PCD_Start>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f92a 	bl	8006d48 <USBD_Get_USB_Status>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	4608      	mov	r0, r1
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4603      	mov	r3, r0
 8006b12:	70fb      	strb	r3, [r7, #3]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70bb      	strb	r3, [r7, #2]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b2a:	78bb      	ldrb	r3, [r7, #2]
 8006b2c:	883a      	ldrh	r2, [r7, #0]
 8006b2e:	78f9      	ldrb	r1, [r7, #3]
 8006b30:	f7fb f816 	bl	8001b60 <HAL_PCD_EP_Open>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f904 	bl	8006d48 <USBD_Get_USB_Status>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b68:	78fa      	ldrb	r2, [r7, #3]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fb f85f 	bl	8001c30 <HAL_PCD_EP_Close>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 f8e5 	bl	8006d48 <USBD_Get_USB_Status>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ba6:	78fa      	ldrb	r2, [r7, #3]
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fb f937 	bl	8001e1e <HAL_PCD_EP_SetStall>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f8c6 	bl	8006d48 <USBD_Get_USB_Status>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	4611      	mov	r1, r2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fb f97c 	bl	8001ee6 <HAL_PCD_EP_ClrStall>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f8a7 	bl	8006d48 <USBD_Get_USB_Status>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	da0b      	bge.n	8006c3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	333e      	adds	r3, #62	; 0x3e
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	e00b      	b.n	8006c54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	4613      	mov	r3, r2
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fa ff49 	bl	8001b16 <HAL_PCD_SetAddress>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f85c 	bl	8006d48 <USBD_Get_USB_Status>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	460b      	mov	r3, r1
 8006cac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006cbc:	7af9      	ldrb	r1, [r7, #11]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	f7fb f862 	bl	8001d8a <HAL_PCD_EP_Transmit>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 f83b 	bl	8006d48 <USBD_Get_USB_Status>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006cd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	460b      	mov	r3, r1
 8006cee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006cfe:	7af9      	ldrb	r1, [r7, #11]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	f7fa ffde 	bl	8001cc4 <HAL_PCD_EP_Receive>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 f81a 	bl	8006d48 <USBD_Get_USB_Status>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d18:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	4611      	mov	r1, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fb f80e 	bl	8001d5a <HAL_PCD_EP_GetRxCount>
 8006d3e:	4603      	mov	r3, r0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d817      	bhi.n	8006d8c <USBD_Get_USB_Status+0x44>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBD_Get_USB_Status+0x1c>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d7b 	.word	0x08006d7b
 8006d6c:	08006d81 	.word	0x08006d81
 8006d70:	08006d87 	.word	0x08006d87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]
    break;
 8006d78:	e00b      	b.n	8006d92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7e:	e008      	b.n	8006d92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
    break;
 8006d84:	e005      	b.n	8006d92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8a:	e002      	b.n	8006d92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d90:	bf00      	nop
  }
  return usb_status;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <__errno>:
 8006da0:	4b01      	ldr	r3, [pc, #4]	; (8006da8 <__errno+0x8>)
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20000180 	.word	0x20000180

08006dac <__libc_init_array>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	4e0d      	ldr	r6, [pc, #52]	; (8006de4 <__libc_init_array+0x38>)
 8006db0:	4c0d      	ldr	r4, [pc, #52]	; (8006de8 <__libc_init_array+0x3c>)
 8006db2:	1ba4      	subs	r4, r4, r6
 8006db4:	10a4      	asrs	r4, r4, #2
 8006db6:	2500      	movs	r5, #0
 8006db8:	42a5      	cmp	r5, r4
 8006dba:	d109      	bne.n	8006dd0 <__libc_init_array+0x24>
 8006dbc:	4e0b      	ldr	r6, [pc, #44]	; (8006dec <__libc_init_array+0x40>)
 8006dbe:	4c0c      	ldr	r4, [pc, #48]	; (8006df0 <__libc_init_array+0x44>)
 8006dc0:	f000 f8ea 	bl	8006f98 <_init>
 8006dc4:	1ba4      	subs	r4, r4, r6
 8006dc6:	10a4      	asrs	r4, r4, #2
 8006dc8:	2500      	movs	r5, #0
 8006dca:	42a5      	cmp	r5, r4
 8006dcc:	d105      	bne.n	8006dda <__libc_init_array+0x2e>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dd4:	4798      	blx	r3
 8006dd6:	3501      	adds	r5, #1
 8006dd8:	e7ee      	b.n	8006db8 <__libc_init_array+0xc>
 8006dda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dde:	4798      	blx	r3
 8006de0:	3501      	adds	r5, #1
 8006de2:	e7f2      	b.n	8006dca <__libc_init_array+0x1e>
 8006de4:	08007018 	.word	0x08007018
 8006de8:	08007018 	.word	0x08007018
 8006dec:	08007018 	.word	0x08007018
 8006df0:	0800701c 	.word	0x0800701c

08006df4 <malloc>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <malloc+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f000 b861 	b.w	8006ec0 <_malloc_r>
 8006dfe:	bf00      	nop
 8006e00:	20000180 	.word	0x20000180

08006e04 <free>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <free+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f000 b80b 	b.w	8006e24 <_free_r>
 8006e0e:	bf00      	nop
 8006e10:	20000180 	.word	0x20000180

08006e14 <memset>:
 8006e14:	4402      	add	r2, r0
 8006e16:	4603      	mov	r3, r0
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d100      	bne.n	8006e1e <memset+0xa>
 8006e1c:	4770      	bx	lr
 8006e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e22:	e7f9      	b.n	8006e18 <memset+0x4>

08006e24 <_free_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4605      	mov	r5, r0
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d045      	beq.n	8006eb8 <_free_r+0x94>
 8006e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e30:	1f0c      	subs	r4, r1, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bfb8      	it	lt
 8006e36:	18e4      	addlt	r4, r4, r3
 8006e38:	f000 f8ac 	bl	8006f94 <__malloc_lock>
 8006e3c:	4a1f      	ldr	r2, [pc, #124]	; (8006ebc <_free_r+0x98>)
 8006e3e:	6813      	ldr	r3, [r2, #0]
 8006e40:	4610      	mov	r0, r2
 8006e42:	b933      	cbnz	r3, 8006e52 <_free_r+0x2e>
 8006e44:	6063      	str	r3, [r4, #4]
 8006e46:	6014      	str	r4, [r2, #0]
 8006e48:	4628      	mov	r0, r5
 8006e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e4e:	f000 b8a2 	b.w	8006f96 <__malloc_unlock>
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	d90c      	bls.n	8006e70 <_free_r+0x4c>
 8006e56:	6821      	ldr	r1, [r4, #0]
 8006e58:	1862      	adds	r2, r4, r1
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	bf04      	itt	eq
 8006e5e:	681a      	ldreq	r2, [r3, #0]
 8006e60:	685b      	ldreq	r3, [r3, #4]
 8006e62:	6063      	str	r3, [r4, #4]
 8006e64:	bf04      	itt	eq
 8006e66:	1852      	addeq	r2, r2, r1
 8006e68:	6022      	streq	r2, [r4, #0]
 8006e6a:	6004      	str	r4, [r0, #0]
 8006e6c:	e7ec      	b.n	8006e48 <_free_r+0x24>
 8006e6e:	4613      	mov	r3, r2
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	b10a      	cbz	r2, 8006e78 <_free_r+0x54>
 8006e74:	42a2      	cmp	r2, r4
 8006e76:	d9fa      	bls.n	8006e6e <_free_r+0x4a>
 8006e78:	6819      	ldr	r1, [r3, #0]
 8006e7a:	1858      	adds	r0, r3, r1
 8006e7c:	42a0      	cmp	r0, r4
 8006e7e:	d10b      	bne.n	8006e98 <_free_r+0x74>
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	4401      	add	r1, r0
 8006e84:	1858      	adds	r0, r3, r1
 8006e86:	4282      	cmp	r2, r0
 8006e88:	6019      	str	r1, [r3, #0]
 8006e8a:	d1dd      	bne.n	8006e48 <_free_r+0x24>
 8006e8c:	6810      	ldr	r0, [r2, #0]
 8006e8e:	6852      	ldr	r2, [r2, #4]
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	4401      	add	r1, r0
 8006e94:	6019      	str	r1, [r3, #0]
 8006e96:	e7d7      	b.n	8006e48 <_free_r+0x24>
 8006e98:	d902      	bls.n	8006ea0 <_free_r+0x7c>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	602b      	str	r3, [r5, #0]
 8006e9e:	e7d3      	b.n	8006e48 <_free_r+0x24>
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	1821      	adds	r1, r4, r0
 8006ea4:	428a      	cmp	r2, r1
 8006ea6:	bf04      	itt	eq
 8006ea8:	6811      	ldreq	r1, [r2, #0]
 8006eaa:	6852      	ldreq	r2, [r2, #4]
 8006eac:	6062      	str	r2, [r4, #4]
 8006eae:	bf04      	itt	eq
 8006eb0:	1809      	addeq	r1, r1, r0
 8006eb2:	6021      	streq	r1, [r4, #0]
 8006eb4:	605c      	str	r4, [r3, #4]
 8006eb6:	e7c7      	b.n	8006e48 <_free_r+0x24>
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000248 	.word	0x20000248

08006ec0 <_malloc_r>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	1ccd      	adds	r5, r1, #3
 8006ec4:	f025 0503 	bic.w	r5, r5, #3
 8006ec8:	3508      	adds	r5, #8
 8006eca:	2d0c      	cmp	r5, #12
 8006ecc:	bf38      	it	cc
 8006ece:	250c      	movcc	r5, #12
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	db01      	blt.n	8006eda <_malloc_r+0x1a>
 8006ed6:	42a9      	cmp	r1, r5
 8006ed8:	d903      	bls.n	8006ee2 <_malloc_r+0x22>
 8006eda:	230c      	movs	r3, #12
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	2000      	movs	r0, #0
 8006ee0:	bd70      	pop	{r4, r5, r6, pc}
 8006ee2:	f000 f857 	bl	8006f94 <__malloc_lock>
 8006ee6:	4a21      	ldr	r2, [pc, #132]	; (8006f6c <_malloc_r+0xac>)
 8006ee8:	6814      	ldr	r4, [r2, #0]
 8006eea:	4621      	mov	r1, r4
 8006eec:	b991      	cbnz	r1, 8006f14 <_malloc_r+0x54>
 8006eee:	4c20      	ldr	r4, [pc, #128]	; (8006f70 <_malloc_r+0xb0>)
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	b91b      	cbnz	r3, 8006efc <_malloc_r+0x3c>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 f83d 	bl	8006f74 <_sbrk_r>
 8006efa:	6020      	str	r0, [r4, #0]
 8006efc:	4629      	mov	r1, r5
 8006efe:	4630      	mov	r0, r6
 8006f00:	f000 f838 	bl	8006f74 <_sbrk_r>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d124      	bne.n	8006f52 <_malloc_r+0x92>
 8006f08:	230c      	movs	r3, #12
 8006f0a:	6033      	str	r3, [r6, #0]
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f842 	bl	8006f96 <__malloc_unlock>
 8006f12:	e7e4      	b.n	8006ede <_malloc_r+0x1e>
 8006f14:	680b      	ldr	r3, [r1, #0]
 8006f16:	1b5b      	subs	r3, r3, r5
 8006f18:	d418      	bmi.n	8006f4c <_malloc_r+0x8c>
 8006f1a:	2b0b      	cmp	r3, #11
 8006f1c:	d90f      	bls.n	8006f3e <_malloc_r+0x7e>
 8006f1e:	600b      	str	r3, [r1, #0]
 8006f20:	50cd      	str	r5, [r1, r3]
 8006f22:	18cc      	adds	r4, r1, r3
 8006f24:	4630      	mov	r0, r6
 8006f26:	f000 f836 	bl	8006f96 <__malloc_unlock>
 8006f2a:	f104 000b 	add.w	r0, r4, #11
 8006f2e:	1d23      	adds	r3, r4, #4
 8006f30:	f020 0007 	bic.w	r0, r0, #7
 8006f34:	1ac3      	subs	r3, r0, r3
 8006f36:	d0d3      	beq.n	8006ee0 <_malloc_r+0x20>
 8006f38:	425a      	negs	r2, r3
 8006f3a:	50e2      	str	r2, [r4, r3]
 8006f3c:	e7d0      	b.n	8006ee0 <_malloc_r+0x20>
 8006f3e:	428c      	cmp	r4, r1
 8006f40:	684b      	ldr	r3, [r1, #4]
 8006f42:	bf16      	itet	ne
 8006f44:	6063      	strne	r3, [r4, #4]
 8006f46:	6013      	streq	r3, [r2, #0]
 8006f48:	460c      	movne	r4, r1
 8006f4a:	e7eb      	b.n	8006f24 <_malloc_r+0x64>
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	6849      	ldr	r1, [r1, #4]
 8006f50:	e7cc      	b.n	8006eec <_malloc_r+0x2c>
 8006f52:	1cc4      	adds	r4, r0, #3
 8006f54:	f024 0403 	bic.w	r4, r4, #3
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d005      	beq.n	8006f68 <_malloc_r+0xa8>
 8006f5c:	1a21      	subs	r1, r4, r0
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 f808 	bl	8006f74 <_sbrk_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d0cf      	beq.n	8006f08 <_malloc_r+0x48>
 8006f68:	6025      	str	r5, [r4, #0]
 8006f6a:	e7db      	b.n	8006f24 <_malloc_r+0x64>
 8006f6c:	20000248 	.word	0x20000248
 8006f70:	2000024c 	.word	0x2000024c

08006f74 <_sbrk_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4c06      	ldr	r4, [pc, #24]	; (8006f90 <_sbrk_r+0x1c>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	f7f9 fcf8 	bl	8000974 <_sbrk>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_sbrk_r+0x1a>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_sbrk_r+0x1a>
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	20001b2c 	.word	0x20001b2c

08006f94 <__malloc_lock>:
 8006f94:	4770      	bx	lr

08006f96 <__malloc_unlock>:
 8006f96:	4770      	bx	lr

08006f98 <_init>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr

08006fa4 <_fini>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr
