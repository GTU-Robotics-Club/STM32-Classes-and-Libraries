
Cytron_Serial_Packetized.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007088  08007088  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007090  08007090  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000194c  200001e4  0800727c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b30  0800727c  00021b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f95  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003267  00000000  00000000  000361a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  00039410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0003a158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024951  00000000  00000000  0003ad38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e49b  00000000  00000000  0005f689  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be1dd  00000000  00000000  0006db24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012bd01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  0012bd7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007010 	.word	0x08007010

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08007010 	.word	0x08007010

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN6CytronC1EP20__UART_HandleTypeDefhh>:
 *  3. And the channel (again read the datasheet, if you are not aware what is this).
 *
 *
 */

Cytron::Cytron(UART_HandleTypeDef* huart, uint8_t address, uint8_t channel) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	4613      	mov	r3, r2
 80004dc:	71bb      	strb	r3, [r7, #6]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	2255      	movs	r2, #85	; 0x55
 80004e2:	719a      	strb	r2, [r3, #6]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2200      	movs	r2, #0
 80004e8:	71da      	strb	r2, [r3, #7]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2200      	movs	r2, #0
 80004ee:	721a      	strb	r2, [r3, #8]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	725a      	strb	r2, [r3, #9]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	729a      	strb	r2, [r3, #10]
	this->huart = huart;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	601a      	str	r2, [r3, #0]
	this->address = address;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	79fa      	ldrb	r2, [r7, #7]
 8000506:	711a      	strb	r2, [r3, #4]
	this->channel = channel;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	715a      	strb	r2, [r3, #5]
}
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4618      	mov	r0, r3
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <_Z3maphhhhh>:


uint8_t map(uint8_t value, uint8_t start1, uint8_t stop1, uint8_t start2, uint8_t stop2) {
 800051c:	b490      	push	{r4, r7}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4604      	mov	r4, r0
 8000524:	4608      	mov	r0, r1
 8000526:	4611      	mov	r1, r2
 8000528:	461a      	mov	r2, r3
 800052a:	4623      	mov	r3, r4
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	4603      	mov	r3, r0
 8000530:	71bb      	strb	r3, [r7, #6]
 8000532:	460b      	mov	r3, r1
 8000534:	717b      	strb	r3, [r7, #5]
 8000536:	4613      	mov	r3, r2
 8000538:	713b      	strb	r3, [r7, #4]
	return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));
 800053a:	7c3a      	ldrb	r2, [r7, #16]
 800053c:	793b      	ldrb	r3, [r7, #4]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	79f9      	ldrb	r1, [r7, #7]
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	1ac9      	subs	r1, r1, r3
 8000548:	7978      	ldrb	r0, [r7, #5]
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	1ac3      	subs	r3, r0, r3
 800054e:	fb91 f3f3 	sdiv	r3, r1, r3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	fb12 f303 	smulbb	r3, r2, r3
 8000558:	b2da      	uxtb	r2, r3
 800055a:	793b      	ldrb	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	b2db      	uxtb	r3, r3
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bc90      	pop	{r4, r7}
 8000568:	4770      	bx	lr

0800056a <_ZN6Cytron14send_dummy_bitEv>:
 *
 * This function comes with a cost of 500ms delay, so keep in mind that
 * not to use any time-sensitive operations while calling this function.
 */

void Cytron::send_dummy_bit(void) {
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, &dummy_bit, 1, HAL_MAX_DELAY);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f103 010a 	add.w	r1, r3, #10
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	2201      	movs	r2, #1
 8000582:	f002 fc0e 	bl	8002da2 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058a:	f000 fb17 	bl	8000bbc <HAL_Delay>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <_ZN6Cytron9clockwiseEh>:
 * arduino.
 *
 * And finally we call the send_data function, which finally transmits the packet.
 */

void Cytron::clockwise(uint8_t pwm) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b084      	sub	sp, #16
 800059a:	af02      	add	r7, sp, #8
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	460b      	mov	r3, r1
 80005a0:	70fb      	strb	r3, [r7, #3]
	pwm = map(pwm, 0, 255, 127, 255);
 80005a2:	78f8      	ldrb	r0, [r7, #3]
 80005a4:	23ff      	movs	r3, #255	; 0xff
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	237f      	movs	r3, #127	; 0x7f
 80005aa:	22ff      	movs	r2, #255	; 0xff
 80005ac:	2100      	movs	r1, #0
 80005ae:	f7ff ffb5 	bl	800051c <_Z3maphhhhh>
 80005b2:	4603      	mov	r3, r0
 80005b4:	70fb      	strb	r3, [r7, #3]
	this->send_data(pwm);
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4619      	mov	r1, r3
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f81d 	bl	80005fa <_ZN6Cytron9send_dataEh>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN6Cytron14anti_clockwiseEh>:

void Cytron::anti_clockwise(uint8_t pwm) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
	pwm = map(pwm, 0, 255, 127, 0);
 80005d4:	78f8      	ldrb	r0, [r7, #3]
 80005d6:	2300      	movs	r3, #0
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	237f      	movs	r3, #127	; 0x7f
 80005dc:	22ff      	movs	r2, #255	; 0xff
 80005de:	2100      	movs	r1, #0
 80005e0:	f7ff ff9c 	bl	800051c <_Z3maphhhhh>
 80005e4:	4603      	mov	r3, r0
 80005e6:	70fb      	strb	r3, [r7, #3]
	this->send_data(pwm);
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f804 	bl	80005fa <_ZN6Cytron9send_dataEh>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <_ZN6Cytron9send_dataEh>:
 *
 * The packet 2 is the PWM, and finally the packet 3 is the checksum, which is the
 * addition of first three packets.
 */

void Cytron::send_data(uint8_t speed) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	70fb      	strb	r3, [r7, #3]
	this->packet[1] = (this->channel << 3) | this->address;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	b25a      	sxtb	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	b25b      	sxtb	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b25b      	sxtb	r3, r3
 8000618:	b2da      	uxtb	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	71da      	strb	r2, [r3, #7]
	this->packet[2] = speed;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	721a      	strb	r2, [r3, #8]
	this->packet[3] = this->packet[0] + this->packet[1] + this->packet[2];
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	799a      	ldrb	r2, [r3, #6]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	4413      	add	r3, r2
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	7a1b      	ldrb	r3, [r3, #8]
 8000634:	4413      	add	r3, r2
 8000636:	b2da      	uxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(huart, packet, 4, HAL_MAX_DELAY);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1d99      	adds	r1, r3, #6
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2204      	movs	r2, #4
 800064a:	f002 fbaa 	bl	8002da2 <HAL_UART_Transmit>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fa3b 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f829 	bl	80006b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f8c9 	bl	80007fc <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800066a:	f000 f899 	bl	80007a0 <_ZL19MX_USART1_UART_Initv>
  MX_USB_DEVICE_Init();
 800066e:	f005 fef9 	bl	8006464 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 8000672:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000676:	f000 faa1 	bl	8000bbc <HAL_Delay>
  Cytron cytron_1(&huart1, 0b000, 1);
 800067a:	1d38      	adds	r0, r7, #4
 800067c:	2301      	movs	r3, #1
 800067e:	2200      	movs	r2, #0
 8000680:	490c      	ldr	r1, [pc, #48]	; (80006b4 <main+0x5c>)
 8000682:	f7ff ff21 	bl	80004c8 <_ZN6CytronC1EP20__UART_HandleTypeDefhh>
  cytron_1.send_dummy_bit();
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff6e 	bl	800056a <_ZN6Cytron14send_dummy_bitEv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  Code for driving the motor in clockwise and anti-clockwise direction with 1 sec delay
	  cytron_1.clockwise(255);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	21ff      	movs	r1, #255	; 0xff
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff7f 	bl	8000596 <_ZN6Cytron9clockwiseEh>
	  HAL_Delay(1000);
 8000698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069c:	f000 fa8e 	bl	8000bbc <HAL_Delay>
	  cytron_1.anti_clockwise(255);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	21ff      	movs	r1, #255	; 0xff
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff8f 	bl	80005c8 <_ZN6Cytron14anti_clockwiseEh>
	  HAL_Delay(1000);
 80006aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ae:	f000 fa85 	bl	8000bbc <HAL_Delay>
	  cytron_1.clockwise(255);
 80006b2:	e7ec      	b.n	800068e <main+0x36>
 80006b4:	20000200 	.word	0x20000200

080006b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fbe0 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <_Z18SystemClock_Configv+0xe0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <_Z18SystemClock_Configv+0xe0>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <_Z18SystemClock_Configv+0xe0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <_Z18SystemClock_Configv+0xe4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <_Z18SystemClock_Configv+0xe4>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <_Z18SystemClock_Configv+0xe4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000728:	2319      	movs	r3, #25
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800072c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000736:	2307      	movs	r3, #7
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fea6 	bl	8002490 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000754:	f000 f8a2 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2105      	movs	r1, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f8fa 	bl	8002970 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	bf14      	ite	ne
 8000782:	2301      	movne	r3, #1
 8000784:	2300      	moveq	r3, #0
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 800078c:	f000 f886 	bl	800089c <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <_ZL19MX_USART1_UART_Initv+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80007d8:	f002 fa96 	bl	8002d08 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80007ec:	f000 f856 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000200 	.word	0x20000200
 80007f8:	40011000 	.word	0x40011000

080007fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <_ZL12MX_GPIO_Initv+0x98>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2104      	movs	r1, #4
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <_ZL12MX_GPIO_Initv+0x9c>)
 800086c:	f000 fc74 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000870:	2304      	movs	r3, #4
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <_ZL12MX_GPIO_Initv+0x9c>)
 8000888:	f000 facc 	bl	8000e24 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40021000 	.word	0x40021000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <Error_Handler+0x6>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_UART_MspInit+0x84>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12c      	bne.n	8000970 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_UART_MspInit+0x88>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a17      	ldr	r2, [pc, #92]	; (800097c <HAL_UART_MspInit+0x88>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0x88>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <HAL_UART_MspInit+0x88>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800094e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000960:	2307      	movs	r3, #7
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <HAL_UART_MspInit+0x8c>)
 800096c:	f000 fa5a 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40011000 	.word	0x40011000
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f8d4 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <OTG_FS_IRQHandler+0x10>)
 80009de:	f000 fd24 	bl	800142a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20001724 	.word	0x20001724

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f006 f9fc 	bl	8006e18 <__errno>
 8000a20:	4602      	mov	r2, r0
 8000a22:	230c      	movs	r3, #12
 8000a24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20020000 	.word	0x20020000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000240 	.word	0x20000240
 8000a54:	20001b30 	.word	0x20001b30

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <SystemInit+0x28>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <SystemInit+0x28>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SystemInit+0x28>)
 8000a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a72:	609a      	str	r2, [r3, #8]
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a8a:	e003      	b.n	8000a94 <LoopCopyDataInit>

08000a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a92:	3104      	adds	r1, #4

08000a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a9c:	d3f6      	bcc.n	8000a8c <CopyDataInit>
  ldr  r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aa0:	e002      	b.n	8000aa8 <LoopFillZerobss>

08000aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa4:	f842 3b04 	str.w	r3, [r2], #4

08000aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aac:	d3f9      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd3 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f006 f9b7 	bl	8006e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fdcf 	bl	8000658 <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000abc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ac0:	08007098 	.word	0x08007098
  ldr  r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000acc:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000ad0:	20001b30 	.word	0x20001b30

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f94d 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f808 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff feca 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f965 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f92d 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000250 	.word	0x20000250

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000250 	.word	0x20000250

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_Delay+0x40>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000008 	.word	0x20000008

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff29 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff3e 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff31 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa2 	bl	8000d5c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e16b      	b.n	8001118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 815a 	bne.w	8001112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d00b      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e72:	2b11      	cmp	r3, #17
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0xfc>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80b4 	beq.w	8001112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b5f      	ldr	r3, [pc, #380]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a5e      	ldr	r2, [pc, #376]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a5a      	ldr	r2, [pc, #360]	; (8001130 <HAL_GPIO_Init+0x30c>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x310>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x314>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x318>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x31c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x320>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x328>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x32c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x20a>
 800102a:	2307      	movs	r3, #7
 800102c:	e00e      	b.n	800104c <HAL_GPIO_Init+0x228>
 800102e:	2308      	movs	r3, #8
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001032:	2306      	movs	r3, #6
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x228>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4934      	ldr	r1, [pc, #208]	; (8001130 <HAL_GPIO_Init+0x30c>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_GPIO_Init+0x330>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_GPIO_Init+0x330>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x330>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_GPIO_Init+0x330>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae90 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	3724      	adds	r7, #36	; 0x24
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800118a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118c:	b08f      	sub	sp, #60	; 0x3c
 800118e:	af0a      	add	r7, sp, #40	; 0x28
 8001190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e10f      	b.n	80013bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f005 fb32 	bl	8006820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fb55 	bl	800388a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	687e      	ldr	r6, [r7, #4]
 80011e8:	466d      	mov	r5, sp
 80011ea:	f106 0410 	add.w	r4, r6, #16
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80011fe:	1d33      	adds	r3, r6, #4
 8001200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f002 fa2c 	bl	8003660 <USB_CoreInit>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0d0      	b.n	80013bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f002 fb43 	bl	80038ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e04a      	b.n	80012c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	333d      	adds	r3, #61	; 0x3d
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	333c      	adds	r3, #60	; 0x3c
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	b298      	uxth	r0, r3
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3342      	adds	r3, #66	; 0x42
 8001268:	4602      	mov	r2, r0
 800126a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	333f      	adds	r3, #63	; 0x3f
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3344      	adds	r3, #68	; 0x44
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	3348      	adds	r3, #72	; 0x48
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	1a9b      	subs	r3, r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3350      	adds	r3, #80	; 0x50
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3af      	bcc.n	800122c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e044      	b.n	800135c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3301      	adds	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3b5      	bcc.n	80012d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	687e      	ldr	r6, [r7, #4]
 800136e:	466d      	mov	r5, sp
 8001370:	f106 0410 	add.w	r4, r6, #16
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001380:	e885 0003 	stmia.w	r5, {r0, r1}
 8001384:	1d33      	adds	r3, r6, #4
 8001386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f002 fab9 	bl	8003900 <USB_DevInit>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e00d      	b.n	80013bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fb01 	bl	80049bc <USB_DevDisconnect>

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_PCD_Start+0x1c>
 80013dc:	2302      	movs	r3, #2
 80013de:	e020      	b.n	8001422 <HAL_PCD_Start+0x5e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d109      	bne.n	8001404 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d005      	beq.n	8001404 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fa2d 	bl	8003868 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fab1 	bl	800497a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800142a:	b590      	push	{r4, r7, lr}
 800142c:	b08d      	sub	sp, #52	; 0x34
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f003 fb6f 	bl	8004b24 <USB_GetMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 839d 	bne.w	8001b88 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fad3 	bl	80049fe <USB_ReadInterrupts>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8393 	beq.w	8001b86 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f003 faca 	bl	80049fe <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b02      	cmp	r3, #2
 8001472:	d107      	bne.n	8001484 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f002 0202 	and.w	r2, r2, #2
 8001482:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fab8 	bl	80049fe <USB_ReadInterrupts>
 800148e:	4603      	mov	r3, r0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b10      	cmp	r3, #16
 8001496:	d161      	bne.n	800155c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0210 	bic.w	r2, r2, #16
 80014a6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 020f 	and.w	r2, r3, #15
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	3304      	adds	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	0c5b      	lsrs	r3, r3, #17
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d124      	bne.n	800151e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d035      	beq.n	800154c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	6a38      	ldr	r0, [r7, #32]
 80014f4:	f003 f91e 	bl	8004734 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001504:	441a      	add	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001516:	441a      	add	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	e016      	b.n	800154c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	0c5b      	lsrs	r3, r3, #17
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	2b06      	cmp	r3, #6
 8001528:	d110      	bne.n	800154c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001530:	2208      	movs	r2, #8
 8001532:	4619      	mov	r1, r3
 8001534:	6a38      	ldr	r0, [r7, #32]
 8001536:	f003 f8fd 	bl	8004734 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	441a      	add	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0210 	orr.w	r2, r2, #16
 800155a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fa4c 	bl	80049fe <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800156c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001570:	d16e      	bne.n	8001650 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fa52 	bl	8004a24 <USB_ReadDevAllOutEpInterrupt>
 8001580:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001582:	e062      	b.n	800164a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d057      	beq.n	800163e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fa77 	bl	8004a8c <USB_ReadDevOutEPInterrupt>
 800159e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b6:	461a      	mov	r2, r3
 80015b8:	2301      	movs	r3, #1
 80015ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fdb0 	bl	8002124 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00c      	beq.n	80015e8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015da:	461a      	mov	r2, r3
 80015dc:	2308      	movs	r3, #8
 80015de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 feaa 	bl	800233c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d008      	beq.n	8001604 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	015a      	lsls	r2, r3, #5
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015fe:	461a      	mov	r2, r3
 8001600:	2310      	movs	r3, #16
 8001602:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161a:	461a      	mov	r2, r3
 800161c:	2320      	movs	r3, #32
 800161e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001636:	461a      	mov	r2, r3
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	2b00      	cmp	r3, #0
 800164e:	d199      	bne.n	8001584 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f003 f9d2 	bl	80049fe <USB_ReadInterrupts>
 800165a:	4603      	mov	r3, r0
 800165c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001660:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001664:	f040 80c0 	bne.w	80017e8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 f9f3 	bl	8004a58 <USB_ReadDevAllInEpInterrupt>
 8001672:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001678:	e0b2      	b.n	80017e0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a7 	beq.w	80017d4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fa19 	bl	8004ac8 <USB_ReadDevInEPInterrupt>
 8001696:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d057      	beq.n	8001752 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	2201      	movs	r2, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69f9      	ldr	r1, [r7, #28]
 80016be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016c2:	4013      	ands	r3, r2
 80016c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d2:	461a      	mov	r2, r3
 80016d4:	2301      	movs	r3, #1
 80016d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d132      	bne.n	8001746 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e4:	4613      	mov	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3348      	adds	r3, #72	; 0x48
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4403      	add	r3, r0
 8001700:	3344      	adds	r3, #68	; 0x44
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4419      	add	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4403      	add	r3, r0
 8001714:	3348      	adds	r3, #72	; 0x48
 8001716:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	2b00      	cmp	r3, #0
 800171c:	d113      	bne.n	8001746 <HAL_PCD_IRQHandler+0x31c>
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3350      	adds	r3, #80	; 0x50
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d108      	bne.n	8001746 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800173e:	461a      	mov	r2, r3
 8001740:	2101      	movs	r1, #1
 8001742:	f003 fa21 	bl	8004b88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f005 f8e8 	bl	8006922 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	015a      	lsls	r2, r3, #5
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4413      	add	r3, r2
 8001764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001768:	461a      	mov	r2, r3
 800176a:	2308      	movs	r3, #8
 800176c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	015a      	lsls	r2, r3, #5
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001784:	461a      	mov	r2, r3
 8001786:	2310      	movs	r3, #16
 8001788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a0:	461a      	mov	r2, r3
 80017a2:	2340      	movs	r3, #64	; 0x40
 80017a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017bc:	461a      	mov	r2, r3
 80017be:	2302      	movs	r3, #2
 80017c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fc1b 	bl	800200a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	3301      	adds	r3, #1
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f47f af49 	bne.w	800167a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f906 	bl	80049fe <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017fc:	d122      	bne.n	8001844 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001824:	2100      	movs	r1, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fe26 	bl	8002478 <HAL_PCDEx_LPM_Callback>
 800182c:	e002      	b.n	8001834 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f005 f8ee 	bl	8006a10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f003 f8d8 	bl	80049fe <USB_ReadInterrupts>
 800184e:	4603      	mov	r3, r0
 8001850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001858:	d112      	bne.n	8001880 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f005 f8aa 	bl	80069c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800187e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 f8ba 	bl	80049fe <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001894:	f040 80c7 	bne.w	8001a26 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2110      	movs	r1, #16
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 f988 	bl	8003bc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018bc:	e056      	b.n	800196c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ca:	461a      	mov	r2, r3
 80018cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e2:	0151      	lsls	r1, r2, #5
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	440a      	add	r2, r1
 80018e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018f0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001902:	0151      	lsls	r1, r2, #5
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	440a      	add	r2, r1
 8001908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800190c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001910:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800191e:	461a      	mov	r2, r3
 8001920:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001924:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	015a      	lsls	r2, r3, #5
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4413      	add	r3, r2
 800192e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001936:	0151      	lsls	r1, r2, #5
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	440a      	add	r2, r1
 800193c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001940:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001944:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001956:	0151      	lsls	r1, r2, #5
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	440a      	add	r2, r1
 800195c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001960:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001964:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	3301      	adds	r3, #1
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001972:	429a      	cmp	r2, r3
 8001974:	d3a3      	bcc.n	80018be <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001984:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001988:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d016      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a2:	f043 030b 	orr.w	r3, r3, #11
 80019a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b8:	f043 030b 	orr.w	r3, r3, #11
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	e015      	b.n	80019ec <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e6:	f043 030b 	orr.w	r3, r3, #11
 80019ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a10:	461a      	mov	r2, r3
 8001a12:	f003 f8b9 	bl	8004b88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 ffe7 	bl	80049fe <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a3a:	d124      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 f87d 	bl	8004b40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 f91d 	bl	8003c8a <USB_GetDevSpeed>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681c      	ldr	r4, [r3, #0]
 8001a5c:	f001 f920 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8001a60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f001 fe5a 	bl	8003724 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f004 ff7e 	bl	8006972 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 ffb7 	bl	80049fe <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d10a      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f004 ff5b 	bl	8006956 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f002 0208 	and.w	r2, r2, #8
 8001aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 ffa2 	bl	80049fe <USB_ReadInterrupts>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f004 ffbd 	bl	8006a50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 ff87 	bl	80049fe <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001afa:	d10f      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f004 ff90 	bl	8006a2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 ff6c 	bl	80049fe <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d10a      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f004 ff9e 	bl	8006a74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 ff56 	bl	80049fe <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d115      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f004 ff8e 	bl	8006a90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	e000      	b.n	8001b88 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b86:	bf00      	nop
    }
  }
}
 8001b88:	3734      	adds	r7, #52	; 0x34
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}

08001b8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_SetAddress+0x1a>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e013      	b.n	8001bd0 <HAL_PCD_SetAddress+0x42>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 feb4 	bl	800492e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	70fb      	strb	r3, [r7, #3]
 8001bea:	460b      	mov	r3, r1
 8001bec:	803b      	strh	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0f      	bge.n	8001c1e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 020f 	and.w	r2, r3, #15
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	3338      	adds	r3, #56	; 0x38
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	705a      	strb	r2, [r3, #1]
 8001c1c:	e00f      	b.n	8001c3e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	3304      	adds	r3, #4
 8001c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	78ba      	ldrb	r2, [r7, #2]
 8001c54:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d102      	bne.n	8001c74 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_PCD_EP_Open+0xaa>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e00e      	b.n	8001ca0 <HAL_PCD_EP_Open+0xc8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68f9      	ldr	r1, [r7, #12]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 f81f 	bl	8003cd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da0f      	bge.n	8001cdc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3338      	adds	r3, #56	; 0x38
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	705a      	strb	r2, [r3, #1]
 8001cda:	e00f      	b.n	8001cfc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_EP_Close+0x6e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e00e      	b.n	8001d34 <HAL_PCD_EP_Close+0x8c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68f9      	ldr	r1, [r7, #12]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 f85d 	bl	8003de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d98:	7afb      	ldrb	r3, [r7, #11]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	6979      	ldr	r1, [r7, #20]
 8001db0:	f002 fb38 	bl	8004424 <USB_EP0StartXfer>
 8001db4:	e008      	b.n	8001dc8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6979      	ldr	r1, [r7, #20]
 8001dc4:	f002 f8ea 	bl	8003f9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001df4:	681b      	ldr	r3, [r3, #0]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	3338      	adds	r3, #56	; 0x38
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	6979      	ldr	r1, [r7, #20]
 8001e74:	f002 fad6 	bl	8004424 <USB_EP0StartXfer>
 8001e78:	e008      	b.n	8001e8c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6979      	ldr	r1, [r7, #20]
 8001e88:	f002 f888 	bl	8003f9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d901      	bls.n	8001eb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e050      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0f      	bge.n	8001edc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3338      	adds	r3, #56	; 0x38
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	705a      	strb	r2, [r3, #1]
 8001eda:	e00d      	b.n	8001ef8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_EP_SetStall+0x82>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e01e      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xc0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fc2d 	bl	8004786 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	b2d9      	uxtb	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f46:	461a      	mov	r2, r3
 8001f48:	f002 fe1e 	bl	8004b88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 020f 	and.w	r2, r3, #15
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d901      	bls.n	8001f7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e042      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da0f      	bge.n	8001fa4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3338      	adds	r3, #56	; 0x38
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	705a      	strb	r2, [r3, #1]
 8001fa2:	e00f      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_EP_ClrStall+0x86>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e00e      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fc35 	bl	8004862 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b08a      	sub	sp, #40	; 0x28
 800200e:	af02      	add	r7, sp, #8
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3338      	adds	r3, #56	; 0x38
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	429a      	cmp	r2, r3
 800203c:	d901      	bls.n	8002042 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06c      	b.n	800211c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d902      	bls.n	800205e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3303      	adds	r3, #3
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002066:	e02b      	b.n	80020c0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d902      	bls.n	8002084 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3303      	adds	r3, #3
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68d9      	ldr	r1, [r3, #12]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209c:	b2db      	uxtb	r3, r3
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f002 fb11 	bl	80046ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	441a      	add	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	441a      	add	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d809      	bhi.n	80020ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020de:	429a      	cmp	r2, r3
 80020e0:	d203      	bcs.n	80020ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1be      	bne.n	8002068 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d811      	bhi.n	800211a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	2201      	movs	r2, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	43db      	mvns	r3, r3
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002116:	4013      	ands	r3, r2
 8002118:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	333c      	adds	r3, #60	; 0x3c
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	f040 80a0 	bne.w	800229c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d015      	beq.n	8002192 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a72      	ldr	r2, [pc, #456]	; (8002334 <PCD_EP_OutXfrComplete_int+0x210>)
 800216a:	4293      	cmp	r3, r2
 800216c:	f240 80dd 	bls.w	800232a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80d7 	beq.w	800232a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002188:	461a      	mov	r2, r3
 800218a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	e0cb      	b.n	800232a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a8:	461a      	mov	r2, r3
 80021aa:	2320      	movs	r3, #32
 80021ac:	6093      	str	r3, [r2, #8]
 80021ae:	e0bc      	b.n	800232a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80b7 	bne.w	800232a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a5d      	ldr	r2, [pc, #372]	; (8002334 <PCD_EP_OutXfrComplete_int+0x210>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d90f      	bls.n	80021e4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021da:	461a      	mov	r2, r3
 80021dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e0:	6093      	str	r3, [r2, #8]
 80021e2:	e0a2      	b.n	800232a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021f6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	440b      	add	r3, r1
 8002200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800220a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4403      	add	r3, r0
 800221a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800221e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4403      	add	r3, r0
 8002242:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4419      	add	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800225c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d114      	bne.n	800228e <PCD_EP_OutXfrComplete_int+0x16a>
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002286:	461a      	mov	r2, r3
 8002288:	2101      	movs	r1, #1
 800228a:	f002 fc7d 	bl	8004b88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f004 fb29 	bl	80068ec <HAL_PCD_DataOutStageCallback>
 800229a:	e046      	b.n	800232a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a26      	ldr	r2, [pc, #152]	; (8002338 <PCD_EP_OutXfrComplete_int+0x214>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d124      	bne.n	80022ee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c0:	6093      	str	r3, [r2, #8]
 80022c2:	e032      	b.n	800232a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	461a      	mov	r2, r3
 80022dc:	2320      	movs	r3, #32
 80022de:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f004 fb00 	bl	80068ec <HAL_PCD_DataOutStageCallback>
 80022ec:	e01d      	b.n	800232a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d114      	bne.n	800231e <PCD_EP_OutXfrComplete_int+0x1fa>
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002316:	461a      	mov	r2, r3
 8002318:	2100      	movs	r1, #0
 800231a:	f002 fc35 	bl	8004b88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f004 fae1 	bl	80068ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	4f54300a 	.word	0x4f54300a
 8002338:	4f54310a 	.word	0x4f54310a

0800233c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	333c      	adds	r3, #60	; 0x3c
 8002354:	3304      	adds	r3, #4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d90e      	bls.n	8002390 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800238e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f004 fa99 	bl	80068c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d90c      	bls.n	80023b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023b0:	461a      	mov	r2, r3
 80023b2:	2101      	movs	r1, #1
 80023b4:	f002 fbe8 	bl	8004b88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	4f54300a 	.word	0x4f54300a

080023c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
 80023d4:	4613      	mov	r3, r2
 80023d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023e6:	883b      	ldrh	r3, [r7, #0]
 80023e8:	0419      	lsls	r1, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
 80023f4:	e028      	b.n	8002448 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	4413      	add	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e00d      	b.n	8002426 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	3340      	adds	r3, #64	; 0x40
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4413      	add	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3301      	adds	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	3b01      	subs	r3, #1
 800242c:	429a      	cmp	r2, r3
 800242e:	d3ec      	bcc.n	800240a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002430:	883b      	ldrh	r3, [r7, #0]
 8002432:	0418      	lsls	r0, r3, #16
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	3b01      	subs	r3, #1
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	4302      	orrs	r2, r0
 8002440:	3340      	adds	r3, #64	; 0x40
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e25b      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d075      	beq.n	800259a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ae:	4ba3      	ldr	r3, [pc, #652]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4ba0      	ldr	r3, [pc, #640]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b9d      	ldr	r3, [pc, #628]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	4b99      	ldr	r3, [pc, #612]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05b      	beq.n	8002598 <HAL_RCC_OscConfig+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d157      	bne.n	8002598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e236      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x74>
 80024f6:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a90      	ldr	r2, [pc, #576]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a8a      	ldr	r2, [pc, #552]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a87      	ldr	r2, [pc, #540]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002528:	4b84      	ldr	r3, [pc, #528]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a83      	ldr	r2, [pc, #524]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fb2c 	bl	8000ba4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fb28 	bl	8000ba4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1fb      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xc0>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fb18 	bl	8000ba4 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fb14 	bl	8000ba4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1e7      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	4b6c      	ldr	r3, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0xe8>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d063      	beq.n	800266e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1bb      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4952      	ldr	r1, [pc, #328]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e03a      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <HAL_RCC_OscConfig+0x2b0>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe facd 	bl	8000ba4 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fac9 	bl	8000ba4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e19c      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4940      	ldr	r1, [pc, #256]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e015      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCC_OscConfig+0x2b0>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe faac 	bl	8000ba4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002650:	f7fe faa8 	bl	8000ba4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e17b      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d030      	beq.n	80026dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_RCC_OscConfig+0x2b4>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe fa8c 	bl	8000ba4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002690:	f7fe fa88 	bl	8000ba4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e15b      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x200>
 80026ae:	e015      	b.n	80026dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x2b4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fa75 	bl	8000ba4 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe fa71 	bl	8000ba4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e144      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80a0 	beq.w	800282a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCC_OscConfig+0x2ac>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_OscConfig+0x2b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d121      	bne.n	800276a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_RCC_OscConfig+0x2b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_RCC_OscConfig+0x2b8>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7fe fa37 	bl	8000ba4 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e011      	b.n	800275e <HAL_RCC_OscConfig+0x2ce>
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	42470000 	.word	0x42470000
 8002744:	42470e80 	.word	0x42470e80
 8002748:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274c:	f7fe fa2a 	bl	8000ba4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0fd      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCC_OscConfig+0x4d4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d106      	bne.n	8002780 <HAL_RCC_OscConfig+0x2f0>
 8002772:	4b7d      	ldr	r3, [pc, #500]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a7c      	ldr	r2, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	e01c      	b.n	80027ba <HAL_RCC_OscConfig+0x32a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b05      	cmp	r3, #5
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x312>
 8002788:	4b77      	ldr	r3, [pc, #476]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a76      	ldr	r2, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	4b74      	ldr	r3, [pc, #464]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a73      	ldr	r2, [pc, #460]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	e00b      	b.n	80027ba <HAL_RCC_OscConfig+0x32a>
 80027a2:	4b71      	ldr	r3, [pc, #452]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a70      	ldr	r2, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	4b6e      	ldr	r3, [pc, #440]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a6d      	ldr	r2, [pc, #436]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7fe f9ef 	bl	8000ba4 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe f9eb 	bl	8000ba4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0bc      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ee      	beq.n	80027ca <HAL_RCC_OscConfig+0x33a>
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe f9d9 	bl	8000ba4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe f9d5 	bl	8000ba4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0a6      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	4b56      	ldr	r3, [pc, #344]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ee      	bne.n	80027f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4b52      	ldr	r3, [pc, #328]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a51      	ldr	r2, [pc, #324]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8092 	beq.w	8002958 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002834:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d05c      	beq.n	80028fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d141      	bne.n	80028cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b48      	ldr	r3, [pc, #288]	; (800296c <HAL_RCC_OscConfig+0x4dc>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe f9a9 	bl	8000ba4 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe f9a5 	bl	8000ba4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e078      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	019b      	lsls	r3, r3, #6
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	061b      	lsls	r3, r3, #24
 8002898:	4933      	ldr	r1, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289e:	4b33      	ldr	r3, [pc, #204]	; (800296c <HAL_RCC_OscConfig+0x4dc>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe f97e 	bl	8000ba4 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe f97a 	bl	8000ba4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04d      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x41c>
 80028ca:	e045      	b.n	8002958 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x4dc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe f967 	bl	8000ba4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe f963 	bl	8000ba4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e036      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x44a>
 80028f8:	e02e      	b.n	8002958 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e029      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_RCC_OscConfig+0x4d8>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	429a      	cmp	r2, r3
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d115      	bne.n	8002954 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800292e:	4013      	ands	r3, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002934:	4293      	cmp	r3, r2
 8002936:	d10d      	bne.n	8002954 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40007000 	.word	0x40007000
 8002968:	40023800 	.word	0x40023800
 800296c:	42470060 	.word	0x42470060

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90c      	bls.n	80029ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d044      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e067      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4934      	ldr	r1, [pc, #208]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fe f8a0 	bl	8000ba4 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe f89c 	bl	8000ba4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d20c      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4601      	mov	r1, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f800 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08007070 	.word	0x08007070
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d007      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0x32>
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d008      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x38>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 808d 	bne.w	8002c82 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b6a:	60bb      	str	r3, [r7, #8]
       break;
 8002b6c:	e08c      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b70:	60bb      	str	r3, [r7, #8]
      break;
 8002b72:	e089      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b74:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7e:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d023      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	099b      	lsrs	r3, r3, #6
 8002b90:	f04f 0400 	mov.w	r4, #0
 8002b94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	ea03 0501 	and.w	r5, r3, r1
 8002ba0:	ea04 0602 	and.w	r6, r4, r2
 8002ba4:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002ba6:	fb02 f106 	mul.w	r1, r2, r6
 8002baa:	2200      	movs	r2, #0
 8002bac:	fb02 f205 	mul.w	r2, r2, r5
 8002bb0:	440a      	add	r2, r1
 8002bb2:	493a      	ldr	r1, [pc, #232]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb4:	fba5 0101 	umull	r0, r1, r5, r1
 8002bb8:	1853      	adds	r3, r2, r1
 8002bba:	4619      	mov	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f04f 0400 	mov.w	r4, #0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	f7fd faff 	bl	80001c8 <__aeabi_uldivmod>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	460c      	mov	r4, r1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e049      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	f04f 0400 	mov.w	r4, #0
 8002bdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	ea03 0501 	and.w	r5, r3, r1
 8002be8:	ea04 0602 	and.w	r6, r4, r2
 8002bec:	4629      	mov	r1, r5
 8002bee:	4632      	mov	r2, r6
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	f04f 0400 	mov.w	r4, #0
 8002bf8:	0154      	lsls	r4, r2, #5
 8002bfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bfe:	014b      	lsls	r3, r1, #5
 8002c00:	4619      	mov	r1, r3
 8002c02:	4622      	mov	r2, r4
 8002c04:	1b49      	subs	r1, r1, r5
 8002c06:	eb62 0206 	sbc.w	r2, r2, r6
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	f04f 0400 	mov.w	r4, #0
 8002c12:	0194      	lsls	r4, r2, #6
 8002c14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c18:	018b      	lsls	r3, r1, #6
 8002c1a:	1a5b      	subs	r3, r3, r1
 8002c1c:	eb64 0402 	sbc.w	r4, r4, r2
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	00e2      	lsls	r2, r4, #3
 8002c2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c2e:	00d9      	lsls	r1, r3, #3
 8002c30:	460b      	mov	r3, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	195b      	adds	r3, r3, r5
 8002c36:	eb44 0406 	adc.w	r4, r4, r6
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	02a2      	lsls	r2, r4, #10
 8002c44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c48:	0299      	lsls	r1, r3, #10
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4621      	mov	r1, r4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f04f 0400 	mov.w	r4, #0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	f7fd fab4 	bl	80001c8 <__aeabi_uldivmod>
 8002c60:	4603      	mov	r3, r0
 8002c62:	460c      	mov	r4, r1
 8002c64:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	3301      	adds	r3, #1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	60bb      	str	r3, [r7, #8]
      break;
 8002c80:	e002      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c84:	60bb      	str	r3, [r7, #8]
      break;
 8002c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c88:	68bb      	ldr	r3, [r7, #8]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	00f42400 	.word	0x00f42400
 8002c9c:	017d7840 	.word	0x017d7840

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cbc:	f7ff fff0 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0a9b      	lsrs	r3, r3, #10
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08007080 	.word	0x08007080

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce4:	f7ff ffdc 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4601      	mov	r1, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0b5b      	lsrs	r3, r3, #13
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4a03      	ldr	r2, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08007080 	.word	0x08007080

08002d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e03f      	b.n	8002d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd fde0 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f90b 	bl	8002f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b088      	sub	sp, #32
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	f040 8083 	bne.w	8002eca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_UART_Transmit+0x2e>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e07b      	b.n	8002ecc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Transmit+0x40>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e074      	b.n	8002ecc <HAL_UART_Transmit+0x12a>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2221      	movs	r2, #33	; 0x21
 8002df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002df8:	f7fd fed4 	bl	8000ba4 <HAL_GetTick>
 8002dfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	88fa      	ldrh	r2, [r7, #6]
 8002e02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002e12:	e042      	b.n	8002e9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2a:	d122      	bne.n	8002e72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2200      	movs	r2, #0
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f84c 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e042      	b.n	8002ecc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3302      	adds	r3, #2
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	e017      	b.n	8002e9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	e013      	b.n	8002e9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f829 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e01f      	b.n	8002ecc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	60ba      	str	r2, [r7, #8]
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1b7      	bne.n	8002e14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2140      	movs	r1, #64	; 0x40
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f810 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e006      	b.n	8002ecc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee4:	e02c      	b.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d028      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ef4:	f7fd fe56 	bl	8000ba4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d21d      	bcs.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e00f      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d0c3      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002faa:	f023 030c 	bic.w	r3, r3, #12
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd6:	f040 818b 	bne.w	80032f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4ac1      	ldr	r2, [pc, #772]	; (80032e4 <UART_SetConfig+0x37c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d005      	beq.n	8002ff0 <UART_SetConfig+0x88>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4abf      	ldr	r2, [pc, #764]	; (80032e8 <UART_SetConfig+0x380>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f040 80bd 	bne.w	800316a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ff0:	f7ff fe76 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	461d      	mov	r5, r3
 8002ffa:	f04f 0600 	mov.w	r6, #0
 8002ffe:	46a8      	mov	r8, r5
 8003000:	46b1      	mov	r9, r6
 8003002:	eb18 0308 	adds.w	r3, r8, r8
 8003006:	eb49 0409 	adc.w	r4, r9, r9
 800300a:	4698      	mov	r8, r3
 800300c:	46a1      	mov	r9, r4
 800300e:	eb18 0805 	adds.w	r8, r8, r5
 8003012:	eb49 0906 	adc.w	r9, r9, r6
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003022:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003026:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800302a:	4688      	mov	r8, r1
 800302c:	4691      	mov	r9, r2
 800302e:	eb18 0005 	adds.w	r0, r8, r5
 8003032:	eb49 0106 	adc.w	r1, r9, r6
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	461d      	mov	r5, r3
 800303c:	f04f 0600 	mov.w	r6, #0
 8003040:	196b      	adds	r3, r5, r5
 8003042:	eb46 0406 	adc.w	r4, r6, r6
 8003046:	461a      	mov	r2, r3
 8003048:	4623      	mov	r3, r4
 800304a:	f7fd f8bd 	bl	80001c8 <__aeabi_uldivmod>
 800304e:	4603      	mov	r3, r0
 8003050:	460c      	mov	r4, r1
 8003052:	461a      	mov	r2, r3
 8003054:	4ba5      	ldr	r3, [pc, #660]	; (80032ec <UART_SetConfig+0x384>)
 8003056:	fba3 2302 	umull	r2, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	461d      	mov	r5, r3
 8003064:	f04f 0600 	mov.w	r6, #0
 8003068:	46a9      	mov	r9, r5
 800306a:	46b2      	mov	sl, r6
 800306c:	eb19 0309 	adds.w	r3, r9, r9
 8003070:	eb4a 040a 	adc.w	r4, sl, sl
 8003074:	4699      	mov	r9, r3
 8003076:	46a2      	mov	sl, r4
 8003078:	eb19 0905 	adds.w	r9, r9, r5
 800307c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800308c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003094:	4689      	mov	r9, r1
 8003096:	4692      	mov	sl, r2
 8003098:	eb19 0005 	adds.w	r0, r9, r5
 800309c:	eb4a 0106 	adc.w	r1, sl, r6
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	461d      	mov	r5, r3
 80030a6:	f04f 0600 	mov.w	r6, #0
 80030aa:	196b      	adds	r3, r5, r5
 80030ac:	eb46 0406 	adc.w	r4, r6, r6
 80030b0:	461a      	mov	r2, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	f7fd f888 	bl	80001c8 <__aeabi_uldivmod>
 80030b8:	4603      	mov	r3, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	461a      	mov	r2, r3
 80030be:	4b8b      	ldr	r3, [pc, #556]	; (80032ec <UART_SetConfig+0x384>)
 80030c0:	fba3 1302 	umull	r1, r3, r3, r2
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	2164      	movs	r1, #100	; 0x64
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	3332      	adds	r3, #50	; 0x32
 80030d2:	4a86      	ldr	r2, [pc, #536]	; (80032ec <UART_SetConfig+0x384>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030e0:	4498      	add	r8, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	461d      	mov	r5, r3
 80030e6:	f04f 0600 	mov.w	r6, #0
 80030ea:	46a9      	mov	r9, r5
 80030ec:	46b2      	mov	sl, r6
 80030ee:	eb19 0309 	adds.w	r3, r9, r9
 80030f2:	eb4a 040a 	adc.w	r4, sl, sl
 80030f6:	4699      	mov	r9, r3
 80030f8:	46a2      	mov	sl, r4
 80030fa:	eb19 0905 	adds.w	r9, r9, r5
 80030fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800310e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003112:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003116:	4689      	mov	r9, r1
 8003118:	4692      	mov	sl, r2
 800311a:	eb19 0005 	adds.w	r0, r9, r5
 800311e:	eb4a 0106 	adc.w	r1, sl, r6
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	461d      	mov	r5, r3
 8003128:	f04f 0600 	mov.w	r6, #0
 800312c:	196b      	adds	r3, r5, r5
 800312e:	eb46 0406 	adc.w	r4, r6, r6
 8003132:	461a      	mov	r2, r3
 8003134:	4623      	mov	r3, r4
 8003136:	f7fd f847 	bl	80001c8 <__aeabi_uldivmod>
 800313a:	4603      	mov	r3, r0
 800313c:	460c      	mov	r4, r1
 800313e:	461a      	mov	r2, r3
 8003140:	4b6a      	ldr	r3, [pc, #424]	; (80032ec <UART_SetConfig+0x384>)
 8003142:	fba3 1302 	umull	r1, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2164      	movs	r1, #100	; 0x64
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	3332      	adds	r3, #50	; 0x32
 8003154:	4a65      	ldr	r2, [pc, #404]	; (80032ec <UART_SetConfig+0x384>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 0207 	and.w	r2, r3, #7
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4442      	add	r2, r8
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	e26f      	b.n	800364a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800316a:	f7ff fda5 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 800316e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	461d      	mov	r5, r3
 8003174:	f04f 0600 	mov.w	r6, #0
 8003178:	46a8      	mov	r8, r5
 800317a:	46b1      	mov	r9, r6
 800317c:	eb18 0308 	adds.w	r3, r8, r8
 8003180:	eb49 0409 	adc.w	r4, r9, r9
 8003184:	4698      	mov	r8, r3
 8003186:	46a1      	mov	r9, r4
 8003188:	eb18 0805 	adds.w	r8, r8, r5
 800318c:	eb49 0906 	adc.w	r9, r9, r6
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800319c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031a4:	4688      	mov	r8, r1
 80031a6:	4691      	mov	r9, r2
 80031a8:	eb18 0005 	adds.w	r0, r8, r5
 80031ac:	eb49 0106 	adc.w	r1, r9, r6
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	461d      	mov	r5, r3
 80031b6:	f04f 0600 	mov.w	r6, #0
 80031ba:	196b      	adds	r3, r5, r5
 80031bc:	eb46 0406 	adc.w	r4, r6, r6
 80031c0:	461a      	mov	r2, r3
 80031c2:	4623      	mov	r3, r4
 80031c4:	f7fd f800 	bl	80001c8 <__aeabi_uldivmod>
 80031c8:	4603      	mov	r3, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <UART_SetConfig+0x384>)
 80031d0:	fba3 2302 	umull	r2, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	461d      	mov	r5, r3
 80031de:	f04f 0600 	mov.w	r6, #0
 80031e2:	46a9      	mov	r9, r5
 80031e4:	46b2      	mov	sl, r6
 80031e6:	eb19 0309 	adds.w	r3, r9, r9
 80031ea:	eb4a 040a 	adc.w	r4, sl, sl
 80031ee:	4699      	mov	r9, r3
 80031f0:	46a2      	mov	sl, r4
 80031f2:	eb19 0905 	adds.w	r9, r9, r5
 80031f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003206:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800320a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800320e:	4689      	mov	r9, r1
 8003210:	4692      	mov	sl, r2
 8003212:	eb19 0005 	adds.w	r0, r9, r5
 8003216:	eb4a 0106 	adc.w	r1, sl, r6
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	461d      	mov	r5, r3
 8003220:	f04f 0600 	mov.w	r6, #0
 8003224:	196b      	adds	r3, r5, r5
 8003226:	eb46 0406 	adc.w	r4, r6, r6
 800322a:	461a      	mov	r2, r3
 800322c:	4623      	mov	r3, r4
 800322e:	f7fc ffcb 	bl	80001c8 <__aeabi_uldivmod>
 8003232:	4603      	mov	r3, r0
 8003234:	460c      	mov	r4, r1
 8003236:	461a      	mov	r2, r3
 8003238:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <UART_SetConfig+0x384>)
 800323a:	fba3 1302 	umull	r1, r3, r3, r2
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2164      	movs	r1, #100	; 0x64
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	3332      	adds	r3, #50	; 0x32
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <UART_SetConfig+0x384>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800325a:	4498      	add	r8, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	461d      	mov	r5, r3
 8003260:	f04f 0600 	mov.w	r6, #0
 8003264:	46a9      	mov	r9, r5
 8003266:	46b2      	mov	sl, r6
 8003268:	eb19 0309 	adds.w	r3, r9, r9
 800326c:	eb4a 040a 	adc.w	r4, sl, sl
 8003270:	4699      	mov	r9, r3
 8003272:	46a2      	mov	sl, r4
 8003274:	eb19 0905 	adds.w	r9, r9, r5
 8003278:	eb4a 0a06 	adc.w	sl, sl, r6
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003288:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800328c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003290:	4689      	mov	r9, r1
 8003292:	4692      	mov	sl, r2
 8003294:	eb19 0005 	adds.w	r0, r9, r5
 8003298:	eb4a 0106 	adc.w	r1, sl, r6
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	461d      	mov	r5, r3
 80032a2:	f04f 0600 	mov.w	r6, #0
 80032a6:	196b      	adds	r3, r5, r5
 80032a8:	eb46 0406 	adc.w	r4, r6, r6
 80032ac:	461a      	mov	r2, r3
 80032ae:	4623      	mov	r3, r4
 80032b0:	f7fc ff8a 	bl	80001c8 <__aeabi_uldivmod>
 80032b4:	4603      	mov	r3, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <UART_SetConfig+0x384>)
 80032bc:	fba3 1302 	umull	r1, r3, r3, r2
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	2164      	movs	r1, #100	; 0x64
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	3332      	adds	r3, #50	; 0x32
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <UART_SetConfig+0x384>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	f003 0207 	and.w	r2, r3, #7
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4442      	add	r2, r8
 80032e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032e2:	e1b2      	b.n	800364a <UART_SetConfig+0x6e2>
 80032e4:	40011000 	.word	0x40011000
 80032e8:	40011400 	.word	0x40011400
 80032ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4ad7      	ldr	r2, [pc, #860]	; (8003654 <UART_SetConfig+0x6ec>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d005      	beq.n	8003306 <UART_SetConfig+0x39e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4ad6      	ldr	r2, [pc, #856]	; (8003658 <UART_SetConfig+0x6f0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	f040 80d1 	bne.w	80034a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003306:	f7ff fceb 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 800330a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	469a      	mov	sl, r3
 8003310:	f04f 0b00 	mov.w	fp, #0
 8003314:	46d0      	mov	r8, sl
 8003316:	46d9      	mov	r9, fp
 8003318:	eb18 0308 	adds.w	r3, r8, r8
 800331c:	eb49 0409 	adc.w	r4, r9, r9
 8003320:	4698      	mov	r8, r3
 8003322:	46a1      	mov	r9, r4
 8003324:	eb18 080a 	adds.w	r8, r8, sl
 8003328:	eb49 090b 	adc.w	r9, r9, fp
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003338:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800333c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003340:	4688      	mov	r8, r1
 8003342:	4691      	mov	r9, r2
 8003344:	eb1a 0508 	adds.w	r5, sl, r8
 8003348:	eb4b 0609 	adc.w	r6, fp, r9
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f04f 0400 	mov.w	r4, #0
 800335e:	0094      	lsls	r4, r2, #2
 8003360:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003364:	008b      	lsls	r3, r1, #2
 8003366:	461a      	mov	r2, r3
 8003368:	4623      	mov	r3, r4
 800336a:	4628      	mov	r0, r5
 800336c:	4631      	mov	r1, r6
 800336e:	f7fc ff2b 	bl	80001c8 <__aeabi_uldivmod>
 8003372:	4603      	mov	r3, r0
 8003374:	460c      	mov	r4, r1
 8003376:	461a      	mov	r2, r3
 8003378:	4bb8      	ldr	r3, [pc, #736]	; (800365c <UART_SetConfig+0x6f4>)
 800337a:	fba3 2302 	umull	r2, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	469b      	mov	fp, r3
 8003388:	f04f 0c00 	mov.w	ip, #0
 800338c:	46d9      	mov	r9, fp
 800338e:	46e2      	mov	sl, ip
 8003390:	eb19 0309 	adds.w	r3, r9, r9
 8003394:	eb4a 040a 	adc.w	r4, sl, sl
 8003398:	4699      	mov	r9, r3
 800339a:	46a2      	mov	sl, r4
 800339c:	eb19 090b 	adds.w	r9, r9, fp
 80033a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033b8:	4689      	mov	r9, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	eb1b 0509 	adds.w	r5, fp, r9
 80033c0:	eb4c 060a 	adc.w	r6, ip, sl
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	f04f 0400 	mov.w	r4, #0
 80033d6:	0094      	lsls	r4, r2, #2
 80033d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033dc:	008b      	lsls	r3, r1, #2
 80033de:	461a      	mov	r2, r3
 80033e0:	4623      	mov	r3, r4
 80033e2:	4628      	mov	r0, r5
 80033e4:	4631      	mov	r1, r6
 80033e6:	f7fc feef 	bl	80001c8 <__aeabi_uldivmod>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b9a      	ldr	r3, [pc, #616]	; (800365c <UART_SetConfig+0x6f4>)
 80033f2:	fba3 1302 	umull	r1, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2164      	movs	r1, #100	; 0x64
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a95      	ldr	r2, [pc, #596]	; (800365c <UART_SetConfig+0x6f4>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	4498      	add	r8, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	469b      	mov	fp, r3
 8003416:	f04f 0c00 	mov.w	ip, #0
 800341a:	46d9      	mov	r9, fp
 800341c:	46e2      	mov	sl, ip
 800341e:	eb19 0309 	adds.w	r3, r9, r9
 8003422:	eb4a 040a 	adc.w	r4, sl, sl
 8003426:	4699      	mov	r9, r3
 8003428:	46a2      	mov	sl, r4
 800342a:	eb19 090b 	adds.w	r9, r9, fp
 800342e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800343e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003442:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003446:	4689      	mov	r9, r1
 8003448:	4692      	mov	sl, r2
 800344a:	eb1b 0509 	adds.w	r5, fp, r9
 800344e:	eb4c 060a 	adc.w	r6, ip, sl
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4619      	mov	r1, r3
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	0094      	lsls	r4, r2, #2
 8003466:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800346a:	008b      	lsls	r3, r1, #2
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	4628      	mov	r0, r5
 8003472:	4631      	mov	r1, r6
 8003474:	f7fc fea8 	bl	80001c8 <__aeabi_uldivmod>
 8003478:	4603      	mov	r3, r0
 800347a:	460c      	mov	r4, r1
 800347c:	461a      	mov	r2, r3
 800347e:	4b77      	ldr	r3, [pc, #476]	; (800365c <UART_SetConfig+0x6f4>)
 8003480:	fba3 1302 	umull	r1, r3, r3, r2
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	2164      	movs	r1, #100	; 0x64
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	3332      	adds	r3, #50	; 0x32
 8003492:	4a72      	ldr	r2, [pc, #456]	; (800365c <UART_SetConfig+0x6f4>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4442      	add	r2, r8
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	e0d0      	b.n	800364a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7ff fc06 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 80034ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	469a      	mov	sl, r3
 80034b2:	f04f 0b00 	mov.w	fp, #0
 80034b6:	46d0      	mov	r8, sl
 80034b8:	46d9      	mov	r9, fp
 80034ba:	eb18 0308 	adds.w	r3, r8, r8
 80034be:	eb49 0409 	adc.w	r4, r9, r9
 80034c2:	4698      	mov	r8, r3
 80034c4:	46a1      	mov	r9, r4
 80034c6:	eb18 080a 	adds.w	r8, r8, sl
 80034ca:	eb49 090b 	adc.w	r9, r9, fp
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034e2:	4688      	mov	r8, r1
 80034e4:	4691      	mov	r9, r2
 80034e6:	eb1a 0508 	adds.w	r5, sl, r8
 80034ea:	eb4b 0609 	adc.w	r6, fp, r9
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f04f 0400 	mov.w	r4, #0
 8003500:	0094      	lsls	r4, r2, #2
 8003502:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003506:	008b      	lsls	r3, r1, #2
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	4628      	mov	r0, r5
 800350e:	4631      	mov	r1, r6
 8003510:	f7fc fe5a 	bl	80001c8 <__aeabi_uldivmod>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	461a      	mov	r2, r3
 800351a:	4b50      	ldr	r3, [pc, #320]	; (800365c <UART_SetConfig+0x6f4>)
 800351c:	fba3 2302 	umull	r2, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	469b      	mov	fp, r3
 800352a:	f04f 0c00 	mov.w	ip, #0
 800352e:	46d9      	mov	r9, fp
 8003530:	46e2      	mov	sl, ip
 8003532:	eb19 0309 	adds.w	r3, r9, r9
 8003536:	eb4a 040a 	adc.w	r4, sl, sl
 800353a:	4699      	mov	r9, r3
 800353c:	46a2      	mov	sl, r4
 800353e:	eb19 090b 	adds.w	r9, r9, fp
 8003542:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800355a:	4689      	mov	r9, r1
 800355c:	4692      	mov	sl, r2
 800355e:	eb1b 0509 	adds.w	r5, fp, r9
 8003562:	eb4c 060a 	adc.w	r6, ip, sl
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4619      	mov	r1, r3
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	f04f 0400 	mov.w	r4, #0
 8003578:	0094      	lsls	r4, r2, #2
 800357a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800357e:	008b      	lsls	r3, r1, #2
 8003580:	461a      	mov	r2, r3
 8003582:	4623      	mov	r3, r4
 8003584:	4628      	mov	r0, r5
 8003586:	4631      	mov	r1, r6
 8003588:	f7fc fe1e 	bl	80001c8 <__aeabi_uldivmod>
 800358c:	4603      	mov	r3, r0
 800358e:	460c      	mov	r4, r1
 8003590:	461a      	mov	r2, r3
 8003592:	4b32      	ldr	r3, [pc, #200]	; (800365c <UART_SetConfig+0x6f4>)
 8003594:	fba3 1302 	umull	r1, r3, r3, r2
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	2164      	movs	r1, #100	; 0x64
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	3332      	adds	r3, #50	; 0x32
 80035a6:	4a2d      	ldr	r2, [pc, #180]	; (800365c <UART_SetConfig+0x6f4>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b2:	4498      	add	r8, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	469b      	mov	fp, r3
 80035b8:	f04f 0c00 	mov.w	ip, #0
 80035bc:	46d9      	mov	r9, fp
 80035be:	46e2      	mov	sl, ip
 80035c0:	eb19 0309 	adds.w	r3, r9, r9
 80035c4:	eb4a 040a 	adc.w	r4, sl, sl
 80035c8:	4699      	mov	r9, r3
 80035ca:	46a2      	mov	sl, r4
 80035cc:	eb19 090b 	adds.w	r9, r9, fp
 80035d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035e8:	4689      	mov	r9, r1
 80035ea:	4692      	mov	sl, r2
 80035ec:	eb1b 0509 	adds.w	r5, fp, r9
 80035f0:	eb4c 060a 	adc.w	r6, ip, sl
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	0094      	lsls	r4, r2, #2
 8003608:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800360c:	008b      	lsls	r3, r1, #2
 800360e:	461a      	mov	r2, r3
 8003610:	4623      	mov	r3, r4
 8003612:	4628      	mov	r0, r5
 8003614:	4631      	mov	r1, r6
 8003616:	f7fc fdd7 	bl	80001c8 <__aeabi_uldivmod>
 800361a:	4603      	mov	r3, r0
 800361c:	460c      	mov	r4, r1
 800361e:	461a      	mov	r2, r3
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <UART_SetConfig+0x6f4>)
 8003622:	fba3 1302 	umull	r1, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2164      	movs	r1, #100	; 0x64
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	3332      	adds	r3, #50	; 0x32
 8003634:	4a09      	ldr	r2, [pc, #36]	; (800365c <UART_SetConfig+0x6f4>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4442      	add	r2, r8
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	e7ff      	b.n	800364a <UART_SetConfig+0x6e2>
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003654:	40011000 	.word	0x40011000
 8003658:	40011400 	.word	0x40011400
 800365c:	51eb851f 	.word	0x51eb851f

08003660 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003660:	b084      	sub	sp, #16
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	f107 001c 	add.w	r0, r7, #28
 800366e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	2b01      	cmp	r3, #1
 8003676:	d122      	bne.n	80036be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800368c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f001 fac6 	bl	8004c44 <USB_CoreReset>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e01a      	b.n	80036f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 faba 	bl	8004c44 <USB_CoreReset>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
 80036e6:	e005      	b.n	80036f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10b      	bne.n	8003712 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f043 0206 	orr.w	r2, r3, #6
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800371e:	b004      	add	sp, #16
 8003720:	4770      	bx	lr
	...

08003724 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d165      	bne.n	8003804 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4a41      	ldr	r2, [pc, #260]	; (8003840 <USB_SetTurnaroundTime+0x11c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d906      	bls.n	800374e <USB_SetTurnaroundTime+0x2a>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4a40      	ldr	r2, [pc, #256]	; (8003844 <USB_SetTurnaroundTime+0x120>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d802      	bhi.n	800374e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003748:	230f      	movs	r3, #15
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e062      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <USB_SetTurnaroundTime+0x120>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d906      	bls.n	8003764 <USB_SetTurnaroundTime+0x40>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <USB_SetTurnaroundTime+0x124>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d802      	bhi.n	8003764 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800375e:	230e      	movs	r3, #14
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e057      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a38      	ldr	r2, [pc, #224]	; (8003848 <USB_SetTurnaroundTime+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d906      	bls.n	800377a <USB_SetTurnaroundTime+0x56>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a37      	ldr	r2, [pc, #220]	; (800384c <USB_SetTurnaroundTime+0x128>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d802      	bhi.n	800377a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003774:	230d      	movs	r3, #13
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	e04c      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4a33      	ldr	r2, [pc, #204]	; (800384c <USB_SetTurnaroundTime+0x128>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d906      	bls.n	8003790 <USB_SetTurnaroundTime+0x6c>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a32      	ldr	r2, [pc, #200]	; (8003850 <USB_SetTurnaroundTime+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d802      	bhi.n	8003790 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800378a:	230c      	movs	r3, #12
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e041      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4a2f      	ldr	r2, [pc, #188]	; (8003850 <USB_SetTurnaroundTime+0x12c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d906      	bls.n	80037a6 <USB_SetTurnaroundTime+0x82>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <USB_SetTurnaroundTime+0x130>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d802      	bhi.n	80037a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037a0:	230b      	movs	r3, #11
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e036      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <USB_SetTurnaroundTime+0x130>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d906      	bls.n	80037bc <USB_SetTurnaroundTime+0x98>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <USB_SetTurnaroundTime+0x134>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037b6:	230a      	movs	r3, #10
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e02b      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4a26      	ldr	r2, [pc, #152]	; (8003858 <USB_SetTurnaroundTime+0x134>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d906      	bls.n	80037d2 <USB_SetTurnaroundTime+0xae>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a25      	ldr	r2, [pc, #148]	; (800385c <USB_SetTurnaroundTime+0x138>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d802      	bhi.n	80037d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037cc:	2309      	movs	r3, #9
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e020      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4a21      	ldr	r2, [pc, #132]	; (800385c <USB_SetTurnaroundTime+0x138>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d906      	bls.n	80037e8 <USB_SetTurnaroundTime+0xc4>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a20      	ldr	r2, [pc, #128]	; (8003860 <USB_SetTurnaroundTime+0x13c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d802      	bhi.n	80037e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037e2:	2308      	movs	r3, #8
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e015      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <USB_SetTurnaroundTime+0x13c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d906      	bls.n	80037fe <USB_SetTurnaroundTime+0xda>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <USB_SetTurnaroundTime+0x140>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d802      	bhi.n	80037fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037f8:	2307      	movs	r3, #7
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e00a      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037fe:	2306      	movs	r3, #6
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e007      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800380a:	2309      	movs	r3, #9
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e001      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003810:	2309      	movs	r3, #9
 8003812:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	029b      	lsls	r3, r3, #10
 8003828:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	00d8acbf 	.word	0x00d8acbf
 8003844:	00e4e1bf 	.word	0x00e4e1bf
 8003848:	00f423ff 	.word	0x00f423ff
 800384c:	0106737f 	.word	0x0106737f
 8003850:	011a499f 	.word	0x011a499f
 8003854:	01312cff 	.word	0x01312cff
 8003858:	014ca43f 	.word	0x014ca43f
 800385c:	016e35ff 	.word	0x016e35ff
 8003860:	01a6ab1f 	.word	0x01a6ab1f
 8003864:	01e847ff 	.word	0x01e847ff

08003868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d106      	bne.n	80038d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e00b      	b.n	80038f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e001      	b.n	80038f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e003      	b.n	80038f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038f0:	2032      	movs	r0, #50	; 0x32
 80038f2:	f7fd f963 	bl	8000bbc <HAL_Delay>

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003900:	b084      	sub	sp, #16
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800390e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e009      	b.n	8003934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	3340      	adds	r3, #64	; 0x40
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	2200      	movs	r2, #0
 800392c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	3301      	adds	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0e      	cmp	r3, #14
 8003938:	d9f2      	bls.n	8003920 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11c      	bne.n	800397a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
 8003978:	e00b      	b.n	8003992 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a4:	4619      	mov	r1, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	461a      	mov	r2, r3
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10c      	bne.n	80039d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039be:	2100      	movs	r1, #0
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f949 	bl	8003c58 <USB_SetDevSpeed>
 80039c6:	e008      	b.n	80039da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039c8:	2101      	movs	r1, #1
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f944 	bl	8003c58 <USB_SetDevSpeed>
 80039d0:	e003      	b.n	80039da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039d2:	2103      	movs	r1, #3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f93f 	bl	8003c58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039da:	2110      	movs	r1, #16
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8f3 	bl	8003bc8 <USB_FlushTxFifo>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f911 	bl	8003c14 <USB_FlushRxFifo>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	461a      	mov	r2, r3
 8003a04:	2300      	movs	r3, #0
 8003a06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e043      	b.n	8003aae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3c:	d118      	bne.n	8003a70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	461a      	mov	r2, r3
 8003a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e013      	b.n	8003a82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e008      	b.n	8003a82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2300      	movs	r3, #0
 8003a92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3b7      	bcc.n	8003a26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e043      	b.n	8003b44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ad2:	d118      	bne.n	8003b06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e013      	b.n	8003b18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e008      	b.n	8003b18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	461a      	mov	r2, r3
 8003b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3b7      	bcc.n	8003abc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f043 0210 	orr.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <USB_DevInit+0x2c4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f043 0208 	orr.w	r2, r3, #8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc0:	b004      	add	sp, #16
 8003bc2:	4770      	bx	lr
 8003bc4:	803c3800 	.word	0x803c3800

08003bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <USB_FlushTxFifo+0x48>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e006      	b.n	8003c02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d0f0      	beq.n	8003be2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	00030d40 	.word	0x00030d40

08003c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2210      	movs	r2, #16
 8003c24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <USB_FlushRxFifo+0x40>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e006      	b.n	8003c46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d0f0      	beq.n	8003c26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	00030d40 	.word	0x00030d40

08003c58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0306 	and.w	r3, r3, #6
 8003ca2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
 8003cae:	e00a      	b.n	8003cc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d002      	beq.n	8003cbc <USB_GetDevSpeed+0x32>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d102      	bne.n	8003cc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	75fb      	strb	r3, [r7, #23]
 8003cc0:	e001      	b.n	8003cc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d13a      	bne.n	8003d66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d155      	bne.n	8003dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	78db      	ldrb	r3, [r3, #3]
 8003d42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	059b      	lsls	r3, r3, #22
 8003d4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e036      	b.n	8003dd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11a      	bne.n	8003dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	78db      	ldrb	r3, [r3, #3]
 8003db8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	0151      	lsls	r1, r2, #5
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d161      	bne.n	8003ec4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e16:	d11f      	bne.n	8003e58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e78:	4013      	ands	r3, r2
 8003e7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	0159      	lsls	r1, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <USB_DeactivateEndpoint+0x1b0>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
 8003ec2:	e060      	b.n	8003f86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eda:	d11f      	bne.n	8003f1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003efa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	43db      	mvns	r3, r3
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f60:	4013      	ands	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	0159      	lsls	r1, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	440b      	add	r3, r1
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <USB_DeactivateEndpoint+0x1b4>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	ec337800 	.word	0xec337800
 8003f98:	eff37800 	.word	0xeff37800

08003f9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 815c 	bne.w	8004276 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d132      	bne.n	800402c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004024:	0cdb      	lsrs	r3, r3, #19
 8004026:	04db      	lsls	r3, r3, #19
 8004028:	6113      	str	r3, [r2, #16]
 800402a:	e074      	b.n	8004116 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	440a      	add	r2, r1
 8004042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004046:	0cdb      	lsrs	r3, r3, #19
 8004048:	04db      	lsls	r3, r3, #19
 800404a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	440a      	add	r2, r1
 8004062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004066:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800406a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800406e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6959      	ldr	r1, [r3, #20]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	440b      	add	r3, r1
 8004088:	1e59      	subs	r1, r3, #1
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004092:	04d9      	lsls	r1, r3, #19
 8004094:	4b9d      	ldr	r3, [pc, #628]	; (800430c <USB_EPStartXfer+0x370>)
 8004096:	400b      	ands	r3, r1
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	0148      	lsls	r0, r1, #5
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	4401      	add	r1, r0
 80040a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	69b9      	ldr	r1, [r7, #24]
 80040c0:	0148      	lsls	r0, r1, #5
 80040c2:	69f9      	ldr	r1, [r7, #28]
 80040c4:	4401      	add	r1, r0
 80040c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	78db      	ldrb	r3, [r3, #3]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d11f      	bne.n	8004116 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004114:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d14b      	bne.n	80041b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	78db      	ldrb	r3, [r3, #3]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d128      	bne.n	8004192 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d110      	bne.n	8004172 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	440a      	add	r2, r1
 8004166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	e00f      	b.n	8004192 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004190:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e12f      	b.n	8004414 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d015      	beq.n	8004208 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8117 	beq.w	8004414 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004202:	4313      	orrs	r3, r2
 8004204:	634b      	str	r3, [r1, #52]	; 0x34
 8004206:	e105      	b.n	8004414 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d110      	bne.n	800423a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e00f      	b.n	800425a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	b298      	uxth	r0, r3
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4603      	mov	r3, r0
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fa2b 	bl	80046ca <USB_WritePacket>
 8004274:	e0ce      	b.n	8004414 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004290:	0cdb      	lsrs	r3, r3, #19
 8004292:	04db      	lsls	r3, r3, #19
 8004294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d126      	bne.n	8004310 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	0148      	lsls	r0, r1, #5
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	4401      	add	r1, r0
 80042e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004306:	6113      	str	r3, [r2, #16]
 8004308:	e036      	b.n	8004378 <USB_EPStartXfer+0x3dc>
 800430a:	bf00      	nop
 800430c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4413      	add	r3, r2
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	8afb      	ldrh	r3, [r7, #22]
 8004336:	04d9      	lsls	r1, r3, #19
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <USB_EPStartXfer+0x484>)
 800433a:	400b      	ands	r3, r1
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	0148      	lsls	r0, r1, #5
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	4401      	add	r1, r0
 8004344:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	8af9      	ldrh	r1, [r7, #22]
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	0148      	lsls	r0, r1, #5
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	4401      	add	r1, r0
 8004370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10d      	bne.n	800439a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	460a      	mov	r2, r1
 8004398:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d128      	bne.n	80043f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d110      	bne.n	80043d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00f      	b.n	80043f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	1ff80000 	.word	0x1ff80000

08004424 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b01      	cmp	r3, #1
 8004442:	f040 80cd 	bne.w	80045e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d132      	bne.n	80044b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004468:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800446c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ac:	0cdb      	lsrs	r3, r3, #19
 80044ae:	04db      	lsls	r3, r3, #19
 80044b0:	6113      	str	r3, [r2, #16]
 80044b2:	e04e      	b.n	8004552 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ce:	0cdb      	lsrs	r3, r3, #19
 80044d0:	04db      	lsls	r3, r3, #19
 80044d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	0151      	lsls	r1, r2, #5
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	440a      	add	r2, r1
 80044ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d903      	bls.n	800450c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	0148      	lsls	r0, r1, #5
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	4401      	add	r1, r0
 800454a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800454e:	4313      	orrs	r3, r2
 8004550:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d11e      	bne.n	8004596 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e092      	b.n	80046bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d07e      	beq.n	80046bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	6979      	ldr	r1, [r7, #20]
 80045d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045da:	4313      	orrs	r3, r2
 80045dc:	634b      	str	r3, [r1, #52]	; 0x34
 80045de:	e06d      	b.n	80046bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fa:	0cdb      	lsrs	r3, r3, #19
 80045fc:	04db      	lsls	r3, r3, #19
 80045fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800461e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004622:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466a:	6939      	ldr	r1, [r7, #16]
 800466c:	0148      	lsls	r0, r1, #5
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	4401      	add	r1, r0
 8004672:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004676:	4313      	orrs	r3, r2
 8004678:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10d      	bne.n	800469c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	68d9      	ldr	r1, [r3, #12]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	460a      	mov	r2, r1
 800469a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b089      	sub	sp, #36	; 0x24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	4611      	mov	r1, r2
 80046d6:	461a      	mov	r2, r3
 80046d8:	460b      	mov	r3, r1
 80046da:	71fb      	strb	r3, [r7, #7]
 80046dc:	4613      	mov	r3, r2
 80046de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d11a      	bne.n	8004726 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046f0:	88bb      	ldrh	r3, [r7, #4]
 80046f2:	3303      	adds	r3, #3
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e00f      	b.n	800471e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	031a      	lsls	r2, r3, #12
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	4413      	add	r3, r2
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	461a      	mov	r2, r3
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3304      	adds	r3, #4
 8004716:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3301      	adds	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d3eb      	bcc.n	80046fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3724      	adds	r7, #36	; 0x24
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	3303      	adds	r3, #3
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e00b      	b.n	8004770 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	601a      	str	r2, [r3, #0]
    pDest++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3304      	adds	r3, #4
 8004768:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	3301      	adds	r3, #1
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d3ef      	bcc.n	8004758 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004778:	69fb      	ldr	r3, [r7, #28]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3724      	adds	r7, #36	; 0x24
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d12c      	bne.n	80047fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db12      	blt.n	80047da <USB_EPSetStall+0x54>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00f      	beq.n	80047da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e02b      	b.n	8004854 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	db12      	blt.n	8004834 <USB_EPSetStall+0xae>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004832:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d128      	bne.n	80048d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800489c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	78db      	ldrb	r3, [r3, #3]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d003      	beq.n	80048ae <USB_EPClearStall+0x4c>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	78db      	ldrb	r3, [r3, #3]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d138      	bne.n	8004920 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e027      	b.n	8004920 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d003      	beq.n	8004900 <USB_EPClearStall+0x9e>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d10f      	bne.n	8004920 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004950:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004994:	f023 0303 	bic.w	r3, r3, #3
 8004998:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a8:	f023 0302 	bic.w	r3, r3, #2
 80049ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ea:	f043 0302 	orr.w	r3, r3, #2
 80049ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	b29b      	uxth	r3, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004aba:	68bb      	ldr	r3, [r7, #8]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	01db      	lsls	r3, r3, #7
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b16:	68bb      	ldr	r3, [r7, #8]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0301 	and.w	r3, r3, #1
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b5e:	f023 0307 	bic.w	r3, r3, #7
 8004b62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	460b      	mov	r3, r1
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	333c      	adds	r3, #60	; 0x3c
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <USB_EP0_OutStart+0xb8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d90a      	bls.n	8004bc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bbc:	d101      	bne.n	8004bc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e037      	b.n	8004c32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f043 0318 	orr.w	r3, r3, #24
 8004bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10f      	bne.n	8004c30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	4f54300a 	.word	0x4f54300a

08004c44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <USB_CoreReset+0x64>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e01b      	b.n	8004c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	daf2      	bge.n	8004c50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <USB_CoreReset+0x64>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d0f0      	beq.n	8004c7a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004cbc:	f002 f8d6 	bl	8006e6c <malloc>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d105      	bne.n	8004cd6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e066      	b.n	8004da4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7c1b      	ldrb	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d119      	bne.n	8004d1a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cea:	2202      	movs	r2, #2
 8004cec:	2181      	movs	r1, #129	; 0x81
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 ff43 	bl	8006b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cfe:	2202      	movs	r2, #2
 8004d00:	2101      	movs	r1, #1
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 ff39 	bl	8006b7a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2210      	movs	r2, #16
 8004d14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004d18:	e016      	b.n	8004d48 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d1a:	2340      	movs	r3, #64	; 0x40
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	2181      	movs	r1, #129	; 0x81
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 ff2a 	bl	8006b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	2202      	movs	r2, #2
 8004d30:	2101      	movs	r1, #1
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f001 ff21 	bl	8006b7a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2210      	movs	r2, #16
 8004d44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d48:	2308      	movs	r3, #8
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	2182      	movs	r1, #130	; 0x82
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 ff13 	bl	8006b7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7c1b      	ldrb	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d88:	2101      	movs	r1, #1
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 ffe4 	bl	8006d58 <USBD_LL_PrepareReceive>
 8004d90:	e007      	b.n	8004da2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d98:	2340      	movs	r3, #64	; 0x40
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f001 ffdb 	bl	8006d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004dbc:	2181      	movs	r1, #129	; 0x81
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 ff01 	bl	8006bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004dca:	2101      	movs	r1, #1
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 fefa 	bl	8006bc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004dda:	2182      	movs	r1, #130	; 0x82
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 fef2 	bl	8006bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f002 f835 	bl	8006e7c <free>
    pdev->pClassData = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d03a      	beq.n	8004ec4 <USBD_CDC_Setup+0xa0>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	f040 8097 	bne.w	8004f82 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	88db      	ldrh	r3, [r3, #6]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d029      	beq.n	8004eb0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b25b      	sxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da11      	bge.n	8004e8a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004e72:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	88d2      	ldrh	r2, [r2, #6]
 8004e78:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	88db      	ldrh	r3, [r3, #6]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fa6d 	bl	8006362 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004e88:	e082      	b.n	8004f90 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	785a      	ldrb	r2, [r3, #1]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fa86 	bl	80063ba <USBD_CtlPrepareRx>
    break;
 8004eae:	e06f      	b.n	8004f90 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	7850      	ldrb	r0, [r2, #1]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	4798      	blx	r3
    break;
 8004ec2:	e065      	b.n	8004f90 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b0b      	cmp	r3, #11
 8004eca:	d84f      	bhi.n	8004f6c <USBD_CDC_Setup+0x148>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <USBD_CDC_Setup+0xb0>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004f7b 	.word	0x08004f7b
 8004edc:	08004f6d 	.word	0x08004f6d
 8004ee0:	08004f6d 	.word	0x08004f6d
 8004ee4:	08004f6d 	.word	0x08004f6d
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	08004f6d 	.word	0x08004f6d
 8004ef0:	08004f6d 	.word	0x08004f6d
 8004ef4:	08004f6d 	.word	0x08004f6d
 8004ef8:	08004f6d 	.word	0x08004f6d
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004f55 	.word	0x08004f55
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d107      	bne.n	8004f1e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	2202      	movs	r2, #2
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fa23 	bl	8006362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004f1c:	e030      	b.n	8004f80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 f9ad 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f26:	2303      	movs	r3, #3
 8004f28:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2a:	e029      	b.n	8004f80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d107      	bne.n	8004f46 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f36:	f107 030f 	add.w	r3, r7, #15
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fa0f 	bl	8006362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004f44:	e01c      	b.n	8004f80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 f999 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	75fb      	strb	r3, [r7, #23]
      break;
 8004f52:	e015      	b.n	8004f80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d00f      	beq.n	8004f7e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 f98d 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f66:	2303      	movs	r3, #3
 8004f68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f6a:	e008      	b.n	8004f7e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 f986 	bl	8006280 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f74:	2303      	movs	r3, #3
 8004f76:	75fb      	strb	r3, [r7, #23]
      break;
 8004f78:	e002      	b.n	8004f80 <USBD_CDC_Setup+0x15c>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e008      	b.n	8004f90 <USBD_CDC_Setup+0x16c>
      break;
 8004f7e:	bf00      	nop
    }
    break;
 8004f80:	e006      	b.n	8004f90 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 f97b 	bl	8006280 <USBD_CtlError>
    ret = USBD_FAIL;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	75fb      	strb	r3, [r7, #23]
    break;
 8004f8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop

08004f9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004fae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e049      	b.n	8005052 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3318      	adds	r3, #24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d029      	beq.n	8005030 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3318      	adds	r3, #24
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	78f9      	ldrb	r1, [r7, #3]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	1a5b      	subs	r3, r3, r1
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4403      	add	r3, r0
 8004ffc:	3344      	adds	r3, #68	; 0x44
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	fbb2 f1f3 	udiv	r1, r2, r3
 8005004:	fb03 f301 	mul.w	r3, r3, r1
 8005008:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800500a:	2b00      	cmp	r3, #0
 800500c:	d110      	bne.n	8005030 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3318      	adds	r3, #24
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005022:	78f9      	ldrb	r1, [r7, #3]
 8005024:	2300      	movs	r3, #0
 8005026:	2200      	movs	r2, #0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 fe74 	bl	8006d16 <USBD_LL_Transmit>
 800502e:	e00f      	b.n	8005050 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	e015      	b.n	80050a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 fe8a 	bl	8006d9a <USBD_LL_GetRxDataSize>
 8005086:	4602      	mov	r2, r0
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050a2:	4611      	mov	r1, r2
 80050a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d015      	beq.n	80050f6 <USBD_CDC_EP0_RxReady+0x46>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050d0:	2bff      	cmp	r3, #255	; 0xff
 80050d2:	d010      	beq.n	80050f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80050e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050ea:	b292      	uxth	r2, r2
 80050ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	22ff      	movs	r2, #255	; 0xff
 80050f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2243      	movs	r2, #67	; 0x43
 800510c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800510e:	4b03      	ldr	r3, [pc, #12]	; (800511c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000094 	.word	0x20000094

08005120 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2243      	movs	r2, #67	; 0x43
 800512c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800512e:	4b03      	ldr	r3, [pc, #12]	; (800513c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000050 	.word	0x20000050

08005140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2243      	movs	r2, #67	; 0x43
 800514c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800514e:	4b03      	ldr	r3, [pc, #12]	; (800515c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	200000d8 	.word	0x200000d8

08005160 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	220a      	movs	r2, #10
 800516c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800516e:	4b03      	ldr	r3, [pc, #12]	; (800517c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	2000000c 	.word	0x2000000c

08005180 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005190:	2303      	movs	r3, #3
 8005192:	e004      	b.n	800519e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800521e:	2303      	movs	r3, #3
 8005220:	e016      	b.n	8005250 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7c1b      	ldrb	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005234:	2101      	movs	r1, #1
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fd8e 	bl	8006d58 <USBD_LL_PrepareReceive>
 800523c:	e007      	b.n	800524e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 fd85 	bl	8006d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800526c:	2303      	movs	r3, #3
 800526e:	e025      	b.n	80052bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	79fa      	ldrb	r2, [r7, #7]
 80052ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f001 fbfb 	bl	8006aac <USBD_LL_Init>
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	e010      	b.n	80052fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f107 020e 	add.w	r2, r7, #14
 80052f0:	4610      	mov	r0, r2
 80052f2:	4798      	blx	r3
 80052f4:	4602      	mov	r2, r0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 fc18 	bl	8006b44 <USBD_LL_Start>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4611      	mov	r1, r2
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	4611      	mov	r1, r2
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
  }

  return USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 ff2c 	bl	800620c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053c2:	461a      	mov	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d00e      	beq.n	80053f6 <USBD_LL_SetupStage+0x5a>
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d302      	bcc.n	80053e2 <USBD_LL_SetupStage+0x46>
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d014      	beq.n	800540a <USBD_LL_SetupStage+0x6e>
 80053e0:	e01d      	b.n	800541e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa18 	bl	8005820 <USBD_StdDevReq>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	e020      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa7c 	bl	80058fc <USBD_StdItfReq>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e016      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fab8 	bl	8005988 <USBD_StdEPReq>
 8005418:	4603      	mov	r3, r0
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e00c      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fbe9 	bl	8006c04 <USBD_LL_StallEP>
 8005432:	4603      	mov	r3, r0
 8005434:	73fb      	strb	r3, [r7, #15]
      break;
 8005436:	bf00      	nop
  }

  return ret;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b086      	sub	sp, #24
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	460b      	mov	r3, r1
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005450:	7afb      	ldrb	r3, [r7, #11]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d137      	bne.n	80054c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800545c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005464:	2b03      	cmp	r3, #3
 8005466:	d14a      	bne.n	80054fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d913      	bls.n	800549c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4293      	cmp	r3, r2
 800548c:	bf28      	it	cs
 800548e:	4613      	movcs	r3, r2
 8005490:	461a      	mov	r2, r3
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 ffad 	bl	80063f4 <USBD_CtlContinueRx>
 800549a:	e030      	b.n	80054fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d105      	bne.n	80054be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 ffa9 	bl	8006416 <USBD_CtlSendStatus>
 80054c4:	e01b      	b.n	80054fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d013      	beq.n	80054fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d10e      	bne.n	80054fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	7afa      	ldrb	r2, [r7, #11]
 80054e6:	4611      	mov	r1, r2
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	4798      	blx	r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	e002      	b.n	8005500 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e000      	b.n	8005500 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	460b      	mov	r3, r1
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d16a      	bne.n	80055f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3314      	adds	r3, #20
 8005520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005528:	2b02      	cmp	r3, #2
 800552a:	d155      	bne.n	80055d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d914      	bls.n	8005562 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	1ad2      	subs	r2, r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	461a      	mov	r2, r3
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 ff22 	bl	8006398 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005554:	2300      	movs	r3, #0
 8005556:	2200      	movs	r2, #0
 8005558:	2100      	movs	r1, #0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 fbfc 	bl	8006d58 <USBD_LL_PrepareReceive>
 8005560:	e03a      	b.n	80055d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d11c      	bne.n	80055a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005576:	429a      	cmp	r2, r3
 8005578:	d316      	bcc.n	80055a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005584:	429a      	cmp	r2, r3
 8005586:	d20f      	bcs.n	80055a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005588:	2200      	movs	r2, #0
 800558a:	2100      	movs	r1, #0
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 ff03 	bl	8006398 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800559a:	2300      	movs	r3, #0
 800559c:	2200      	movs	r2, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f001 fbd9 	bl	8006d58 <USBD_LL_PrepareReceive>
 80055a6:	e017      	b.n	80055d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d105      	bne.n	80055ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055ca:	2180      	movs	r1, #128	; 0x80
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f001 fb19 	bl	8006c04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 ff32 	bl	800643c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d123      	bne.n	800562a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fe9b 	bl	800531e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80055f0:	e01b      	b.n	800562a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d013      	beq.n	8005626 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005604:	2b03      	cmp	r3, #3
 8005606:	d10e      	bne.n	8005626 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	7afa      	ldrb	r2, [r7, #11]
 8005612:	4611      	mov	r1, r2
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	4798      	blx	r3
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	e002      	b.n	800562c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005626:	2303      	movs	r3, #3
 8005628:	e000      	b.n	800562c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6852      	ldr	r2, [r2, #4]
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	4611      	mov	r1, r2
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	2200      	movs	r2, #0
 800567c:	2100      	movs	r1, #0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 fa7b 	bl	8006b7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	2200      	movs	r2, #0
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fa6d 	bl	8006b7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2240      	movs	r2, #64	; 0x40
 80056aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2204      	movs	r2, #4
 80056ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570e:	2b04      	cmp	r3, #4
 8005710:	d105      	bne.n	800571e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573a:	2b03      	cmp	r3, #3
 800573c:	d10b      	bne.n	8005756 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6852      	ldr	r2, [r2, #4]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	4611      	mov	r1, r2
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
  }

  return USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b087      	sub	sp, #28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3301      	adds	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005800:	8a3b      	ldrh	r3, [r7, #16]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	b21a      	sxth	r2, r3
 8005806:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800580a:	4313      	orrs	r3, r2
 800580c:	b21b      	sxth	r3, r3
 800580e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005810:	89fb      	ldrh	r3, [r7, #14]
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005836:	2b20      	cmp	r3, #32
 8005838:	d004      	beq.n	8005844 <USBD_StdDevReq+0x24>
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d002      	beq.n	8005844 <USBD_StdDevReq+0x24>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <USBD_StdDevReq+0x38>
 8005842:	e050      	b.n	80058e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
    break;
 8005856:	e04b      	b.n	80058f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b09      	cmp	r3, #9
 800585e:	d83c      	bhi.n	80058da <USBD_StdDevReq+0xba>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <USBD_StdDevReq+0x48>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	080058bd 	.word	0x080058bd
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058db 	.word	0x080058db
 8005874:	080058c7 	.word	0x080058c7
 8005878:	080058db 	.word	0x080058db
 800587c:	0800589b 	.word	0x0800589b
 8005880:	08005891 	.word	0x08005891
 8005884:	080058db 	.word	0x080058db
 8005888:	080058b3 	.word	0x080058b3
 800588c:	080058a5 	.word	0x080058a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9ce 	bl	8005c34 <USBD_GetDescriptor>
      break;
 8005898:	e024      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb33 	bl	8005f08 <USBD_SetAddress>
      break;
 80058a2:	e01f      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb70 	bl	8005f8c <USBD_SetConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	e018      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fc0d 	bl	80060d4 <USBD_GetConfig>
      break;
 80058ba:	e013      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fc3c 	bl	800613c <USBD_GetStatus>
      break;
 80058c4:	e00e      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fc6a 	bl	80061a2 <USBD_SetFeature>
      break;
 80058ce:	e009      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc79 	bl	80061ca <USBD_ClrFeature>
      break;
 80058d8:	e004      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fccf 	bl	8006280 <USBD_CtlError>
      break;
 80058e2:	bf00      	nop
    }
    break;
 80058e4:	e004      	b.n	80058f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fcc9 	bl	8006280 <USBD_CtlError>
    break;
 80058ee:	bf00      	nop
  }

  return ret;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005912:	2b20      	cmp	r3, #32
 8005914:	d003      	beq.n	800591e <USBD_StdItfReq+0x22>
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d001      	beq.n	800591e <USBD_StdItfReq+0x22>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12a      	bne.n	8005974 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	3b01      	subs	r3, #1
 8005926:	2b02      	cmp	r3, #2
 8005928:	d81d      	bhi.n	8005966 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	889b      	ldrh	r3, [r3, #4]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d813      	bhi.n	800595c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	88db      	ldrh	r3, [r3, #6]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d110      	bne.n	8005970 <USBD_StdItfReq+0x74>
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10d      	bne.n	8005970 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fd5e 	bl	8006416 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800595a:	e009      	b.n	8005970 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fc8e 	bl	8006280 <USBD_CtlError>
      break;
 8005964:	e004      	b.n	8005970 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fc89 	bl	8006280 <USBD_CtlError>
      break;
 800596e:	e000      	b.n	8005972 <USBD_StdItfReq+0x76>
      break;
 8005970:	bf00      	nop
    }
    break;
 8005972:	e004      	b.n	800597e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc82 	bl	8006280 <USBD_CtlError>
    break;
 800597c:	bf00      	nop
  }

  return ret;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	889b      	ldrh	r3, [r3, #4]
 800599a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d004      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d002      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <USBD_StdEPReq+0x3e>
 80059b0:	e135      	b.n	8005c1e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]
    break;
 80059c4:	e130      	b.n	8005c28 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d03e      	beq.n	8005a4c <USBD_StdEPReq+0xc4>
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d002      	beq.n	80059d8 <USBD_StdEPReq+0x50>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d077      	beq.n	8005ac6 <USBD_StdEPReq+0x13e>
 80059d6:	e11c      	b.n	8005c12 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <USBD_StdEPReq+0x60>
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d015      	beq.n	8005a12 <USBD_StdEPReq+0x8a>
 80059e6:	e02b      	b.n	8005a40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <USBD_StdEPReq+0x80>
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d009      	beq.n	8005a08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f903 	bl	8006c04 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f8ff 	bl	8006c04 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a06:	e020      	b.n	8005a4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fc38 	bl	8006280 <USBD_CtlError>
        break;
 8005a10:	e01b      	b.n	8005a4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	885b      	ldrh	r3, [r3, #2]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10e      	bne.n	8005a38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <USBD_StdEPReq+0xb0>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d008      	beq.n	8005a38 <USBD_StdEPReq+0xb0>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	88db      	ldrh	r3, [r3, #6]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 f8e6 	bl	8006c04 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fcec 	bl	8006416 <USBD_CtlSendStatus>

        break;
 8005a3e:	e004      	b.n	8005a4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fc1c 	bl	8006280 <USBD_CtlError>
        break;
 8005a48:	bf00      	nop
      }
      break;
 8005a4a:	e0e7      	b.n	8005c1c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d002      	beq.n	8005a5c <USBD_StdEPReq+0xd4>
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d015      	beq.n	8005a86 <USBD_StdEPReq+0xfe>
 8005a5a:	e02d      	b.n	8005ab8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <USBD_StdEPReq+0xf4>
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d009      	beq.n	8005a7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 f8c9 	bl	8006c04 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a72:	2180      	movs	r1, #128	; 0x80
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f8c5 	bl	8006c04 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a7a:	e023      	b.n	8005ac4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fbfe 	bl	8006280 <USBD_CtlError>
        break;
 8005a84:	e01e      	b.n	8005ac4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d119      	bne.n	8005ac2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 f8d0 	bl	8006c42 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fcb7 	bl	8006416 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
        }
        break;
 8005ab6:	e004      	b.n	8005ac2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fbe0 	bl	8006280 <USBD_CtlError>
        break;
 8005ac0:	e000      	b.n	8005ac4 <USBD_StdEPReq+0x13c>
        break;
 8005ac2:	bf00      	nop
      }
      break;
 8005ac4:	e0aa      	b.n	8005c1c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d002      	beq.n	8005ad6 <USBD_StdEPReq+0x14e>
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d032      	beq.n	8005b3a <USBD_StdEPReq+0x1b2>
 8005ad4:	e097      	b.n	8005c06 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <USBD_StdEPReq+0x164>
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d004      	beq.n	8005aec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbcb 	bl	8006280 <USBD_CtlError>
          break;
 8005aea:	e091      	b.n	8005c10 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da0b      	bge.n	8005b0c <USBD_StdEPReq+0x184>
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	3310      	adds	r3, #16
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	3304      	adds	r3, #4
 8005b0a:	e00b      	b.n	8005b24 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	3304      	adds	r3, #4
 8005b24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fc15 	bl	8006362 <USBD_CtlSendData>
        break;
 8005b38:	e06a      	b.n	8005c10 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da11      	bge.n	8005b66 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d117      	bne.n	8005b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fb8e 	bl	8006280 <USBD_CtlError>
            break;
 8005b64:	e054      	b.n	8005c10 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb7b 	bl	8006280 <USBD_CtlError>
            break;
 8005b8a:	e041      	b.n	8005c10 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da0b      	bge.n	8005bac <USBD_StdEPReq+0x224>
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3304      	adds	r3, #4
 8005baa:	e00b      	b.n	8005bc4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <USBD_StdEPReq+0x24a>
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d103      	bne.n	8005bda <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e00e      	b.n	8005bf8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 f84e 	bl	8006c80 <USBD_LL_IsStallEP>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fbaf 	bl	8006362 <USBD_CtlSendData>
          break;
 8005c04:	e004      	b.n	8005c10 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fb39 	bl	8006280 <USBD_CtlError>
        break;
 8005c0e:	bf00      	nop
      }
      break;
 8005c10:	e004      	b.n	8005c1c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb33 	bl	8006280 <USBD_CtlError>
      break;
 8005c1a:	bf00      	nop
    }
    break;
 8005c1c:	e004      	b.n	8005c28 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb2d 	bl	8006280 <USBD_CtlError>
    break;
 8005c26:	bf00      	nop
  }

  return ret;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	885b      	ldrh	r3, [r3, #2]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	f200 8128 	bhi.w	8005eaa <USBD_GetDescriptor+0x276>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <USBD_GetDescriptor+0x2c>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c95 	.word	0x08005c95
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005eab 	.word	0x08005eab
 8005c70:	08005eab 	.word	0x08005eab
 8005c74:	08005e4b 	.word	0x08005e4b
 8005c78:	08005e77 	.word	0x08005e77
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	7c12      	ldrb	r2, [r2, #16]
 8005c88:	f107 0108 	add.w	r1, r7, #8
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	60f8      	str	r0, [r7, #12]
    break;
 8005c92:	e112      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	f107 0208 	add.w	r2, r7, #8
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005cb6:	e100      	b.n	8005eba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f107 0208 	add.w	r2, r7, #8
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2202      	movs	r2, #2
 8005cd0:	701a      	strb	r2, [r3, #0]
    break;
 8005cd2:	e0f2      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	f200 80ac 	bhi.w	8005e38 <USBD_GetDescriptor+0x204>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USBD_GetDescriptor+0xb4>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d9d 	.word	0x08005d9d
 8005cf8:	08005dd1 	.word	0x08005dd1
 8005cfc:	08005e05 	.word	0x08005e05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d22:	e091      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 faaa 	bl	8006280 <USBD_CtlError>
        err++;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	72fb      	strb	r3, [r7, #11]
      break;
 8005d32:	e089      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d56:	e077      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa90 	bl	8006280 <USBD_CtlError>
        err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
      break;
 8005d66:	e06f      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d8a:	e05d      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa76 	bl	8006280 <USBD_CtlError>
        err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
      break;
 8005d9a:	e055      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dbe:	e043      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa5c 	bl	8006280 <USBD_CtlError>
        err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8005dce:	e03b      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7c12      	ldrb	r2, [r2, #16]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005df2:	e029      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa42 	bl	8006280 <USBD_CtlError>
        err++;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	72fb      	strb	r3, [r7, #11]
      break;
 8005e02:	e021      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7c12      	ldrb	r2, [r2, #16]
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e26:	e00f      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa28 	bl	8006280 <USBD_CtlError>
        err++;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	72fb      	strb	r3, [r7, #11]
      break;
 8005e36:	e007      	b.n	8005e48 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa20 	bl	8006280 <USBD_CtlError>
      err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005e46:	bf00      	nop
    }
    break;
 8005e48:	e037      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7c1b      	ldrb	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	f107 0208 	add.w	r2, r7, #8
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4798      	blx	r3
 8005e62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e64:	e029      	b.n	8005eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa09 	bl	8006280 <USBD_CtlError>
      err++;
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	3301      	adds	r3, #1
 8005e72:	72fb      	strb	r3, [r7, #11]
    break;
 8005e74:	e021      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7c1b      	ldrb	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f107 0208 	add.w	r2, r7, #8
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4798      	blx	r3
 8005e8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	2207      	movs	r2, #7
 8005e96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e98:	e00f      	b.n	8005eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f9ef 	bl	8006280 <USBD_CtlError>
      err++;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	72fb      	strb	r3, [r7, #11]
    break;
 8005ea8:	e007      	b.n	8005eba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9e7 	bl	8006280 <USBD_CtlError>
    err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
    break;
 8005eb8:	bf00      	nop
  }

  if (err != 0U)
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11e      	bne.n	8005efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	88db      	ldrh	r3, [r3, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d016      	beq.n	8005ef6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005ec8:	893b      	ldrh	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88da      	ldrh	r2, [r3, #6]
 8005ed2:	893b      	ldrh	r3, [r7, #8]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bf28      	it	cs
 8005ed8:	4613      	movcs	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ede:	893b      	ldrh	r3, [r7, #8]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fa3c 	bl	8006362 <USBD_CtlSendData>
 8005eea:	e009      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9c6 	bl	8006280 <USBD_CtlError>
 8005ef4:	e004      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa8d 	bl	8006416 <USBD_CtlSendStatus>
 8005efc:	e000      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
    return;
 8005efe:	bf00      	nop
    }
  }
}
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d130      	bne.n	8005f7c <USBD_SetAddress+0x74>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12c      	bne.n	8005f7c <USBD_SetAddress+0x74>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	2b7f      	cmp	r3, #127	; 0x7f
 8005f28:	d828      	bhi.n	8005f7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d104      	bne.n	8005f4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f99c 	bl	8006280 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f48:	e01c      	b.n	8005f84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7bfa      	ldrb	r2, [r7, #15]
 8005f4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 febe 	bl	8006cd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa5a 	bl	8006416 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f70:	e008      	b.n	8005f84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7a:	e003      	b.n	8005f84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f97e 	bl	8006280 <USBD_CtlError>
  }
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	885b      	ldrh	r3, [r3, #2]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b4b      	ldr	r3, [pc, #300]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fa4:	4b4a      	ldr	r3, [pc, #296]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d905      	bls.n	8005fb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f966 	bl	8006280 <USBD_CtlError>
    return USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e087      	b.n	80060c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USBD_SetConfig+0x3c>
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d025      	beq.n	8006012 <USBD_SetConfig+0x86>
 8005fc6:	e071      	b.n	80060ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005fc8:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01c      	beq.n	800600a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005fd0:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fda:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff f9a7 	bl	8005334 <USBD_SetClassConfig>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f944 	bl	8006280 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005ff8:	e065      	b.n	80060c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa0b 	bl	8006416 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2203      	movs	r2, #3
 8006004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006008:	e05d      	b.n	80060c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa03 	bl	8006416 <USBD_CtlSendStatus>
    break;
 8006010:	e059      	b.n	80060c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006012:	4b2f      	ldr	r3, [pc, #188]	; (80060d0 <USBD_SetConfig+0x144>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d112      	bne.n	8006040 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006022:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <USBD_SetConfig+0x144>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800602c:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <USBD_SetConfig+0x144>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff f99a 	bl	800536c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f9ec 	bl	8006416 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800603e:	e042      	b.n	80060c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006040:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <USBD_SetConfig+0x144>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d02a      	beq.n	80060a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff f988 	bl	800536c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800605c:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <USBD_SetConfig+0x144>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <USBD_SetConfig+0x144>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff f961 	bl	8005334 <USBD_SetClassConfig>
 8006072:	4603      	mov	r3, r0
 8006074:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00f      	beq.n	800609c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8fe 	bl	8006280 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f96d 	bl	800536c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800609a:	e014      	b.n	80060c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9ba 	bl	8006416 <USBD_CtlSendStatus>
    break;
 80060a2:	e010      	b.n	80060c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9b6 	bl	8006416 <USBD_CtlSendStatus>
    break;
 80060aa:	e00c      	b.n	80060c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8e6 	bl	8006280 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <USBD_SetConfig+0x144>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff f956 	bl	800536c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	73fb      	strb	r3, [r7, #15]
    break;
 80060c4:	bf00      	nop
  }

  return ret;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000244 	.word	0x20000244

080060d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d004      	beq.n	80060f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8c9 	bl	8006280 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80060ee:	e021      	b.n	8006134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	db17      	blt.n	800612a <USBD_GetConfig+0x56>
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	dd02      	ble.n	8006104 <USBD_GetConfig+0x30>
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d00b      	beq.n	800611a <USBD_GetConfig+0x46>
 8006102:	e012      	b.n	800612a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3308      	adds	r3, #8
 800610e:	2201      	movs	r2, #1
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f925 	bl	8006362 <USBD_CtlSendData>
      break;
 8006118:	e00c      	b.n	8006134 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2201      	movs	r2, #1
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f91d 	bl	8006362 <USBD_CtlSendData>
      break;
 8006128:	e004      	b.n	8006134 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8a7 	bl	8006280 <USBD_CtlError>
      break;
 8006132:	bf00      	nop
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614c:	3b01      	subs	r3, #1
 800614e:	2b02      	cmp	r3, #2
 8006150:	d81e      	bhi.n	8006190 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	88db      	ldrh	r3, [r3, #6]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d004      	beq.n	8006164 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f88f 	bl	8006280 <USBD_CtlError>
      break;
 8006162:	e01a      	b.n	800619a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f043 0202 	orr.w	r2, r3, #2
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	330c      	adds	r3, #12
 8006184:	2202      	movs	r2, #2
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8ea 	bl	8006362 <USBD_CtlSendData>
    break;
 800618e:	e004      	b.n	800619a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f874 	bl	8006280 <USBD_CtlError>
    break;
 8006198:	bf00      	nop
  }
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d106      	bne.n	80061c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f92a 	bl	8006416 <USBD_CtlSendStatus>
  }
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061da:	3b01      	subs	r3, #1
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d80b      	bhi.n	80061f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	885b      	ldrh	r3, [r3, #2]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10c      	bne.n	8006202 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f910 	bl	8006416 <USBD_CtlSendStatus>
      }
      break;
 80061f6:	e004      	b.n	8006202 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f840 	bl	8006280 <USBD_CtlError>
      break;
 8006200:	e000      	b.n	8006204 <USBD_ClrFeature+0x3a>
      break;
 8006202:	bf00      	nop
  }
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fad3 	bl	80057e2 <SWAPBYTE>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fac6 	bl	80057e2 <SWAPBYTE>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fab9 	bl	80057e2 <SWAPBYTE>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	80da      	strh	r2, [r3, #6]
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fcb9 	bl	8006c04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fcb5 	bl	8006c04 <USBD_LL_StallEP>
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d036      	beq.n	8006326 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062bc:	6938      	ldr	r0, [r7, #16]
 80062be:	f000 f836 	bl	800632e <USBD_GetLen>
 80062c2:	4603      	mov	r3, r0
 80062c4:	3301      	adds	r3, #1
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
  idx++;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	3301      	adds	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4413      	add	r3, r2
 80062e8:	2203      	movs	r2, #3
 80062ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	3301      	adds	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80062f2:	e013      	b.n	800631c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4413      	add	r3, r2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3301      	adds	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
    idx++;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	3301      	adds	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
    idx++;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	3301      	adds	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e7      	bne.n	80062f4 <USBD_GetString+0x52>
 8006324:	e000      	b.n	8006328 <USBD_GetString+0x86>
    return;
 8006326:	bf00      	nop
  }
}
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800633e:	e005      	b.n	800634c <USBD_GetLen+0x1e>
  {
    len++;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	3301      	adds	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f5      	bne.n	8006340 <USBD_GetLen+0x12>
  }

  return len;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	2100      	movs	r1, #0
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fcc4 	bl	8006d16 <USBD_LL_Transmit>

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	2100      	movs	r1, #0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fcb3 	bl	8006d16 <USBD_LL_Transmit>

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2203      	movs	r2, #3
 80063ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	2100      	movs	r1, #0
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fcb7 	bl	8006d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	2100      	movs	r1, #0
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fca6 	bl	8006d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2204      	movs	r2, #4
 8006422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006426:	2300      	movs	r3, #0
 8006428:	2200      	movs	r2, #0
 800642a:	2100      	movs	r1, #0
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc72 	bl	8006d16 <USBD_LL_Transmit>

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2205      	movs	r2, #5
 8006448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800644c:	2300      	movs	r3, #0
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc80 	bl	8006d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006468:	2200      	movs	r2, #0
 800646a:	4912      	ldr	r1, [pc, #72]	; (80064b4 <MX_USB_DEVICE_Init+0x50>)
 800646c:	4812      	ldr	r0, [pc, #72]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 800646e:	f7fe fef3 	bl	8005258 <USBD_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006478:	f7fa fa10 	bl	800089c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800647c:	490f      	ldr	r1, [pc, #60]	; (80064bc <MX_USB_DEVICE_Init+0x58>)
 800647e:	480e      	ldr	r0, [pc, #56]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 8006480:	f7fe ff20 	bl	80052c4 <USBD_RegisterClass>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800648a:	f7fa fa07 	bl	800089c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800648e:	490c      	ldr	r1, [pc, #48]	; (80064c0 <MX_USB_DEVICE_Init+0x5c>)
 8006490:	4809      	ldr	r0, [pc, #36]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 8006492:	f7fe fe75 	bl	8005180 <USBD_CDC_RegisterInterface>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800649c:	f7fa f9fe 	bl	800089c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064a0:	4805      	ldr	r0, [pc, #20]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 80064a2:	f7fe ff30 	bl	8005306 <USBD_Start>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064ac:	f7fa f9f6 	bl	800089c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000130 	.word	0x20000130
 80064b8:	20000254 	.word	0x20000254
 80064bc:	20000018 	.word	0x20000018
 80064c0:	2000011c 	.word	0x2000011c

080064c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064c8:	2200      	movs	r2, #0
 80064ca:	4905      	ldr	r1, [pc, #20]	; (80064e0 <CDC_Init_FS+0x1c>)
 80064cc:	4805      	ldr	r0, [pc, #20]	; (80064e4 <CDC_Init_FS+0x20>)
 80064ce:	f7fe fe6c 	bl	80051aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064d2:	4905      	ldr	r1, [pc, #20]	; (80064e8 <CDC_Init_FS+0x24>)
 80064d4:	4803      	ldr	r0, [pc, #12]	; (80064e4 <CDC_Init_FS+0x20>)
 80064d6:	f7fe fe81 	bl	80051dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80064da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80064dc:	4618      	mov	r0, r3
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20000d24 	.word	0x20000d24
 80064e4:	20000254 	.word	0x20000254
 80064e8:	20000524 	.word	0x20000524

080064ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80064f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	6039      	str	r1, [r7, #0]
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	4613      	mov	r3, r2
 800650a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b23      	cmp	r3, #35	; 0x23
 8006510:	d84a      	bhi.n	80065a8 <CDC_Control_FS+0xac>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <CDC_Control_FS+0x1c>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065a9 	.word	0x080065a9
 8006520:	080065a9 	.word	0x080065a9
 8006524:	080065a9 	.word	0x080065a9
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065a9 	.word	0x080065a9
 8006530:	080065a9 	.word	0x080065a9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	080065a9 	.word	0x080065a9
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080065a9 	.word	0x080065a9
 800654c:	080065a9 	.word	0x080065a9
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080065a9 	.word	0x080065a9
 800655c:	080065a9 	.word	0x080065a9
 8006560:	080065a9 	.word	0x080065a9
 8006564:	080065a9 	.word	0x080065a9
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065a9 	.word	0x080065a9
 8006570:	080065a9 	.word	0x080065a9
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065a9 	.word	0x080065a9
 800657c:	080065a9 	.word	0x080065a9
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065a9 	.word	0x080065a9
 800658c:	080065a9 	.word	0x080065a9
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065a9 	.word	0x080065a9
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065a9 	.word	0x080065a9
 80065a0:	080065a9 	.word	0x080065a9
 80065a4:	080065a9 	.word	0x080065a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065a8:	bf00      	nop
  }

  return (USBD_OK);
 80065aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4805      	ldr	r0, [pc, #20]	; (80065dc <CDC_Receive_FS+0x24>)
 80065c6:	f7fe fe09 	bl	80051dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065ca:	4804      	ldr	r0, [pc, #16]	; (80065dc <CDC_Receive_FS+0x24>)
 80065cc:	f7fe fe1a 	bl	8005204 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000254 	.word	0x20000254

080065e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80065f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2212      	movs	r2, #18
 8006614:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006616:	4b03      	ldr	r3, [pc, #12]	; (8006624 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	2000014c 	.word	0x2000014c

08006628 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2204      	movs	r2, #4
 8006638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800663a:	4b03      	ldr	r3, [pc, #12]	; (8006648 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	20000160 	.word	0x20000160

0800664c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d105      	bne.n	800666a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4907      	ldr	r1, [pc, #28]	; (8006680 <USBD_FS_ProductStrDescriptor+0x34>)
 8006662:	4808      	ldr	r0, [pc, #32]	; (8006684 <USBD_FS_ProductStrDescriptor+0x38>)
 8006664:	f7ff fe1d 	bl	80062a2 <USBD_GetString>
 8006668:	e004      	b.n	8006674 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4904      	ldr	r1, [pc, #16]	; (8006680 <USBD_FS_ProductStrDescriptor+0x34>)
 800666e:	4805      	ldr	r0, [pc, #20]	; (8006684 <USBD_FS_ProductStrDescriptor+0x38>)
 8006670:	f7ff fe17 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20001524 	.word	0x20001524
 8006684:	08007028 	.word	0x08007028

08006688 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	4904      	ldr	r1, [pc, #16]	; (80066a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006698:	4804      	ldr	r0, [pc, #16]	; (80066ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800669a:	f7ff fe02 	bl	80062a2 <USBD_GetString>
  return USBD_StrDesc;
 800669e:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20001524 	.word	0x20001524
 80066ac:	08007040 	.word	0x08007040

080066b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	221a      	movs	r2, #26
 80066c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066c2:	f000 f843 	bl	800674c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066c6:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000164 	.word	0x20000164

080066d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d105      	bne.n	80066f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4907      	ldr	r1, [pc, #28]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066ea:	4808      	ldr	r0, [pc, #32]	; (800670c <USBD_FS_ConfigStrDescriptor+0x38>)
 80066ec:	f7ff fdd9 	bl	80062a2 <USBD_GetString>
 80066f0:	e004      	b.n	80066fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	4904      	ldr	r1, [pc, #16]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066f6:	4805      	ldr	r0, [pc, #20]	; (800670c <USBD_FS_ConfigStrDescriptor+0x38>)
 80066f8:	f7ff fdd3 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066fc:	4b02      	ldr	r3, [pc, #8]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20001524 	.word	0x20001524
 800670c:	08007054 	.word	0x08007054

08006710 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	6039      	str	r1, [r7, #0]
 800671a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4907      	ldr	r1, [pc, #28]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006726:	4808      	ldr	r0, [pc, #32]	; (8006748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006728:	f7ff fdbb 	bl	80062a2 <USBD_GetString>
 800672c:	e004      	b.n	8006738 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4904      	ldr	r1, [pc, #16]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006732:	4805      	ldr	r0, [pc, #20]	; (8006748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006734:	f7ff fdb5 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20001524 	.word	0x20001524
 8006748:	08007060 	.word	0x08007060

0800674c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <Get_SerialNum+0x44>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006758:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <Get_SerialNum+0x48>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800675e:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <Get_SerialNum+0x4c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006772:	2208      	movs	r2, #8
 8006774:	4909      	ldr	r1, [pc, #36]	; (800679c <Get_SerialNum+0x50>)
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f814 	bl	80067a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800677c:	2204      	movs	r2, #4
 800677e:	4908      	ldr	r1, [pc, #32]	; (80067a0 <Get_SerialNum+0x54>)
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f000 f80f 	bl	80067a4 <IntToUnicode>
  }
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	1fff7a10 	.word	0x1fff7a10
 8006794:	1fff7a14 	.word	0x1fff7a14
 8006798:	1fff7a18 	.word	0x1fff7a18
 800679c:	20000166 	.word	0x20000166
 80067a0:	20000176 	.word	0x20000176

080067a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
 80067ba:	e027      	b.n	800680c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	0f1b      	lsrs	r3, r3, #28
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	d80b      	bhi.n	80067dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	0f1b      	lsrs	r3, r3, #28
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	4619      	mov	r1, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	440b      	add	r3, r1
 80067d4:	3230      	adds	r2, #48	; 0x30
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e00a      	b.n	80067f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	0f1b      	lsrs	r3, r3, #28
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	4619      	mov	r1, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	440b      	add	r3, r1
 80067ec:	3237      	adds	r2, #55	; 0x37
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	3301      	adds	r3, #1
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4413      	add	r3, r2
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	3301      	adds	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
 800680c:	7dfa      	ldrb	r2, [r7, #23]
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	429a      	cmp	r2, r3
 8006812:	d3d3      	bcc.n	80067bc <IntToUnicode+0x18>
  }
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006828:	f107 0314 	add.w	r3, r7, #20
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006840:	d13a      	bne.n	80068b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	6313      	str	r3, [r2, #48]	; 0x30
 8006852:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800685e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006864:	2302      	movs	r3, #2
 8006866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800686c:	2303      	movs	r3, #3
 800686e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006870:	230a      	movs	r3, #10
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	4619      	mov	r1, r3
 800687a:	4812      	ldr	r0, [pc, #72]	; (80068c4 <HAL_PCD_MspInit+0xa4>)
 800687c:	f7fa fad2 	bl	8000e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006880:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688a:	6353      	str	r3, [r2, #52]	; 0x34
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800689a:	6453      	str	r3, [r2, #68]	; 0x44
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2100      	movs	r1, #0
 80068ac:	2043      	movs	r0, #67	; 0x43
 80068ae:	f7fa fa82 	bl	8000db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80068b2:	2043      	movs	r0, #67	; 0x43
 80068b4:	f7fa fa9b 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068b8:	bf00      	nop
 80068ba:	3728      	adds	r7, #40	; 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40020000 	.word	0x40020000

080068c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f7fe fd5c 	bl	800539c <USBD_LL_SetupStage>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	4619      	mov	r1, r3
 8006916:	f7fe fd94 	bl	8005442 <USBD_LL_DataOutStage>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	1a9b      	subs	r3, r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	3348      	adds	r3, #72	; 0x48
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	4619      	mov	r1, r3
 800694a:	f7fe fddd 	bl	8005508 <USBD_LL_DataInStage>
}
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fee1 	bl	800572c <USBD_LL_SOF>
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
 800698a:	e008      	b.n	800699e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d102      	bne.n	800699a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
 8006998:	e001      	b.n	800699e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800699a:	f7f9 ff7f 	bl	800089c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069a4:	7bfa      	ldrb	r2, [r7, #15]
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fe84 	bl	80056b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fe3d 	bl	8005634 <USBD_LL_Reset>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fe7f 	bl	80056d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069f8:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <HAL_PCD_SuspendCallback+0x48>)
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	4a03      	ldr	r2, [pc, #12]	; (8006a0c <HAL_PCD_SuspendCallback+0x48>)
 80069fe:	f043 0306 	orr.w	r3, r3, #6
 8006a02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	e000ed00 	.word	0xe000ed00

08006a10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fe6e 	bl	8005700 <USBD_LL_Resume>
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a3e:	78fa      	ldrb	r2, [r7, #3]
 8006a40:	4611      	mov	r1, r2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fe99 	bl	800577a <USBD_LL_IsoOUTIncomplete>
}
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a62:	78fa      	ldrb	r2, [r7, #3]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fe7a 	bl	8005760 <USBD_LL_IsoINIncomplete>
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fe86 	bl	8005794 <USBD_LL_DevConnected>
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fe83 	bl	80057aa <USBD_LL_DevDisconnected>
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d13c      	bne.n	8006b36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006abc:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <USBD_LL_Init+0x94>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a1e      	ldr	r2, [pc, #120]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ac8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006acc:	4b1c      	ldr	r3, [pc, #112]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ada:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <USBD_LL_Init+0x94>)
 8006adc:	2202      	movs	r2, #2
 8006ade:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ae6:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ae8:	2202      	movs	r2, #2
 8006aea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006aec:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <USBD_LL_Init+0x94>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006af2:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <USBD_LL_Init+0x94>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <USBD_LL_Init+0x94>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006afe:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b0a:	480d      	ldr	r0, [pc, #52]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b0c:	f7fa fb3d 	bl	800118a <HAL_PCD_Init>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b16:	f7f9 fec1 	bl	800089c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	4808      	ldr	r0, [pc, #32]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b1e:	f7fb fc9a 	bl	8002456 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b22:	2240      	movs	r2, #64	; 0x40
 8006b24:	2100      	movs	r1, #0
 8006b26:	4806      	ldr	r0, [pc, #24]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b28:	f7fb fc4e 	bl	80023c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b2c:	2280      	movs	r2, #128	; 0x80
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4803      	ldr	r0, [pc, #12]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b32:	f7fb fc49 	bl	80023c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20001724 	.word	0x20001724

08006b44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fa fc32 	bl	80013c4 <HAL_PCD_Start>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f92a 	bl	8006dc0 <USBD_Get_USB_Status>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	461a      	mov	r2, r3
 8006b88:	4603      	mov	r3, r0
 8006b8a:	70fb      	strb	r3, [r7, #3]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70bb      	strb	r3, [r7, #2]
 8006b90:	4613      	mov	r3, r2
 8006b92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006ba2:	78bb      	ldrb	r3, [r7, #2]
 8006ba4:	883a      	ldrh	r2, [r7, #0]
 8006ba6:	78f9      	ldrb	r1, [r7, #3]
 8006ba8:	f7fb f816 	bl	8001bd8 <HAL_PCD_EP_Open>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f904 	bl	8006dc0 <USBD_Get_USB_Status>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fb f85f 	bl	8001ca8 <HAL_PCD_EP_Close>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f8e5 	bl	8006dc0 <USBD_Get_USB_Status>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fb f937 	bl	8001e96 <HAL_PCD_EP_SetStall>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f8c6 	bl	8006dc0 <USBD_Get_USB_Status>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fb f97c 	bl	8001f5e <HAL_PCD_EP_ClrStall>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f8a7 	bl	8006dc0 <USBD_Get_USB_Status>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da0b      	bge.n	8006cb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ca2:	68f9      	ldr	r1, [r7, #12]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	333e      	adds	r3, #62	; 0x3e
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	e00b      	b.n	8006ccc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fa ff49 	bl	8001b8e <HAL_PCD_SetAddress>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f85c 	bl	8006dc0 <USBD_Get_USB_Status>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	460b      	mov	r3, r1
 8006d24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d34:	7af9      	ldrb	r1, [r7, #11]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	f7fb f862 	bl	8001e02 <HAL_PCD_EP_Transmit>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f83b 	bl	8006dc0 <USBD_Get_USB_Status>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	460b      	mov	r3, r1
 8006d66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d76:	7af9      	ldrb	r1, [r7, #11]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	f7fa ffde 	bl	8001d3c <HAL_PCD_EP_Receive>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f81a 	bl	8006dc0 <USBD_Get_USB_Status>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d90:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fb f80e 	bl	8001dd2 <HAL_PCD_EP_GetRxCount>
 8006db6:	4603      	mov	r3, r0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d817      	bhi.n	8006e04 <USBD_Get_USB_Status+0x44>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USBD_Get_USB_Status+0x1c>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006df3 	.word	0x08006df3
 8006de4:	08006df9 	.word	0x08006df9
 8006de8:	08006dff 	.word	0x08006dff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
    break;
 8006df0:	e00b      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	73fb      	strb	r3, [r7, #15]
    break;
 8006df6:	e008      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfc:	e005      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	73fb      	strb	r3, [r7, #15]
    break;
 8006e02:	e002      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	73fb      	strb	r3, [r7, #15]
    break;
 8006e08:	bf00      	nop
  }
  return usb_status;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <__errno>:
 8006e18:	4b01      	ldr	r3, [pc, #4]	; (8006e20 <__errno+0x8>)
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000180 	.word	0x20000180

08006e24 <__libc_init_array>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4e0d      	ldr	r6, [pc, #52]	; (8006e5c <__libc_init_array+0x38>)
 8006e28:	4c0d      	ldr	r4, [pc, #52]	; (8006e60 <__libc_init_array+0x3c>)
 8006e2a:	1ba4      	subs	r4, r4, r6
 8006e2c:	10a4      	asrs	r4, r4, #2
 8006e2e:	2500      	movs	r5, #0
 8006e30:	42a5      	cmp	r5, r4
 8006e32:	d109      	bne.n	8006e48 <__libc_init_array+0x24>
 8006e34:	4e0b      	ldr	r6, [pc, #44]	; (8006e64 <__libc_init_array+0x40>)
 8006e36:	4c0c      	ldr	r4, [pc, #48]	; (8006e68 <__libc_init_array+0x44>)
 8006e38:	f000 f8ea 	bl	8007010 <_init>
 8006e3c:	1ba4      	subs	r4, r4, r6
 8006e3e:	10a4      	asrs	r4, r4, #2
 8006e40:	2500      	movs	r5, #0
 8006e42:	42a5      	cmp	r5, r4
 8006e44:	d105      	bne.n	8006e52 <__libc_init_array+0x2e>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e4c:	4798      	blx	r3
 8006e4e:	3501      	adds	r5, #1
 8006e50:	e7ee      	b.n	8006e30 <__libc_init_array+0xc>
 8006e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e56:	4798      	blx	r3
 8006e58:	3501      	adds	r5, #1
 8006e5a:	e7f2      	b.n	8006e42 <__libc_init_array+0x1e>
 8006e5c:	08007090 	.word	0x08007090
 8006e60:	08007090 	.word	0x08007090
 8006e64:	08007090 	.word	0x08007090
 8006e68:	08007094 	.word	0x08007094

08006e6c <malloc>:
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <malloc+0xc>)
 8006e6e:	4601      	mov	r1, r0
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f000 b861 	b.w	8006f38 <_malloc_r>
 8006e76:	bf00      	nop
 8006e78:	20000180 	.word	0x20000180

08006e7c <free>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <free+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f000 b80b 	b.w	8006e9c <_free_r>
 8006e86:	bf00      	nop
 8006e88:	20000180 	.word	0x20000180

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <_free_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d045      	beq.n	8006f30 <_free_r+0x94>
 8006ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea8:	1f0c      	subs	r4, r1, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfb8      	it	lt
 8006eae:	18e4      	addlt	r4, r4, r3
 8006eb0:	f000 f8ac 	bl	800700c <__malloc_lock>
 8006eb4:	4a1f      	ldr	r2, [pc, #124]	; (8006f34 <_free_r+0x98>)
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	4610      	mov	r0, r2
 8006eba:	b933      	cbnz	r3, 8006eca <_free_r+0x2e>
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	6014      	str	r4, [r2, #0]
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec6:	f000 b8a2 	b.w	800700e <__malloc_unlock>
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	d90c      	bls.n	8006ee8 <_free_r+0x4c>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	1862      	adds	r2, r4, r1
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	bf04      	itt	eq
 8006ed6:	681a      	ldreq	r2, [r3, #0]
 8006ed8:	685b      	ldreq	r3, [r3, #4]
 8006eda:	6063      	str	r3, [r4, #4]
 8006edc:	bf04      	itt	eq
 8006ede:	1852      	addeq	r2, r2, r1
 8006ee0:	6022      	streq	r2, [r4, #0]
 8006ee2:	6004      	str	r4, [r0, #0]
 8006ee4:	e7ec      	b.n	8006ec0 <_free_r+0x24>
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	b10a      	cbz	r2, 8006ef0 <_free_r+0x54>
 8006eec:	42a2      	cmp	r2, r4
 8006eee:	d9fa      	bls.n	8006ee6 <_free_r+0x4a>
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	1858      	adds	r0, r3, r1
 8006ef4:	42a0      	cmp	r0, r4
 8006ef6:	d10b      	bne.n	8006f10 <_free_r+0x74>
 8006ef8:	6820      	ldr	r0, [r4, #0]
 8006efa:	4401      	add	r1, r0
 8006efc:	1858      	adds	r0, r3, r1
 8006efe:	4282      	cmp	r2, r0
 8006f00:	6019      	str	r1, [r3, #0]
 8006f02:	d1dd      	bne.n	8006ec0 <_free_r+0x24>
 8006f04:	6810      	ldr	r0, [r2, #0]
 8006f06:	6852      	ldr	r2, [r2, #4]
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	4401      	add	r1, r0
 8006f0c:	6019      	str	r1, [r3, #0]
 8006f0e:	e7d7      	b.n	8006ec0 <_free_r+0x24>
 8006f10:	d902      	bls.n	8006f18 <_free_r+0x7c>
 8006f12:	230c      	movs	r3, #12
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	e7d3      	b.n	8006ec0 <_free_r+0x24>
 8006f18:	6820      	ldr	r0, [r4, #0]
 8006f1a:	1821      	adds	r1, r4, r0
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	bf04      	itt	eq
 8006f20:	6811      	ldreq	r1, [r2, #0]
 8006f22:	6852      	ldreq	r2, [r2, #4]
 8006f24:	6062      	str	r2, [r4, #4]
 8006f26:	bf04      	itt	eq
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	605c      	str	r4, [r3, #4]
 8006f2e:	e7c7      	b.n	8006ec0 <_free_r+0x24>
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20000248 	.word	0x20000248

08006f38 <_malloc_r>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	1ccd      	adds	r5, r1, #3
 8006f3c:	f025 0503 	bic.w	r5, r5, #3
 8006f40:	3508      	adds	r5, #8
 8006f42:	2d0c      	cmp	r5, #12
 8006f44:	bf38      	it	cc
 8006f46:	250c      	movcc	r5, #12
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	db01      	blt.n	8006f52 <_malloc_r+0x1a>
 8006f4e:	42a9      	cmp	r1, r5
 8006f50:	d903      	bls.n	8006f5a <_malloc_r+0x22>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	2000      	movs	r0, #0
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	f000 f857 	bl	800700c <__malloc_lock>
 8006f5e:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <_malloc_r+0xac>)
 8006f60:	6814      	ldr	r4, [r2, #0]
 8006f62:	4621      	mov	r1, r4
 8006f64:	b991      	cbnz	r1, 8006f8c <_malloc_r+0x54>
 8006f66:	4c20      	ldr	r4, [pc, #128]	; (8006fe8 <_malloc_r+0xb0>)
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	b91b      	cbnz	r3, 8006f74 <_malloc_r+0x3c>
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f000 f83d 	bl	8006fec <_sbrk_r>
 8006f72:	6020      	str	r0, [r4, #0]
 8006f74:	4629      	mov	r1, r5
 8006f76:	4630      	mov	r0, r6
 8006f78:	f000 f838 	bl	8006fec <_sbrk_r>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d124      	bne.n	8006fca <_malloc_r+0x92>
 8006f80:	230c      	movs	r3, #12
 8006f82:	6033      	str	r3, [r6, #0]
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f842 	bl	800700e <__malloc_unlock>
 8006f8a:	e7e4      	b.n	8006f56 <_malloc_r+0x1e>
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	1b5b      	subs	r3, r3, r5
 8006f90:	d418      	bmi.n	8006fc4 <_malloc_r+0x8c>
 8006f92:	2b0b      	cmp	r3, #11
 8006f94:	d90f      	bls.n	8006fb6 <_malloc_r+0x7e>
 8006f96:	600b      	str	r3, [r1, #0]
 8006f98:	50cd      	str	r5, [r1, r3]
 8006f9a:	18cc      	adds	r4, r1, r3
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 f836 	bl	800700e <__malloc_unlock>
 8006fa2:	f104 000b 	add.w	r0, r4, #11
 8006fa6:	1d23      	adds	r3, r4, #4
 8006fa8:	f020 0007 	bic.w	r0, r0, #7
 8006fac:	1ac3      	subs	r3, r0, r3
 8006fae:	d0d3      	beq.n	8006f58 <_malloc_r+0x20>
 8006fb0:	425a      	negs	r2, r3
 8006fb2:	50e2      	str	r2, [r4, r3]
 8006fb4:	e7d0      	b.n	8006f58 <_malloc_r+0x20>
 8006fb6:	428c      	cmp	r4, r1
 8006fb8:	684b      	ldr	r3, [r1, #4]
 8006fba:	bf16      	itet	ne
 8006fbc:	6063      	strne	r3, [r4, #4]
 8006fbe:	6013      	streq	r3, [r2, #0]
 8006fc0:	460c      	movne	r4, r1
 8006fc2:	e7eb      	b.n	8006f9c <_malloc_r+0x64>
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	6849      	ldr	r1, [r1, #4]
 8006fc8:	e7cc      	b.n	8006f64 <_malloc_r+0x2c>
 8006fca:	1cc4      	adds	r4, r0, #3
 8006fcc:	f024 0403 	bic.w	r4, r4, #3
 8006fd0:	42a0      	cmp	r0, r4
 8006fd2:	d005      	beq.n	8006fe0 <_malloc_r+0xa8>
 8006fd4:	1a21      	subs	r1, r4, r0
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f808 	bl	8006fec <_sbrk_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d0cf      	beq.n	8006f80 <_malloc_r+0x48>
 8006fe0:	6025      	str	r5, [r4, #0]
 8006fe2:	e7db      	b.n	8006f9c <_malloc_r+0x64>
 8006fe4:	20000248 	.word	0x20000248
 8006fe8:	2000024c 	.word	0x2000024c

08006fec <_sbrk_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4c06      	ldr	r4, [pc, #24]	; (8007008 <_sbrk_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	f7f9 fcf8 	bl	80009ec <_sbrk>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_sbrk_r+0x1a>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	b103      	cbz	r3, 8007006 <_sbrk_r+0x1a>
 8007004:	602b      	str	r3, [r5, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20001b2c 	.word	0x20001b2c

0800700c <__malloc_lock>:
 800700c:	4770      	bx	lr

0800700e <__malloc_unlock>:
 800700e:	4770      	bx	lr

08007010 <_init>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr

0800701c <_fini>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr
